{
  "version": 3,
  "sources": ["../../../.github/pages/game.js"],
  "sourcesContent": ["const K = {\n  /// train statuses, probably.\n  MOVING: 1,\n  STOPPED: 2,\n  // touch action statuses\n  NOHOLD: 0,\n  HOLD: 1,\n  HOLD_NEWLINE: 2,\n  HOLD_CONNECTION:3,\n  HOLD_EXTEND: 4,\n  // passenger status \n  WAITING: 0,\n  ONTHEWAY: 1,\n  // settings dialog - base pixel height per terminal to be handled:\n  SETTINGSHEIGHT: 50,\n  // board/deboard time/passenger\n  DELAYPERPASSENGER: 400,\n  INF: 9e99,\n  /// was supposed to be pi and a bit to make arcs completely touching but it didn't seem to work.\n  PI: Math.PI,\n  // animation times:\n  ANIM_SETTINGSDIALOG: 100,\n\n  // stop over-capacity timeout\n  FAILTIME: 30000, // in ticks (scalable ms)\n  PCTPERTICK: 1/30000,\n  LINEWIDTH:10, // width of one line in base-size pixels \n  LINEACCEPTDIST: 20, // base-size pixels under which line dragging will be accepted\n  // actionStatuses: \n  NOACTION:0,\n  BOARDPENDING:1, // just boarding \n  DEBOARDPENDING:2, // just deboarding\n  TRANSFERPENDING:3 // deboarding FOR TRANSFER.\n}\n\nlet paused = false;\nconst trainSpeed = 100 / 1000; // pixels/ms\nlet holdState = K.NOHOLD;\nlet activeSettingsDialog = null;\nlet ctx = null;\nlet canv = null;\nlet startTick = -1;\nlet startTime = -1;\nlet totalScaleFac = 1;\nlet hovering = null, hoveringConn = null;\nlet stops = [];\nlet asyncEvents = [];\nlet modifyingConn = null;\nlet recentlyRemoved = [];\nlet connections = [];\nlet lineTypes = [];\nlet stopCt = 0;\nlet extendInfo = null;\nlet minSclFac = 0.5;\nconst maxSclFac = 3;\nlet viewportW = 0;\nlet viewportH = 0;\nlet viewportMax, viewportMin;\nlet currPath = [];\nlet typesOnLine = [];\nlet lines = [];\nlet trains = [];\nlet ticketCost = 10;\nlet passengersServed = 0;\nlet cash = 0;\nlet maxUnlockedType = 0;\nconst acceptRadius = 30;\nconst stopSz = 17;\nlet adj = [];\nlet passengers = [];\nlet currPos_canv = {x:0,y:0};\nlet lineCt = 0;\nlet shiftStatus = false;\nlet downPt = null;\nlet types = [triangle, square, circ, star];\nlet defaultClr = \"#555\";\nconst colours = [\"green\", \"yellow\", \"blue\", \"orange\", \"purple\", \"grey\"];\nlet DEBUG = true;\nlet globalTicks = 0;\nlet currSpeed = 2;\nfunction onLoad() {\n\n}\n\nfunction bezier(t , p1, p2, p3){\nreturn (1-t)**2*p1 + 2*(1-t)*t*p2 + t**2*p3;\n}\n\nfunction timeNow() {\n  return globalTicks;\n}\n\nfunction togglePause() {\n  paused = !paused;\n  redraw();\n  if (!paused) {\n    requestAnimationFrame(tickLoop);\n  }\n}\n\nfunction parallelStops(cmp) {\n  let ct = 0;\n  let idx = -1;\n  let flipped = 0;\n  for (let i=0; i<connections.length; i++) {\n    let cnn= connections[i];\n    if (samePt(cnn.from, cmp.from) && samePt(cnn.to, cmp.to)\n       || samePt(cnn.from, cmp.to) && samePt(cnn.to, cmp.from)) {\n      if (cmp == cnn && idx == -1) {  \n        idx=ct;\n      }\n      if (samePt(cnn.from, cmp.to) && flipped == 0) flipped=1; // ONLY SET THIS ONCE\n      else if (flipped == 0) flipped = 2;\n      ct++;\n    }\n  }\n  return {idx:idx, flipped:flipped==1, ct:ct};\n}\n\nfunction getNextStop(currTrain, actQ=true) {\n  let line = lines[currTrain.lineID]\n  let currToIdx = line.path.indexOf(nearestStop(currTrain.to,1));\n  if (currTrain.revDir && currToIdx == 0)\n  {\n    if (line.loopingQ) {\n      nextStop = line.path[line.path.length-2];\n    }\n    else {\n      if (actQ) currTrain.revDir = !currTrain.revDir;\n      nextStop = line.path[1];\n    }\n  }\n  else if (!currTrain.revDir && currToIdx == line.path.length-1) {\n    // nextStop = currTrain.from;\n    nextStop = line.path[line.path.length-2];\n    if (actQ) currTrain.revDir = !currTrain.revDir;\n  }\n  else if (currTrain.revDir) {\n    nextStop = line.path[currToIdx-1];\n  }\n  else nextStop = line.path[currToIdx+1]; \n  if (!nextStop) debugger;\n  return nearestStop(nextStop, 1);\n}\n\nfunction handlePassenger(pass) {\n  if (pass.status != K.WAITING) return;\n  let minRouteLength = K.INF;\n  // let minRoute = [];\n  for (let l=0; l<pass.from.linesServed.size; l++) {\n    let lIdx = Array.from(pass.from.linesServed)[l];\n    for (let i=0; i<typesOnLine.length; i++) {\n      if (!typesOnLine[i].has(pass.to)) continue;\n      if (minRouteLength > adj[lIdx][i].val) {\n        minRouteLength = adj[lIdx][i].val;\n        // pass.route=adj[lIdx][i].route;\n        //WARNING! DO A DEEP COPY\n        pass.route = [];\n        for (let e of adj[lIdx][i].route)\n          pass.route.push(e);\n      }\n    }\n  }\n}\n\nfunction handleOffset(connection) {\n  let angBtw = Math.atan2(connection.to.y - connection.from.y,\n    connection.to.x - connection.from.x);\n  // angBtw += K.PI;\n  let info = parallelStops(connection);\n  let offsetR = (K.LINEWIDTH/2)*(2*info.idx+1-info.ct) //+ stopSz;\n  let newAng = info.flipped?(angBtw+Math.PI):angBtw;\n  return {x:offsetR*Math.cos(newAng+Math.PI/2), y: offsetR*Math.sin(newAng+Math.PI/2)}\n}\n\nfunction getAssociatedConnection(train) {\n  for (let cn of connections) {\n    if (samePt(cn.to, train.to) && samePt(cn.from, train.from) || \n        samePt(cn.from, train.to) && samePt(cn.to, train.from))\n      if (cn.lineID == train.lineID) return cn;\n  }\n  return null;\n}\nfunction redraw(delta) {\n\n  let fpsCurr = 1000/delta;\n  ctx.lineCap = \"round\";\n  // function connect(currPath, clr) {\n  function circle(pt, clear=true) {\n    ctx.save();\n    if (clear) clearCircle(pt, acceptRadius);\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, stopSz, 0, K.PI * 2);\n    ctx.stroke();\n    // ctx.strokeStyle;\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, acceptRadius, 0, K.PI * 2);\n    ctx.stroke();\n    ctx.restore();\n    ctx.beginPath();\n  }\n  function clearCircle(pt, rad) {\n    ctx.beginPath();\n    ctx.fillStyle = getCSSProp(\"--system-bg\");\n    ctx.save();\n    ctx.arc(pt.x, pt.y, rad + 2, 0, K.PI * 2);\n    ctx.clip();\n    ctx.save();\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canv.width, canv.height);\n    ctx.restore();\n    ctx.fill();\n    ctx.restore();\n    ctx.beginPath();\n  }\n\n  function clearShape(pt, rad) {\n    ctx.save();\n    ctx.fillStyle = getCSSProp(\"--system-bg\");\n\n    types[pt.type](rad/3, pt.x, pt.y);\n    ctx.restore();\n  }\n  ctx.strokeStyle = defaultClr;\n  updateMinScl();\n  ctx.beginPath();\n  ctx.save();\n  ctx.resetTransform();\n  ctx.fillStyle = getCSSProp(\"--system-bg\");\n  ctx.clearRect(0, 0, canv.width, canv.height);\n  ctx.fillRect(0, 0, canv.width, canv.height);\n  ctx.restore();\n  if (DEBUG) {\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.moveTo(-viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, viewportH/2);\n    ctx.lineTo(-viewportW/2, viewportH/2);\n    ctx.lineTo(-viewportW/2, -viewportH/2);\n    ctx.stroke();\n    ctx.fillText(fpsCurr.toFixed(2)+\"fps\", -viewportW/2+30, -viewportH/2+30)\n  }\n  ctx.beginPath();\n\n\n\n  if (hovering && !activeSettingsDialog) {\n    ctx.save();\n    ctx.fillStyle = getCSSProp(\"--system-green2\");\n    // ctx.strokeWidth = acceptRadius - stopSz;\n    ctx.beginPath();\n    // ctx.arc(hovering.x, hovering.y, acceptRadius, 0, K.PI*2);\n    types[hovering.type](acceptRadius/3, hovering.x, hovering.y);\n    ctx.fill();\n    // clearCircle({x:hovering.x,y:hovering.y},stopSz);\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  if (holdState == K.HOLD_CONNECTION) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = modifyingConn.colour;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(modifyingConn.from.x, modifyingConn.from.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.moveTo(modifyingConn.to.x, modifyingConn.to.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  if (holdState == K.HOLD_EXTEND) {\n    ctx.save();\n    ctx.beginPath();\n    let line = extendInfo.line;\n    let stop = extendInfo.stop;\n    ctx.strokeStyle = line.colour;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(stop.x, stop.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n\n  // existing paths///////////\n  for (let i = 0; i < connections.length; i++) {\n    // if (lines.length > 0) ctx.arc(lines[i][0].x, lines[i][0].y, acceptRadius, 0, K.PI*2);\n    // // for (let i=1; i<currPath.length; i++) {\n    let offset = handleOffset(connections[i]);\n    let angBtw = Math.atan2(connections[i].to.y - connections[i].from.y,\n      connections[i].to.x - connections[i].from.x);\n    // angBtw += K.PI;\n    ctx.save();\n    // ctx.lineWidth = hoveringConn == connections[i]?K.LINEACCEPTDIST:K.LINEWIDTH;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.lineCap = \"round\";\n\n    if (hoveringConn && hoveringConn != connections[i] \n     || holdState == K.HOLD_CONNECTION\n     || connections[i].pendingRemove)\n      ctx.strokeStyle = getCSSProp(\"--system-grey3\")//connections[i].colour+\"55\";\n    else  \n      ctx.strokeStyle = connections[i].colour;\n    // else \n    // ctx.strokeStyle = hoveringConn == connections[i]?connections[i].colour+\"55\":connections[i].colour;\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    // let newAng = angBtw;\n    ctx.moveTo(connections[i].from.x + offset.x,\n      connections[i].from.y         + offset.y);\n    ctx.lineTo(connections[i].to.x   + offset.x,\n      connections[i].to.y          + offset.y)\n    ctx.stroke();\n    ctx.beginPath();\n    for (let stop of stops) {\n      let dist =pDist(stop.x, stop.y, connections[i].from.x, connections[i].from.y, connections[i].to.x, connections[i].to.y);\n      if (!samePt(stop, connections[i].from) && !samePt(stop, connections[i].to) && \n          dist < acceptRadius) {\n        let basex = stop.x + dist*Math.cos(angBtw+K.PI/2);\n        let basey = stop.y + dist*Math.sin(angBtw+K.PI/2);\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(basex-c*acceptRadius, basey-s*acceptRadius);\n        ctx.lineTo(basex+c*acceptRadius, basey+s*acceptRadius);\n        ctx.lineWidth = K.LINEWIDTH/2;\n        console.log(\"found!\");\n        // ctx.globalCompositeOperation = \"destination-out\";\n        ctx.strokeStyle = getCSSProp(\"--system-bg\");\n        ctx.stroke();\n        ctx.restore();\n        ctx.beginPath();\n      }\n    }\n    ctx.restore();\n  }\n\n\n  let lastPt = currPath?currPath[currPath.length - 1]:null;\n  let nextStop = nearestStop(currPos_canv, acceptRadius);\n  if (holdState == K.HOLD_NEWLINE && (!nextStop || !samePt(nextStop, lastPt))){\n      ctx.moveTo(lastPt.x, lastPt.y);\n      ctx.save();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      ctx.lineWidth = K.LINEWIDTH;\n      ctx.lineTo(currPos_canv.x, currPos_canv.y);\n      ctx.stroke();\n      ctx.restore();\n  }\n\n  //////// current path /////////\n  // connect(currPath, getCSSProp(\"--system-green\"));\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = defaultClr;\n  ctx.stroke();\n  for (let i = 1; i < currPath.length; i++) {\n    let angBtw = Math.atan2(currPath[i].y - currPath[i - 1].y,\n      currPath[i].x - currPath[i - 1].x);\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(currPath[i - 1].x, currPath[i - 1].y);\n    ctx.lineTo(currPath[i].x, currPath[i].y)\n    ctx.stroke();\n    ctx.strokeStyle = defaultClr;\n  }\n  ctx.lineWidth = 4;\n  ctx.beginPath();\n\n\n  ////////// little stop circles //////////\n  for (let i = 0; i < stops.length; i++) {\n    // clearCircle(stops[i], stopSz);\n    renderStop(stops[i]);\n    // if ()\n  }\n\n  for (let i=0; i<recentlyRemoved.length; i++) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.strokeStyle = getCSSProp(\"--system-red\");\n    if (timeNow() - recentlyRemoved[i].time > 500) {\n      recentlyRemoved.splice(i, 1);\n      i--;\n      continue;\n    }\n    ctx.globalAlpha = (1-(timeNow() - recentlyRemoved[i].time)/500)*0.5;\n    // let off = handleOffset(recentlyRemoved[i].conn);\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(recentlyRemoved[i].conn.from.x, recentlyRemoved[i].conn.from.y);\n    ctx.lineTo(recentlyRemoved[i].conn.to.x, recentlyRemoved[i].conn.to.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  ctx.save();\n  ctx.lineWidth = 4;\n\n\n  //////////////// existing path line circles ////////////////////\n  for (let i = 0; i < connections.length; i++) {\n    // ctx.strokeStyle = getCSSProp(\"--\")\n    // clearCircle(connections[i].from, stopSz);\n    // clearCircle(connections[i].to, stopSz);\n    ctx.beginPath();\n    // ctx.lineWidth = K.LINEWIDTH;    \n    ctx.fillStyle = getCSSProp(\"--system-bg\");  \n    ctx.strokeStyle = defaultClr;\n    // ctx.fillStyle = getCSSProp(\"--system-bg\" );\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.lineJoin = \"round\";\n    types[connections[i].from.type](stopSz/3, connections[i].from.x, connections[i].from.y, true)\n    // ctx.arc(connections[i].from.x, connections[i].from.y, stopSz, 0, K.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    types[connections[i].to.type](stopSz/3, connections[i].to.x, connections[i].to.y, true)\n    ctx.stroke();\n    // circle(connections[i].from)//, connections[i].colour);\n    // circle(connections[i].to) //, connections[i].colour);\n  }\n\n\n\n  ctx.restore();\n  ctx.beginPath();\n  ////////////////////////////////\n  ctx.restore();\n  ctx.beginPath();\n  if (holdState == K.HOLD_NEWLINE) {\n    // must have a starting poibt\n\n    let angBtw = Math.atan2(currPos_canv.y - lastPt.y,\n      currPos_canv.x - lastPt.x);\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    // let nextStop = nearestStop(currPos_canv, acceptRadius);\n    if (nextStop && samePt(nextStop, lastPt)) { // accepted new stop\n      clearShape(lastPt, acceptRadius);\n      ctx.save();\n      ctx.beginPath();\n      ctx.lineWidth = K.LINEWIDTH;\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      // ctx.arc(lastPt.x, lastPt.y, stopSz, 0, K.PI * 2);\n      ctx.fillStyle = \"rgba(0,0,0,0)\";\n      ctx.lineJoin = \"round\";\n      // ctx.stroke();\n      // circle(lastPt);\n      types[lastPt.type](stopSz/3, lastPt.x, lastPt.y, true)\n      types[lastPt.type](acceptRadius/3, lastPt.x, lastPt.y, true)\n      ctx.restore();\n\n    }\n    ctx.beginPath();\n    // else if (!nextStop) {\n\n    // THERE'S A PROBLEM.\n    // else if (nextStop) {\n\n    //   angBtw = Math.atan2(nextStop.y - lastPt.y,\n    //     nextStop.x - lastPt.x);\n    //   c = Math.cos(angBtw);\n    //   s = Math.sin(angBtw);\n    //   ctx.moveTo(lastPt.x + c * acceptRadius, lastPt.y + s * acceptRadius);\n\n    //   ctx.save();\n    //   ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    //   ctx.lineWidth = K.LINEWIDTH;\n    //   ctx.lineTo(nextStop.x - c * acceptRadius, nextStop.y - s * acceptRadius);\n    //   ctx.stroke();\n    //   ctx.beginPath();\n    //   ctx.lineWidth = 4;\n    //   ctx.strokeStyle = getCSSProp(\"--system-red\");\n    //   ctx.arc(nextStop.x, nextStop.y, stopSz, 0, K.PI * 2);\n    //   ctx.stroke();\n    //   circle(nextStop);\n    //   ctx.restore();\n    // }\n    // just not connected yet.\n\n\n    //////////////// then put the current path large circles /////////\n    for (let i = 0; i < currPath.length; i++) {\n      ctx.save();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      // circle(currPath[i]);\n      ctx.lineJoin = \"round\";\n      ctx.fillStyle = \"rgba(0,0,0,0)\";\n      // ctx.strokeS\n      // types[currPath[i].type](stopSz/3, currPath[i].x, currPath[i].y, true);\n      ctx.lineWidth = K.LINEWIDTH;\n      types[currPath[i].type](acceptRadius/3, currPath[i].x, currPath[i].y, true);\n      ctx.restore();\n    }\n    // if (!samePt(nextStop, lastPt)) \n    //   ctx.strokeStyle = getCSSProp(\"--system-red\");\n    // else \n    // ctx.strokeStyle = getCSSProp(\"--system-green\");\n\n    // }\n  }\n\n  for (let i=0; i<stops.length; i++) {\n    ctx.save();\n    ctx.beginPath();\n    if (stops[i].failurePct > 0) {\n      ctx.fillStyle = getCSSProp(\"--system-red2\");\n      // let pctRemaining = (timeNow() - stops[i].failureTimer)/K.FAILTIME;\n      let pctRemaining = stops[i].failurePct;\n      let pctOneSec = (timeNow() - stops[i].failurePct*K.FAILTIME)/300;\n      let radScl = 0;\n      if (pctOneSec < 1) \n        radScl = (-4*(pctOneSec-0.5)**2)+0.5;\n      if (pctRemaining > 1 && pctRemaining < 2) {\n        radScl = pctRemaining**120;\n      }\n      let currRad = stopSz+(acceptRadius-stopSz)*2+10*radScl;\n\n      // let radiusFcn = \n      // cubic-bezier( 0.175, 0.885, 0.32, 1.275 )\n\n      ctx.beginPath();\n      ctx.moveTo(stops[i].x, stops[i].y);\n      // ctx.strokeStyle = getCSSProp(\"--system-transp\");\n      ctx.arc(stops[i].x, stops[i].y, currRad, 0, Math.PI*pctRemaining*2);\n      // ctx.stroke();\n      ctx.fill();\n      ctx.fill();\n      ctx.lineCap = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(stops[i].x+currRad, stops[i].y);\n      ctx.arc(stops[i].x, stops[i].y, currRad, 0, Math.PI*pctRemaining*2);\n      ctx.strokeStyle = getCSSProp(\"--system-red\");\n      // ctx.lineTo(stops[i].x, stops[i].y);\n      ctx.stroke();\n      ctx.beginPath();\n    }\n    ctx.restore();\n  }\n\n  for (let stop of stops) {\n    drawWaiting(stop);\n  }\n\n  // for (let i = 0; i < stops.length; i++)\n  // now we draw the trains!\n  for (let i = 0; i < trains.length; i++) {\n    ctx.beginPath();\n    let angBtw = Math.atan2(trains[i].to.y - trains[i].from.y,\n      trains[i].to.x - trains[i].from.x);\n    let nStop = nearestStop(trains[i], stopSz);\n    // if (!nStop) nStop = nearestStop(trains[i].from, stopSz);\n// angBtw = 0;\n    let associatedConnection = getAssociatedConnection(trains[i]);\n    let offset = handleOffset(associatedConnection);\n    let center = { x: trains[i].x+offset.x, y: trains[i].y+offset.y };\n\n    const w = 15;\n    const h = 30;\n    const c = Math.cos(angBtw);\n    const c2 = Math.cos(angBtw + K.PI / 2)\n    const s = Math.sin(angBtw);\n    const s2 = Math.sin(angBtw + K.PI / 2);\n    // const halfDiag = Math.sqrt(w*w/4+h*h/4)/2;\n    ctx.save();\n    // ctx.translate(-center.x, -center.y)\n    // ctx.rotate(angBtw);\n    // ctx.translate(center.x, center.y);\n    ctx.globalAlpha = 0.6;\n    ctx.fillStyle = associatedConnection.colour;\n    ctx.moveTo(center.x + c * h / 2 + c2 * w / 2, center.y + s * h / 2 + s2 * w / 2);\n    ctx.lineTo(center.x + c * h / 2 - c2 * w / 2, center.y + s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 - c2 * w / 2, center.y - s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 + c2 * w / 2, center.y - s * h / 2 + s2 * w / 2);\n    ctx.fill();\n    ctx.fillStyle = defaultClr;\n    let str = \"\";\n    for (let pass of trains[i].passengers)\n      str+= pass.to.toString();\n    ctx.save();\n    /// here coems the transformation!\n    ctx.globalAlpha = 1;\n    ctx.translate(center.x, center.y);\n    ctx.beginPath();\n    ctx.rotate(angBtw+(trains[i].revDir?Math.PI:0));\n    let y = 0;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    let uSz = w/2;\n    let cap = trains[i].cap;\n    for (let j=0; j<trains[i].passengers.length; j++) {\n      if (j>=cap/2) y = 1;\n      let px = j%(cap/2)*uSz+uSz/2-h/2;\n      let py = y*uSz+uSz/2-w/2;\n      types[trains[i].passengers[j].to](1, px, py);\n\n    }\n    // ctx.moveTo(-w/2, -h/2);\n    // ctx.lineTo(w/2, h/2);\n    // ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n    // ctx.fillRect(center.x - 8, center.y-2.5, 16, 5);\n    ctx.restore();\n  }\n\n  if (activeSettingsDialog) {\n    let stop = activeSettingsDialog.stop;\n    let h = -activeSettingsDialog.hgt*\n      Math.min(1, (Date.now()-activeSettingsDialog.time)/K.ANIM_SETTINGSDIALOG);\n    ctx.save();\n    ctx.beginPath();\n    ctx.fillStyle = getCSSProp(\"--system-overlay\");\n    ctx.moveTo(stop.x+acceptRadius, stop.y);\n    // ctx.arc(stop.x, stop.y+h, acceptRadius, 0, K.PI*2);\n    ctx.lineTo(stop.x+acceptRadius, stop.y+h);\n    ctx.arc(stop.x, stop.y+h, acceptRadius, 0, K.PI, true);\n    // ctx.lineTo(stop.x-acceptRadius, stop.y+h);\n    ctx.lineTo(stop.x-acceptRadius, stop.y);\n    ctx.arc(stop.x, stop.y, acceptRadius, 0, K.PI);\n    // ctx.stroke();\n    ctx.fill();\n    renderStop(stop);\n    ctx.beginPath();\n    for (let i=0; i<Math.floor(-h/K.SETTINGSHEIGHT); i++) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.fillStyle = activeSettingsDialog.lines[i].colour+\"95\";\n      if (activeSettingsDialog.selected == activeSettingsDialog.lines[i].lineID) {\n        ctx.fillStyle = activeSettingsDialog.lines[i].colour;\n      }\n      ctx.arc(stop.x, stop.y-(i+1)*K.SETTINGSHEIGHT, stopSz, 0, K.PI*2);\n      ctx.fill();\n      // ctx.beginPath();\n      if (activeSettingsDialog.selected == activeSettingsDialog.lines[i].lineID) {\n        ctx.lineWidth = 4;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = defaultClr;\n        ctx.font = \"30px Noto Sans Display\";\n        let baseX = stop.x;\n        let baseY = stop.y-(i+1)*K.SETTINGSHEIGHT;\n        ctx.moveTo(baseX-stopSz*0.5, baseY);\n        ctx.lineTo(baseX+stopSz*0.5, baseY);\n        ctx.moveTo(baseX, baseY-stopSz*0.5);\n        ctx.lineTo(baseX, baseY+stopSz*0.5);\n        ctx.strokeStyle = defaultClr;\n        ctx.stroke();\n      }\n      ctx.beginPath();\n      ctx.restore();\n    }\n    // ctx.beginPath();\n    // ctx.fillStyle = getCSSProp(\"--system-red\");\n    // ctx.fill();\n    ctx.restore();\n    ctx.beginPath();\n\n  }\n\n  if (paused) {\n\n    ctx.save();\n    ctx.resetTransform();\n    // ctx.fillRect(0,0, canv.width, canv.height);\n    ctx.globalAlpha = 1;\n    ctx.fillStyle = getCSSProp(\"--system-blue\");\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.font = \"30px Noto Sans Display\";\n\n    ctx.fillText(\"Paused\", 50, 50);\n    ctx.restore();\n  }\n\n} // redraw()\n\nfunction renderStop(stop) {\n  // ctx.arc(stop.x, stop.y, stopSz, 0, K.PI * 2);\n  // ctx.stroke();\n  ctx.beginPath();\n  ctx.fillStyle = defaultClr;\n\n\n\n  types[stop.type](stopSz/3, stop.x, stop.y);\n  ctx.beginPath();\n}\n\nfunction drawWaiting(stop) {\n  let y = 0, x=0;\n  let dy = 15;\n  ctx.fillStyle = defaultClr;\n  let dx = 15;\n  const maxW = 5; // # waiting per line before linebreak\n  let baseOffset = Math.ceil(stop.waiting.length/maxW)*dy\n  for (let j = 0; j < stop.waiting.length; j++) {\n    if (x >= maxW) {\n      y++;\n      x=0;\n    }\n    let adjX = stop.x+stopSz+(x%maxW)*dx-dx/2;\n    let adjY = (stop.y-baseOffset)-stopSz+y*dy-dy/2;\n    x++;\n    types[stop.waiting[j].to](2, adjX, adjY);\n    // triangle(1.1, adjX, adjY)\n    // out += stop.waiting[j].to.toString();\n  }\n}\n\nfunction registerMaximisingCanvas(id, widthPc, heightPc, redrawFcn) { // (id:string, widthPc:number, heightPc:number, redrawFcn:()=>any) {\n  //let canv = byId(id)// as HTMLCanvasElement;\n  window.addEventListener(\"resize\", (ev) => {\n    canv.width = window.innerWidth * widthPc;\n    canv.height = window.innerHeight * heightPc;\n    // everything is gone - restore it!\n    applyTransfm();\n    redrawFcn();\n  })\n  // canv.style.height = 100 * heightPc + \"vh\";\n  // canv.style.width = 100 * widthPc + \"vw\";\n  canv.width = window.innerWidth * widthPc;\n  canv.height = window.innerHeight * heightPc;\n  redrawFcn();\n}\n\nfunction populateStops() {\n  for (let i = 0; i < stops.length; i++) {\n    if (Math.random() < 0.4) continue;\n    let toAdd = Math.floor(Math.random() * (stops.length) / 3) + 1;\n    for (let j = 0; j < toAdd; j++) {\n      let stopAdded = Math.floor(Math.random() * stops.length);\n      // if (stopAdded >= stops[i].type) stopAdded++;\n      let currType = getNextType(stops[stopAdded].type);\n      let pass = { from: stops[stopAdded], to: currType, route: [], \n                  status: K.WAITING, actionStatus: K.NOACTION, train:null, stop:null};\n      passengers.push(pass);\n      handlePassenger(pass);\n      stops[stopAdded].waiting.push(pass);\n      let stop = stops[stopAdded]\n      if (stop.waiting.length > stop.capacity && !stop.failing) {\n        stop.failing = true;\n        stop.failureTimer=0;\n      }\n\n    }\n  }\n}\n\n// https://stackoverflow.com/questions/19519535/detect-if-browser-tab-is-active-or-user-has-switched-away\nvar vis = (function(){\n    var stateKey, eventKey, keys = {\n        hidden: \"visibilitychange\",\n        webkitHidden: \"webkitvisibilitychange\",\n        mozHidden: \"mozvisibilitychange\",\n        msHidden: \"msvisibilitychange\"\n    };\n    for (stateKey in keys) {\n        if (stateKey in document) {\n            eventKey = keys[stateKey];\n            break;\n        }\n    }\n    return function(c) {\n        if (c) document.addEventListener(eventKey, c);\n        return !document[stateKey];\n    }\n})();\n\nfunction preLoad() {\n  vis(()=>{\n    if (vis()) document.title = \"thing\";\n    else {\n      paused = true;\n      document.title = \"thing (paused)\"\n    }\n  })\n  canv = byId(\"canv\");\n  ctx = canv.getContext(\"2d\");\n  registerMaximisingCanvas(\"canv\", 1, 0.95, redraw);\n  if ((docURL.searchParams.get(\"debug\")??\"yesplease\").match(/false|no|beans/)) {\n    DEBUG = false;\n  }\n  canv.addEventListener(\"pointermove\", onmove);\n  canv.addEventListener(\"pointerdown\", (ev) => {\n    // if (paused) return;\n    if (event.button != 0) return;\n    holdState = K.HOLD;\n    downPt = { x: ev.clientX, y: ev.clientY };\n    let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n    let nStop = nearestStop(actualPos, acceptRadius);\n    let nConn = nearestConnection(actualPos.x, actualPos.y);\n    if (nStop && colours.length > 0) {\n      holdState = K.HOLD_NEWLINE;\n      activeSettingsDialog = null;\n      currPath = [nStop];\n      redraw();\n    }\n    else if (activeSettingsDialog && activeSettingsDialog.selected != null) {\n      let sel = activeSettingsDialog.selected;\n      holdState = K.HOLD_EXTEND;\n      extendInfo = {line:lines[sel], stop: activeSettingsDialog.stop};\n      activeSettingsDialog = null;\n    }\n    else if (nConn) {\n      holdState = K.HOLD_CONNECTION;\n      modifyingConn = nConn;\n    }\n    if (holdState == K.HOLD || holdState == K.HOLD_CONNECTION) {\n      document.body.style.cursor = \"grabbing\";\n    }\n  });\n  window.addEventListener(\"keydown\", keyUpdate);\n  window.addEventListener(\"keyup\", keyUpdate);\n  window.addEventListener(\"pointerup\", (e)=>{\n    // if (paused) {\n    //   togglePause();\n    //   return;\n    // }\n    routeConfirm(e); onmove(e);\n  });\n  canv.addEventListener(\"wheel\", (ev) => {\n    // larger -ve deltaY: \n    // ctx.\n    // let sclFac = (ev.deltaY<0?Math.pow(10, -ev.deltaY/750):Math.pow(10, -ev.deltaY/400))\n    let sclFac = (ev.deltaY < 0 ? 1.15 : 1 / 1.15)\n    if (sclFac * totalScaleFac > maxSclFac)\n      sclFac = maxSclFac / totalScaleFac;\n    if (sclFac * totalScaleFac < minSclFac)\n      sclFac = minSclFac / totalScaleFac;\n    translate(-ev.clientX, -ev.clientY);\n    scale(sclFac);\n    translate(ev.clientX, ev.clientY);\n    totalScaleFac *= sclFac;\n    redraw();\n  })\n  //////////\n  // setup stops\n  updateMinScl();\n  // let firstPoint = genRandomPt();\n  // firstPoint.waiting = [];\n  // stops.push(firstPoint);\n  // stops.type = 0;\n  // let canvMinDim = Math.min(viewportW, viewportH); \n  for (let i = 0; i < 3; i++) {\n    addNewStop(i);\n  }\n  totalScaleFac *= 0.8;\n  // translate(-viewportW/2, -viewportH/2);\n  scale(totalScaleFac);\n  translate(canv.width / 2, canv.height / 2);\n  redraw();\n  //////\n  // setInterval(tickLoop, 1000/60);\n  requestAnimationFrame(tickLoop);\n  requestAnimationFrame(animLoop);\n  startTick = timeNow();\n  startTime = Date.now();\n  asyncEvents.push({fcn:stopPopulationLoop, time:timeNow()+5000/currSpeed});\n}\n\nfunction animLoop() {\n  let delta = Date.now() - startTime;\n  startTime = Date.now();\n  redraw(delta);\n  requestAnimationFrame(animLoop);\n}\n\nfunction nearestConnection(x, y) {\n  let bestDist = K.INF;\n  let bestConn = null;\n  for (let i=0; i<connections.length; i++) {\n    let cn = connections[i];\n    let off = handleOffset(cn);\n    // let tOff = handleOffset(cn.to);\n    let currDist = pDist(x, y, cn.from.x+off.x, cn.from.y+off.y, cn.to.x+off.x, cn.to.y+off.y);\n    if (currDist < bestDist) {\n      bestDist = currDist;\n      bestConn = cn;\n    }\n  }\n  // return bestConn;\n  return bestDist < K.LINEACCEPTDIST?bestConn:null;\n}\n\n// thanks https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment#1501725\n// love not writing my own code\nfunction pDist(x, y, x1, y1, x2, y2) { // dist between line SEGMENT and pt\n\n  var A = x - x1;\n  var B = y - y1;\n  var C = x2 - x1;\n  var D = y2 - y1;\n\n  var dot = A * C + B * D;\n  var len_sq = C * C + D * D;\n  var param = -1;\n  if (len_sq != 0) //in case of 0 length line\n      param = dot / len_sq;\n\n  var xx, yy;\n\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  }\n  else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  }\n  else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  var dx = x - xx;\n  var dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction tickLoop() {\n  globalTicks += 16.66667*currSpeed; // 60fps default\n  for (let i=0; i<asyncEvents.length; i++) {\n    if (timeNow() > asyncEvents[i].time) {\n      asyncEvents[i].fcn();\n      asyncEvents.splice(i, 1);\n      i--;\n    } \n  }\n  for (let i = 0; i < trains.length; i++) {\n    let currTrain = trains[i];\n    let distTotal = distBtw(trains[i].to, trains[i].from);\n    // distToCover = s * px/s / px\n    let distTravelled = (timeNow() - currTrain.startT) * trainSpeed;\n    let percentCovered = distTravelled / distTotal;\n    if (percentCovered < 0) continue;\n    if (percentCovered >= 1) { // at a stop. \n      let startT = timeNow();\n      percentCovered = 0;\n      // let applicable = [];\n      let currentTo = trains[i].to;//trains[i].revDir?trains[i].from:trains[i].to;\n      let currStop = nearestStop(currentTo, 1);\n      // currTrain.onCompletion = currTrain.passengers.length;\n      // how many people to drop off here?\n      let delay = dropOff(currTrain, currentTo) * K.DELAYPERPASSENGER/currSpeed;\n      // figure out if the train is due to reverse first.\n      let reverseQ = true;\n      let nextStop = null;\n      // for (let j = 0; j < connections.length && reverseQ; j++) {\n      //   if ((trains[i].revDir ? samePt(connections[j].to, currentTo)\n      //     : samePt(connections[j].from, currentTo))\n      //     && connections[j].lineID == trains[i].lineID) {\n      //     reverseQ = false;\n      //     nextStop = trains[i].revDir ? connections[j].from : connections[j].to;\n      //   }\n      // }\n      // no need to do all this nonsense the train knows its path\n      let prevStop = currTrain.from;\n      nextStop = getNextStop(currTrain);\n      // if next stop is the same as the prev stop - we know that the train is reversing\n\n\n      // who to pick up?\n      //  find which stops this line supports\n      // let availableTransfers = new Set();\n\n      // while (true) {\n      currStop = nearestStop(currentTo, 1);\n      let upcomingLinesServed = new Set(JSON.parse(JSON.stringify([...currStop.linesServed])));\n      // 1. drop off people who are transferring - MAKE SURE THEY'RE ON THEIR WAY!\n      for (let j=0; j<currTrain.passengers.length; j++) {\n        let pass = currTrain.passengers[j];\n        if (pass.route.length > 0 && pass.status == K.ONTHEWAY \n            && pass.actionStatus == K.NOACTION &&\n            upcomingLinesServed.has(pass.route[0])) {\n          // currTrain.passengers.splice(j, 1);\n          // currStop.toAdd.push({from:currTrain,pass:pass});\n          // currTrain.onCompletion--;\n          // // currStop.waiting.push(pass);\n          // // debugger;\n          // // j--;\n          pass.actionStatus = K.TRANSFERPENDING;\n          // pass.status = K.WAITING;\n          pass.stop = currStop;\n          pass.train = currTrain;\n          pass.route.shift();\n          delay += K.DELAYPERPASSENGER/currSpeed;\n        }\n      }\n      // 2. pick up people who need transfers (they typically wait very long)\n      for (let j=0; j<connections.length; j++) {\n        if (connections[j].lineID == currTrain.lineID) {\n          let fStop = nearestStop(connections[j].from, 1);\n          let tStop = nearestStop(connections[j].to, 1);\n          for (const nextLine of fStop.linesServed) \n            upcomingLinesServed.add(nextLine);\n          for (const nextLine of tStop.linesServed) \n            upcomingLinesServed.add(nextLine);\n        }\n      }\n      for (let j=0; j<currStop.waiting.length; j++) {\n        let pass = currStop.waiting[j];\n        // if (currTrain.onCompletion >= currTrain.cap) break;\n        if (currStop.waiting[j].actionStatus != K.NOACTION) continue;\n        if (pass.route.length > 0 && upcomingLinesServed.has(pass.route[0])) {\n          // currStop.waiting.splice(j, 1);\n          currStop.waiting[j].actionStatus = K.BOARDPENDING;\n          // pass.status = K.ONTHEWAY;\n          currStop.waiting[j].stop = currStop;\n          currStop.waiting[j].train = currTrain;\n          // j--;\n          // currTrain.onCompletion++;\n          // currTrain.toAdd.push({stop:currStop,pass:pass});\n          // pass.status = K.ONTHEWAY;\n          delay += K.DELAYPERPASSENGER/currSpeed;\n        }\n      }\n\n      // 3. pick up people who do not have transfers at all\n      for (let k = 0; k < currStop.waiting.length; k++) {\n        // if (currTrain.passengers.length >= currTrain.cap) break;\n        // for (let j = 0; j < typesOnLine.length; j++) {\n\n        if (currStop.waiting[k].actionStatus != K.NOACTION) continue;\n        if (typesOnLine[currTrain.lineID].has(currStop.waiting[k].to)) {\n          let adding = currStop.waiting[k];\n          currStop.waiting[k].actionStatus = K.BOARDPENDING;\n          currStop.waiting[k].stop = currStop;\n          currStop.waiting[k].train = currTrain;\n          // adding.status = K.ONTHEWAY;\n          // currStop.waiting.splice(k, 1);\n          // currTrain.toAdd.push({stop:currStop,pass:adding});\n          // k--;\n        }\n        delay += K.DELAYPERPASSENGER/currSpeed;\n        // }\n      }\n      // if (currTrain.revDir) {\n      if (delay > 0) currTrain.startT = K.INF;\n      let connBeforeUpdate = getAssociatedConnection(currTrain);\n      // if (!connBeforeUpdate.pendingRemove) connBeforeUpdate = null;\n      currTrain.from = currTrain.to;\n      currTrain.to = nextStop;\n\n      handleAwaiting(currTrain, currStop);\n\n\n      // }\n      if (timeNow() - startT > 25) \n        console.log(\"WARNING: StopHandler took \", timeNow() - startT+\"ms\");\n    } // if percentcoered = 1\n    currTrain.x = currTrain.from.x + (currTrain.to.x - currTrain.from.x) * percentCovered;\n    currTrain.y = currTrain.from.y + (currTrain.to.y - currTrain.from.y) * percentCovered;\n  }\n  for (let i=0; i<stops.length; i++) {\n    if (stops[i].failurePct < 0) continue;\n    let pctRemaining = stops[i].failurePct;\n    if (pctRemaining > 1) {\n      currSpeed*=0.99;\n      // alertDialog(\"loser!\", ()=>{\n      //   location.reload();\n      // });\n      // return;\n    }\n  }\n  let delta = timeNow() - startTick;\n  startTick = timeNow();\n  for (let stop of stops) {\n    if (stop.failing) stop.failurePct+=K.PCTPERTICK*delta;\n    else stop.failurePct= Math.max(0, stop.failurePct-K.PCTPERTICK*delta)\n  }\n  // redraw(delta);\n  if (!paused) requestAnimationFrame(tickLoop);\n}\n\nfunction handleAwaiting(currTrain, currStop) {\n  let handled = false;\n  for (const pass of passengers) {\n    if (pass.train != currTrain || pass.stop != currStop) continue;\n    else if (pass.actionStatus == K.NOACTION) continue;\n    // if people are trying to get on the train but unable to do so - abandon the action and wait for next recalculation\n    else if (currTrain.passengers.length >= currTrain.cap && \n             pass.actionStatus == K.BOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      continue;\n    }\n    else if (pass.actionStatus == K.BOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currStop.waiting.length; i++) \n        if (currStop.waiting[i] == pass) {\n          currStop.waiting.splice(i, 1);\n          currTrain.passengers.push(pass);\n          break;\n        }\n      if (currStop.waiting.length < currStop.capacity) {\n        currStop.failing = false;\n      }\n      pass.status = K.ONTHEWAY;\n      pass.actionStatus = K.NOACTION;\n      handled = true;\n      break;\n    }\n    else if (pass.actionStatus == K.DEBOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currTrain.passengers.length; i++) \n        if (currTrain.passengers[i] == pass) {\n          currTrain.passengers.splice(i,1);\n          break;\n        }\n      pass.status = K.WAITING;\n      if (currStop.waiting.length < currStop.capacity)\n        currStop.failing =false;\n      pass.actionStatus = K.NOACTION;\n      handled = true;\n      break;\n    }\n    else if (pass.actionStatus == K.TRANSFERPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currTrain.passengers.length; i++) \n        if (currTrain.passengers[i] == pass) {\n          currTrain.passengers.splice(i,1);\n          currStop.waiting.push(pass);\n          break;\n        }\n      pass.status = K.WAITING;\n      pass.actionStatus = K.NOACTION;\n      let stop = currStop;\n      if (stop.waiting.length > stop.capacity && stop.failurePct < 1)\n        stop.failing=true;\n      handled = true;\n      break;\n    }\n    else throw(\"invalid actionStatus!\");\n  }\n  if (handled) {\n\n    let toCall = {fcn:()=>{handleAwaiting(currTrain, currStop)}, time:timeNow()+K.DELAYPERPASSENGER/currSpeed};\n    asyncEvents.push(toCall);\n  }\n  else {\n    currTrain.startT = timeNow();\n    for (const affectedConn of connections) {\n      if (affectedConn.pendingRemove) {\n        let canUpdate = true;\n        // check if all trains have cleared this connection\n        let currLine = lines[affectedConn.lineID];\n        for (affectedTrain of currLine.trains) {\n          if (getAssociatedConnection(affectedTrain) == affectedConn) {\n            canUpdate = false;\n            break;\n          }\n        }\n        if (canUpdate) updateToNow(currLine, affectedConn);\n      }\n    }\n\n  }\n}\n\nfunction dropOff(currTrain, pt) {\n  let stop = nearestStop(pt, 1);\n  let matching = 0;\n  for (let i = 0; i < currTrain.passengers.length; i++)\n    if (currTrain.passengers[i].to == stop.type && currTrain.passengers[i].actionStatus == K.NOACTION) {\n      matching++;\n      // currTrain.passengers.splice(i, 1);\n      // currTrain.onCompletion--;\n      currTrain.passengers[i].actionStatus = K.DEBOARDPENDING;\n      currTrain.passengers[i].stop = stop;\n      currTrain.passengers[i].train = currTrain;\n      // currTrain.toRemove.push({stop:stop, pass:currTrain.passengers[i]});\n      // i--;\n    }\n  return matching;\n}\n\nfunction stopPopulationLoop() {\n  populateStops();\n  redraw();\n  asyncEvents.push({fcn:stopPopulationLoop, time:timeNow()+(5000 + Math.random() * 7000)/currSpeed});\n}\n\nfunction updateMinScl(newVal = minSclFac) {\n  minSclFac = newVal;\n  viewportW = canv.width / minSclFac * 0.4;\n  viewportH = canv.height / minSclFac * 0.4;\n  viewportMax = Math.max(viewportW, viewportH);\n  viewportMin = Math.min(viewportW, viewportH);\n}\n\nfunction addNewStop(type = -1) {\n  let newPt;\n  if (type < 0) type = getNextType();\n  if (stops.length > 0)\n    do {\n      // newPt = genRandomPt();\n      // this is stupid.\n      refPt = stops[Math.floor(Math.random() * stops.length)];\n      // if (refPt)\n      ang = Math.random() * 2 * K.PI;\n      dist = 150 + Math.random() * 100\n      newPt = { x: refPt.x + dist * Math.cos(ang), y: refPt.y + dist * Math.sin(ang) };\n    } while (!(!nearestStop(newPt, 150) && withinViewport(newPt)));\n  else newPt = genRandomPt();\n  stops.push(newPt);\n  maxUnlockedType = Math.max(maxUnlockedType, type);\n  updateMinScl(minSclFac * 0.98);\n  newPt.waiting = [];\n  newPt.linesServed = new Set();\n  newPt.type = type;\n  newPt.toAdd = [];\n  newPt.failing = false;\n  newPt.failurePct = 0;\n  newPt.capacity = 6;\n  redraw();\n}\n\nfunction keyUpdate(ev) {\n  // if (!shiftStatus && ev.shiftKey)\n  //   document.body.style.cursor = \"grab\";\n  // else if (shiftStatus && !ev.shiftKey) \n  //   document.body.style.cursor = \"\";\n  // shiftStatus = ev.shiftKey;\n}\n\nfunction onmove(ev) {\n  // if (ev.shiftKey) {\n  //   document.body.style.cursor = \"grabbing\";\n  // }\n  // if (paused) return;\n  hovering = null;\n  let rmSettings = true;\n  hoveringConn = null;\n  currPos_canv = fromCanvPos(ev.clientX, ev.clientY);\n  // let \n  if (holdState == K.HOLD) {// && ev.shiftKey) {\n    translate(ev.movementX, ev.movementY);\n    redraw();\n  }\n  let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n  let nConn = nearestConnection(actualPos.x, actualPos.y);\n  let nStop = nearestStop(actualPos, acceptRadius);\n  if (holdState == K.HOLD_NEWLINE) {\n\n    let lastStop = currPath[currPath.length - 1];\n    // if (!nStop) // \n    //   currPath.pop();\n    if (nStop) {\n      let canAdd = true;\n      for (let i = 0; i < currPath.length && canAdd; i++) {\n        if (samePt(currPath[i], nStop)) canAdd = false;\n      }\n      let newConn = {from:lastStop, to:nStop};\n      if (parallelStops(newConn).ct >= 3) canAdd = false;\n      else if (!canAdd && currPath.length > 2\n        && samePt(nStop, currPath[0]) && !samePt(nStop, lastStop)) {\n        currPath.push(nStop);\n        routeConfirm();\n        // holdState = K.NOHOLD;\n      }\n      if (canAdd) {\n        currPath.push(nStop);\n      }\n    }\n    redraw();\n  }\n  else if (holdState == K.HOLD_CONNECTION) {\n    if (nStop) {\n      let currLine = lines[modifyingConn.lineID];\n      // \n      let newConn = {from:modifyingConn.from, to:nStop, \n         lineID:modifyingConn.lineID, \n         colour:modifyingConn.colour};\n      let newConn2 = {from:nStop, to:modifyingConn.to, \n          lineID:modifyingConn.lineID, \n          colour:modifyingConn.colour};\n      if (parallelStops(newConn).ct < 3 && parallelStops(newConn2).ct < 3\n      &&  !lines[modifyingConn.lineID].stops.has(nStop)) {\n        // now we can modify the connection\n        for (affectedTrain of currLine.trains) {\n          if (getAssociatedConnection(affectedTrain) == modifyingConn) {\n            modifyingConn.pendingRemove = true;\n            break;\n          }\n        }\n        currLine.stops.add(nStop);\n        // modifyingConn.pendingUpdateTo = nStop;\n\n        connections.push(newConn);\n        connections.push(newConn2);\n        if (!modifyingConn.pendingRemove) {\n          modifyingConn.pendingRemove = true;\n           updateToNow(currLine, modifyingConn); \n        }\n        typesOnLine[modifyingConn.lineID].add(nStop.type)\n        nStop.linesServed.add(modifyingConn.lineID);\n        for (let pass of passengers)\n          handlePassenger(pass);\n        let idx = currLine.path.indexOf(modifyingConn.from);\n        currLine.path.splice(idx+1, 0, nStop);\n\n        // if (!modifyingConn.pendingRemoval) \n        holdState = K.NOHOLD;\n        routeConfirm(); \n      }\n\n    }\n  }\n  else if (holdState == K.HOLD_EXTEND && nStop) {\n    let currLine = extendInfo.line\n    if (!currLine.stops.has(nStop) \n     || (nStop == currLine.path[0] && extendInfo.stop == currLine.path[currLine.path.length-1]\n         || nStop == currLine.path[currLine.path.length-1] && extendInfo.stop == currLine.path[0])\n        && currLine.path.length > 2) {\n      let newConn = {from:extendInfo.stop, to:nStop, \n           lineID:currLine.lineID, \n           colour:currLine.colour};\n      connections.push(newConn);\n      typesOnLine[currLine.lineID].add(nStop.type);\n      nStop.linesServed.add(currLine.lineID);\n      currLine.stops.add(nStop);\n      if (currLine.path[currLine.path.length-1] == extendInfo.stop) \n        currLine.path.push(nStop);\n      else currLine.path.splice(0, 0, nStop)\n      if (currLine.path[0] == currLine.path[currLine.path.length-1]) currLine.loopingQ = true;\n      extendInfo = null;\n      for (let pass of passengers)\n        handlePassenger(pass);\n      holdState = K.NOHOLD;\n      routeConfirm();\n\n    } // extend successful    \n  }\n  else if (nStop) {\n    let terms = terminals(nStop);\n    if (terms && holdState == K.NOHOLD && (!activeSettingsDialog || activeSettingsDialog.stop != nStop)) {\n      activeSettingsDialog = {\n        stop:nStop, time:Date.now()+50,\n        hgt:K.SETTINGSHEIGHT*terms.length, lines:terms, selected:null};\n      redraw();\n    }\n    if (terms) rmSettings = false;\n    hovering = nStop;\n    if (activeSettingsDialog) activeSettingsDialog.selected = null;\n    document.body.style.cursor = \"pointer\";\n  }\n  else {\n    let setSelected = false;\n    for (let stop of stops) {\n      if (activeSettingsDialog && \n          currPos_canv.x < stop.x+acceptRadius && currPos_canv.x > stop.x-acceptRadius\n         && currPos_canv.y < stop.y+acceptRadius && currPos_canv.y > stop.y-activeSettingsDialog.hgt-acceptRadius) {\n        rmSettings = false;\n        let dy = (currPos_canv.y-(stop.y-acceptRadius-activeSettingsDialog.hgt))/K.SETTINGSHEIGHT;\n        let activeSel = activeSettingsDialog.lines.length-Math.floor(dy)-1;\n        activeSettingsDialog.selected = (activeSel<0?null:activeSettingsDialog.lines[activeSel].lineID);\n        if (activeSettingsDialog.selected != null) setSelected = true;\n        // hovering = stop;\n        document.body.style.cursor = \"pointer\";\n        // redraw();\n        // break;  \n      }\n    }\n    if (!setSelected && activeSettingsDialog) activeSettingsDialog.selected = null;\n    // else if (activeSettingsDialog && currPos_canv.x < )\n    if (rmSettings && nConn && holdState == K.NOHOLD) {\n      hoveringConn = nConn;\n      document.body.style.cursor = \"pointer\";\n    }\n    else if (rmSettings && holdState == K.NOHOLD) document.body.style.cursor = \"\";\n  }\n  if (rmSettings) {\n    activeSettingsDialog = null;\n  }\n  redraw();\n}\n\nfunction terminals(stop) {\n  let out = [];\n  for (let i=0; i<lines.length; i++)\n    if ((lines[i].path[0] == stop || lines[i].path[lines[i].path.length-1] == stop)\n      && lines[i].path[0] != lines[i].path[lines[i].path.length-1])\n      out.push(lines[i]);\n  return out.length == 0?null:out;\n}\nfunction updateToNow(currLine, conn) {\n  // for (affectedTrain of currLine.trains) {\n  // let fIdx = affectedTrain.path.indexOf(conn.from);\n    // affectedTrain.path.splice(fIdx+1, 0, nStop);\n  // }\n  // conn.to = nStop; \n  let idx = connections.indexOf(conn);\n  connections.splice(idx, 1);\n  recentlyRemoved.push({conn:conn, time:timeNow()});\n  // connections.push(newConn);\n}\n\nfunction routeConfirm(ev) {\n  holdState = K.NOHOLD;\n  extendInfo = null;\n  document.body.style.cursor = holdState == K.HOLD ? \"grab\" : \"\";\n  if (currPath.length > 1) {\n    let currCol = getCSSProp(\"--system-\" + colours[0]);\n    colours.shift();\n    // lines.push({path:currPath, \n    // colour:getCSSProp(\"--system-\"+colours[lines.length])});\n    for (let i = 1; i < currPath.length; i++) {\n      connections.push({\n        from: currPath[i - 1], to: currPath[i],\n        colour: currCol, lineID: lineCt\n      });\n    }\n    // run dijkstra?\n    let currLine = [];\n    let stopsOnLine = new Set();\n    for (const e of currPath) {\n      currLine.push(e);\n      stopsOnLine.add(e);\n      // stopsOnLine.add(e);\n    }\n\n    let currLine2 = {\n        lineID:lineCt, \n        path:currLine, \n        colour:currCol,\n        stops:stopsOnLine, \n        loopingQ:(currPath[0] == currPath[currPath.length-1]),\n        trains:[]};\n    lines.push(currLine2);\n\n    let supportedTypes = new Set();\n    for (let i = 0; i < currPath.length; i++) {\n      supportedTypes.add(currPath[i].type);\n      currPath[i].linesServed.add(lineCt);\n    }\n    typesOnLine.push(supportedTypes);\n    // for ()\n    /// now every passenger route will be affected\n    // for (let currP of passengers) {\n    // if (currP.status != K.WAITING) continue;\n    adj = [];\n    for (let i = 0; i < typesOnLine.length; i++) {\n      let row = [];\n      for (let j = 0; j < typesOnLine.length; j++) {\n        row.push({ route:[], val: K.INF });\n      }\n      adj.push(row);\n    }\n    for (let i = 0; i < stops.length; i++) {\n      let served = Array.from(stops[i].linesServed);\n      for (let j = 0; j < served.length; j++) {\n        for (let k = 0; k < served.length; k++) {\n          adj[served[j]][served[k]].val = 1;\n          adj[served[j]][served[k]].route = [served[k]];\n          adj[served[k]][served[j]].val = 1;\n          adj[served[k]][served[j]].route = [served[j]];\n        }\n      }\n      for (let j=0; j<served.length; j++) {\n        adj[served[j]][served[j]].val = 0;\n        adj[served[j]][served[j]].route = [];\n      }\n    }\n    for (let k = 0; k < adj.length; k++) {\n      for (let j = 0; j < adj.length; j++) {\n        for (let i = 0; i < adj.length; i++) {\n          if (i == k || j == k) continue;\n          let newCost = adj[i][k].val+adj[k][j].val;\n          if (newCost < adj[i][j].val) {\n            adj[i][j].val = newCost;\n            adj[i][j].route = [];\n\n            // let replaceIdx = adj[i][j].indexOf(i);\n            for (let n=0; n<adj[i][k].route.length; n++) \n              adj[i][j].route.push(adj[i][k].route[n])\n            for (let n=0; n<adj[k][j].route.length; n++) \n              adj[i][j].route.push(adj[k][j].route[n])\n          }\n          // adj[i][j].val = Math.min(adj[i][j].val, adj[i][k].val + adj[k][j].val);\n        }\n      }\n\n    }\n    console.log(\"==== RECALCULATION SUCCESS ====\")\n    for (pass of passengers) {\n      handlePassenger(pass);\n    }\n    let t1 = {\n        x: currPath[0].x, y: currPath[0].y,\n        from: currPath[0], to: currPath[1],\n        lineID: lineCt, colour: currCol, startT: timeNow(),\n        status: K.MOVING, passengers: [], cap:6, revDir:false, \n        //toAdd:[], toRemove:[], onCompletion:0\n      };\n    let t2 = {\n        x: currPath[0].x, y: currPath[0].y,\n        from: currPath[currPath.length-1], to: currPath[currPath.length-2],\n        lineID: lineCt, colour: currCol, startT: timeNow(),\n        status: K.MOVING, passengers: [], cap:6, revDir:true,//, toAdd:[], toRemove:[], \n        //onCompletion:0\n      };\n    trains.push(t1);\n    trains.push(t2);\n    currLine2.trains = [t1, t2];\n    lineCt++;\n  }\n  currPath = [];\n  redraw();\n  if (!ev || !downPt || distBtw({ x: ev.clientX, y: ev.clientY }, downPt) > 10) return;\n  // check for is it actually a click ^\n  ctx.beginPath();\n  // let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n  // ctx.moveTo(actualPos.x - 0.5, actualPos.y - 0.5);\n  // ctx.lineTo(actualPos.x + 0.5, actualPos.y + 0.5);\n  // ctx.stroke();\n}\n\nfunction samePt(pt1, pt2) {\n  return Math.abs(pt1.x - pt2.x) < 0.1 && Math.abs(pt1.y - pt2.y) < 0.1;\n}\n\nfunction genRandomPt() {\n  return {\n    x: Math.random() * viewportW - viewportW / 2,\n    y: Math.random() * viewportH - viewportH / 2\n  }\n}\n\nfunction nearestStop(newPt, minDist) {\n  let found = null;\n  for (let i = 0; i < stops.length; i++) {\n    let dist = distBtw(stops[i], newPt);\n    if (dist < minDist) {\n      found = stops[i];\n      minDist = dist;\n    }\n  }\n  return found;\n}\n\nfunction withinViewport(newPt) {\n  // let viewportScl = minSclFac*0.8;\n  // should be <1 and decreasing\n  if (newPt.x < -viewportW / 2) return false;\n  if (newPt.x > viewportW / 2) return false;\n  if (newPt.y < -viewportH / 2) return false;\n  if (newPt.y > viewportH / 2) return false;\n  return true;\n}\nfunction distBtw(pt1, pt2) {\n  function sq(x) { return x * x; }\n  return Math.sqrt(sq(pt1.x - pt2.x) + sq(pt1.y - pt2.y));\n}\n/// the matrix stuff :V\nlet transfm = [1, 0, 0,\n  0, 1, 0];\nfunction translate(x, y) {\n  transfm[2] += x;\n  transfm[5] += y;\n  applyTransfm();\n}\nfunction fromCanvPos(canvX, canvY) {\n  return { x: (canvX - transfm[2]) / transfm[0], y: (canvY - transfm[5]) / transfm[4] };\n}\nfunction scale(scl) {\n  // matrix mult with [\n  // sclX 0\n  // 0  sclY\n  // 0  0\n  for (let i = 0; i < 6; i++) transfm[i] *= scl;\n  applyTransfm();\n}\nfunction applyTransfm() {\n  ctx.setTransform(transfm[0], transfm[3], transfm[1], transfm[4], transfm[2], transfm[5]);\n}\n\nfunction square(scl, x, y, stroke=false) {\n  scl *= 0.9;\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(x-3*scl, y-3*scl);\n  ctx.lineTo(x+3*scl, y-3*scl);\n  ctx.lineTo(x+3*scl, y+3*scl);\n  ctx.lineTo(x-3*scl, y+3*scl);\n  ctx.lineTo(x-3*scl, y-3*scl);\n  ctx.fill();\n  if (stroke) ctx.stroke();\n  ctx.beginPath();\n  ctx.restore();\n}\nfunction triangle(scl, x, y, stroke=false) {\n  scl *= 1.1;\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(x-3*scl, y+2*scl);\n  // ctx.lineTo(x+3*scl, y-3*scl);\n  ctx.lineTo(x, y-4*scl);\n  ctx.lineTo(x+3*scl, y+2*scl);\n  ctx.lineTo(x-3*scl, y+2*scl);\n  ctx.fill();\n  if (stroke) ctx.stroke();\n  ctx.beginPath();\n  ctx.restore();\n}\nfunction circ(scl, x, y, stroke=false) {\n  ctx.beginPath();\n  ctx.arc(x, y, 3*scl, 0, K.PI*2);\n  ctx.fill();\n  if (stroke) ctx.stroke();\n  ctx.beginPath();\n}\nfunction diamond(scl, x, y) {\n  ctx.beginPath();\n  ctx.moveTo()\n}\nfunction star(scl,x,y, stroke=false) {\n  scl *= 1.2;\n  ctx.save();\n  ctx.beginPath();\n  ctx.moveTo(x-3*scl,y+1*scl);\n  ctx.lineTo(x-0.75*scl, y+1*scl);\n  ctx.lineTo(x, y+3*scl);\n  ctx.lineTo(x+0.75*scl, y+1*scl);\n  ctx.lineTo(x+3*scl, y+1*scl);\n  ctx.lineTo(x+1.25*scl, y-0.5*scl);\n  ctx.lineTo(x+2*scl, y-2.5*scl);\n  ctx.lineTo(x, y-1.25*scl)\n  ctx.lineTo(x-2*scl, y-2.5*scl);\n  ctx.lineTo(x-1.25*scl, y-0.5*scl);\n  ctx.lineTo(x-3*scl, y+1*scl);\n  ctx.fill();\n  if (stroke) ctx.stroke();\n  ctx.beginPath();\n  ctx.restore();\n}\n\nfunction getNextType(exclude = -1) {\n  let type = Math.floor(Math.random() * (exclude < 0 ? types.length : maxUnlockedType));\n  if (type >= exclude && exclude >= 0) return type + 1;\n  return type;\n  // if ()\n}"],
  "mappings": "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",
  "names": ["pass", "dist", "nextStop"]
}
