{
  "version": 3,
  "sources": ["../../smallsubway/redraw.js"],
  "sourcesContent": ["function bezier(t , p1, p2, p3){\n  return (1-t)**2*p1 + 2*(1-t)*t*p2 + t**2*p3;\n}\n\nfunction redraw(delta) {\n\n  let fpsCurr = 1000/delta;\n  ctx.lineCap = \"round\";\n  // function connect(currPath, clr) {\n  function circle(pt, clear=true) {\n    ctx.save();\n    if (clear) clearCircle(pt, acceptRadius);\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, stopSz, 0, K.PI * 2);\n    ctx.stroke();\n    // ctx.strokeStyle;\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, acceptRadius, 0, K.PI * 2);\n    ctx.stroke();\n    ctx.restore();\n    ctx.beginPath();\n  }\n  function clearCircle(pt, rad) {\n    ctx.beginPath();\n    ctx.fillStyle = getCSSProp(\"--system-bg\");\n    ctx.save();\n    ctx.arc(pt.x, pt.y, rad + 2, 0, K.PI * 2);\n    ctx.clip();\n    ctx.save();\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canv.width, canv.height);\n    ctx.restore();\n    ctx.fill();\n    ctx.restore();\n    ctx.beginPath();\n  }\n\n  function clearShape(pt, rad) {\n    ctx.save();\n    ctx.fillStyle = getCSSProp(\"--system-bg\");\n\n    types[pt.type](rad/3, pt.x, pt.y);\n    ctx.restore();\n  }\n  ctx.strokeStyle = defaultClr;\n  updateMinScl();\n  ctx.beginPath();\n  ctx.save();\n  ctx.resetTransform();\n  ctx.fillStyle = getCSSProp(\"--system-bg\");\n  ctx.clearRect(0, 0, canv.width, canv.height);\n  ctx.fillRect(0, 0, canv.width, canv.height);\n  ctx.restore();\n  if (DEBUG) {\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.moveTo(-viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, viewportH/2);\n    ctx.lineTo(-viewportW/2, viewportH/2);\n    ctx.lineTo(-viewportW/2, -viewportH/2);\n    ctx.stroke();\n    ctx.save();\n    if (fpsCurr < 40) ctx.fillStyle = getCSSProp('--system-red');\n    else if (fpsCurr < 50) ctx.fillStyle = getCSSProp('--system-yellowtext');\n    else ctx.fillStyle = getCSSProp('--system-green');\n    ctx.fillText(fpsCurr.toFixed(2)+\"fps\", -viewportW/2+30, -viewportH/2+30)\n    ctx.fillRect(-viewportW/2+20, -viewportH/2+25, 5, 5);\n      ctx.restore();\n  }\n  ctx.beginPath();\n\n\n\n  if (hovering && !activeSettingsDialog) {\n    ctx.save();\n    ctx.fillStyle = getCSSProp(\"--system-green2\");\n    // ctx.strokeWidth = acceptRadius - stopSz;\n    ctx.beginPath();\n    // ctx.arc(hovering.x, hovering.y, acceptRadius, 0, K.PI*2);\n    types[hovering.type](acceptRadius/3, hovering.x, hovering.y);\n    ctx.fill();\n    // clearCircle({x:hovering.x,y:hovering.y},stopSz);\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  if (holdState == K.HOLD_CONNECTION) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.strokeStyle = modifyingConn.colour;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(modifyingConn.from.x, modifyingConn.from.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.moveTo(modifyingConn.to.x, modifyingConn.to.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  if (holdState == K.HOLD_EXTEND) {\n    ctx.save();\n    ctx.beginPath();\n    let line = extendInfo.line;\n    let stop = extendInfo.stop;\n    ctx.strokeStyle = line.colour;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(stop.x, stop.y);\n    ctx.lineTo(currPos_canv.x, currPos_canv.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n\n  // existing paths///////////\n  for (let i = 0; i < connections.length; i++) {\n    // if (lines.length > 0) ctx.arc(lines[i][0].x, lines[i][0].y, acceptRadius, 0, K.PI*2);\n    // // for (let i=1; i<currPath.length; i++) {\n    let offset = handleOffset(connections[i]);\n    let angBtw = Math.atan2(connections[i].to.y - connections[i].from.y,\n      connections[i].to.x - connections[i].from.x);\n    // angBtw += K.PI;\n    ctx.save();\n    // ctx.lineWidth = hoveringConn == connections[i]?K.LINEACCEPTDIST:K.LINEWIDTH;\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.lineCap = \"round\";\n\n    if (hoveringConn && hoveringConn != connections[i] \n     || holdState == K.HOLD_CONNECTION\n     || connections[i].pendingRemove)\n      ctx.strokeStyle = getCSSProp(\"--system-grey3\")//connections[i].colour+\"55\";\n    else  \n      ctx.strokeStyle = connections[i].colour;\n    // else \n    // ctx.strokeStyle = hoveringConn == connections[i]?connections[i].colour+\"55\":connections[i].colour;\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    // let newAng = angBtw;\n    ctx.moveTo(connections[i].from.x + offset.x,\n      connections[i].from.y         + offset.y);\n    ctx.lineTo(connections[i].to.x   + offset.x,\n      connections[i].to.y          + offset.y)\n    ctx.stroke();\n    ctx.beginPath();\n    for (let stop of stops) {\n      let dist =pDist(stop.x, stop.y, connections[i].from.x, connections[i].from.y, connections[i].to.x, connections[i].to.y);\n      if (!samePt(stop, connections[i].from) && !samePt(stop, connections[i].to) && \n          dist < acceptRadius) {\n        let basex = stop.x + dist*Math.cos(angBtw+K.PI/2);\n        let basey = stop.y + dist*Math.sin(angBtw+K.PI/2);\n        ctx.save();\n        ctx.beginPath();\n        ctx.moveTo(basex-c*acceptRadius, basey-s*acceptRadius);\n        ctx.lineTo(basex+c*acceptRadius, basey+s*acceptRadius);\n        ctx.lineWidth = K.LINEWIDTH/2;\n        console.log(\"found!\");\n        // ctx.globalCompositeOperation = \"destination-out\";\n        ctx.strokeStyle = getCSSProp(\"--system-bg\");\n        ctx.stroke();\n        ctx.restore();\n        ctx.beginPath();\n      }\n    }\n    ctx.restore();\n  }\n\n\n  let lastPt = currPath?currPath[currPath.length - 1]:null;\n  let nextStop = nearestStop(currPos_canv, acceptRadius);\n  if (holdState == K.HOLD_NEWLINE && (!nextStop || !samePt(nextStop, lastPt))){\n      ctx.moveTo(lastPt.x, lastPt.y);\n      ctx.save();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      ctx.lineWidth = K.LINEWIDTH;\n      ctx.lineTo(currPos_canv.x, currPos_canv.y);\n      ctx.stroke();\n      ctx.restore();\n  }\n\n  //////// current path /////////\n  // connect(currPath, getCSSProp(\"--system-green\"));\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = defaultClr;\n  ctx.stroke();\n  for (let i = 1; i < currPath.length; i++) {\n    let angBtw = Math.atan2(currPath[i].y - currPath[i - 1].y,\n      currPath[i].x - currPath[i - 1].x);\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(currPath[i - 1].x, currPath[i - 1].y);\n    ctx.lineTo(currPath[i].x, currPath[i].y)\n    ctx.stroke();\n    ctx.strokeStyle = defaultClr;\n  }\n  ctx.lineWidth = 4;\n  ctx.beginPath();\n\n\n  ////////// little stop circles //////////\n  for (let i = 0; i < stops.length; i++) {\n    // clearCircle(stops[i], stopSz);\n    renderStop(stops[i]);\n    // if ()\n  }\n\n  for (let i=0; i<recentlyRemoved.length; i++) {\n    ctx.beginPath();\n    ctx.save();\n    ctx.strokeStyle = getCSSProp(\"--system-red\");\n    if (timeNow() - recentlyRemoved[i].time > 500) {\n      recentlyRemoved.splice(i, 1);\n      i--;\n      continue;\n    }\n    ctx.globalAlpha = (1-(timeNow() - recentlyRemoved[i].time)/500)*0.5;\n    // let off = handleOffset(recentlyRemoved[i].conn);\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.moveTo(recentlyRemoved[i].conn.from.x, recentlyRemoved[i].conn.from.y);\n    ctx.lineTo(recentlyRemoved[i].conn.to.x, recentlyRemoved[i].conn.to.y);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n  }\n\n  ctx.save();\n  ctx.lineWidth = 4;\n\n\n  //////////////// existing path line circles ////////////////////\n  for (let i = 0; i < connections.length; i++) {\n    // ctx.strokeStyle = getCSSProp(\"--\")\n    // clearCircle(connections[i].from, stopSz);\n    // clearCircle(connections[i].to, stopSz);\n    ctx.beginPath();\n    // ctx.lineWidth = K.LINEWIDTH;    \n    ctx.fillStyle = getCSSProp(\"--system-bg\");  \n    ctx.strokeStyle = defaultClr;\n    // ctx.fillStyle = getCSSProp(\"--system-bg\" );\n    ctx.lineWidth = K.LINEWIDTH;\n    ctx.lineJoin = \"round\";\n    types[connections[i].from.type](stopSz/3, connections[i].from.x, connections[i].from.y, true)\n    // ctx.arc(connections[i].from.x, connections[i].from.y, stopSz, 0, K.PI * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    types[connections[i].to.type](stopSz/3, connections[i].to.x, connections[i].to.y, true)\n    ctx.stroke();\n    // circle(connections[i].from)//, connections[i].colour);\n    // circle(connections[i].to) //, connections[i].colour);\n  }\n\n\n\n  ctx.restore();\n  ctx.beginPath();\n  ////////////////////////////////\n  ctx.restore();\n  ctx.beginPath();\n  if (holdState == K.HOLD_NEWLINE) {\n    // must have a starting poibt\n\n    let angBtw = Math.atan2(currPos_canv.y - lastPt.y,\n      currPos_canv.x - lastPt.x);\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    // let nextStop = nearestStop(currPos_canv, acceptRadius);\n    if (nextStop && samePt(nextStop, lastPt)) { // accepted new stop\n      clearShape(lastPt, acceptRadius);\n      ctx.save();\n      ctx.beginPath();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      // ctx.arc(lastPt.x, lastPt.y, stopSz, 0, K.PI * 2);\n      ctx.fillStyle = \"rgba(0,0,0,0)\";\n      ctx.lineJoin = \"round\";\n      // ctx.stroke();\n      // circle(lastPt);\n      ctx.lineWidth = 4;\n      types[lastPt.type](stopSz/3, lastPt.x, lastPt.y, true)\n      ctx.lineWidth = K.LINEWIDTH;\n      types[lastPt.type](acceptRadius/3, lastPt.x, lastPt.y, true)\n      ctx.restore();\n\n    }\n    ctx.beginPath();\n    // else if (!nextStop) {\n\n    // THERE'S A PROBLEM.\n    // else if (nextStop) {\n\n    //   angBtw = Math.atan2(nextStop.y - lastPt.y,\n    //     nextStop.x - lastPt.x);\n    //   c = Math.cos(angBtw);\n    //   s = Math.sin(angBtw);\n    //   ctx.moveTo(lastPt.x + c * acceptRadius, lastPt.y + s * acceptRadius);\n\n    //   ctx.save();\n    //   ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    //   ctx.lineWidth = K.LINEWIDTH;\n    //   ctx.lineTo(nextStop.x - c * acceptRadius, nextStop.y - s * acceptRadius);\n    //   ctx.stroke();\n    //   ctx.beginPath();\n    //   ctx.lineWidth = 4;\n    //   ctx.strokeStyle = getCSSProp(\"--system-red\");\n    //   ctx.arc(nextStop.x, nextStop.y, stopSz, 0, K.PI * 2);\n    //   ctx.stroke();\n    //   circle(nextStop);\n    //   ctx.restore();\n    // }\n    // just not connected yet.\n\n\n    //////////////// then put the current path large circles /////////\n    for (let i = 0; i < currPath.length; i++) {\n      ctx.save();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      // circle(currPath[i]);\n      ctx.lineJoin = \"round\";\n      ctx.fillStyle = \"rgba(0,0,0,0)\";\n      // ctx.strokeS\n      // types[currPath[i].type](stopSz/3, currPath[i].x, currPath[i].y, true);\n      ctx.lineWidth = K.LINEWIDTH;\n      types[currPath[i].type](acceptRadius/3, currPath[i].x, currPath[i].y, true);\n      ctx.restore();\n    }\n    // if (!samePt(nextStop, lastPt)) \n    //   ctx.strokeStyle = getCSSProp(\"--system-red\");\n    // else \n    // ctx.strokeStyle = getCSSProp(\"--system-green\");\n\n    // }\n  }\n\n  for (let i=0; i<stops.length; i++) {\n    ctx.save();\n    ctx.beginPath();\n    if (stops[i].failurePct > 0) {\n      ctx.fillStyle = getCSSProp(\"--system-red2\");\n      // let pctRemaining = (timeNow() - stops[i].failureTimer)/K.FAILTIME;\n      let pctRemaining = stops[i].failurePct;\n      let pctOneSec = (timeNow() - stops[i].failurePct*K.FAILTIME)/300;\n      let radScl = 0;\n      if (pctOneSec < 1) \n        radScl = (-4*(pctOneSec-0.5)**2)+0.5;\n      if (pctRemaining > 1 && pctRemaining < 2) {\n        radScl = pctRemaining**120;\n      }\n      let currRad = stopSz+(acceptRadius-stopSz)*2+10*radScl;\n\n      // let radiusFcn = \n      // cubic-bezier( 0.175, 0.885, 0.32, 1.275 )\n\n      ctx.beginPath();\n      ctx.moveTo(stops[i].x, stops[i].y);\n      // ctx.strokeStyle = getCSSProp(\"--system-transp\");\n      ctx.arc(stops[i].x, stops[i].y, currRad, 0, Math.PI*pctRemaining*2);\n      // ctx.stroke();\n      ctx.fill();\n      ctx.fill();\n      ctx.lineCap = \"round\";\n      ctx.beginPath();\n      ctx.moveTo(stops[i].x+currRad, stops[i].y);\n      ctx.arc(stops[i].x, stops[i].y, currRad, 0, Math.PI*pctRemaining*2);\n      ctx.strokeStyle = getCSSProp(\"--system-red\");\n      // ctx.lineTo(stops[i].x, stops[i].y);\n      ctx.stroke();\n      ctx.beginPath();\n    }\n    ctx.restore();\n  }\n\n  for (let stop of stops) {\n    drawWaiting(stop);\n  }\n\n  // for (let i = 0; i < stops.length; i++)\n  // now we draw the trains!\n  for (let i = 0; i < trains.length; i++) {\n    ctx.beginPath();\n    let angBtw = Math.atan2(trains[i].to.y - trains[i].from.y,\n      trains[i].to.x - trains[i].from.x);\n    let nStop = nearestStop(trains[i], stopSz);\n    // if (!nStop) nStop = nearestStop(trains[i].from, stopSz);\n// angBtw = 0;\n    let associatedConnection = getAssociatedConnection(trains[i]);\n    let offset = handleOffset(associatedConnection);\n    let center = { x: trains[i].x+offset.x, y: trains[i].y+offset.y };\n\n    const w = 15;\n    const h = 30;\n    const c = Math.cos(angBtw);\n    const c2 = Math.cos(angBtw + K.PI / 2)\n    const s = Math.sin(angBtw);\n    const s2 = Math.sin(angBtw + K.PI / 2);\n    // const halfDiag = Math.sqrt(w*w/4+h*h/4)/2;\n    ctx.save();\n    // ctx.translate(-center.x, -center.y)\n    // ctx.rotate(angBtw);\n    // ctx.translate(center.x, center.y);\n    ctx.globalAlpha = 0.6;\n    ctx.fillStyle = associatedConnection.colour;\n    ctx.moveTo(center.x + c * h / 2 + c2 * w / 2, center.y + s * h / 2 + s2 * w / 2);\n    ctx.lineTo(center.x + c * h / 2 - c2 * w / 2, center.y + s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 - c2 * w / 2, center.y - s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 + c2 * w / 2, center.y - s * h / 2 + s2 * w / 2);\n    ctx.fill();\n    ctx.fillStyle = defaultClr;\n    let str = \"\";\n    for (let pass of trains[i].passengers)\n      str+= pass.to.toString();\n    ctx.save();\n    /// here coems the transformation!\n    ctx.globalAlpha = 1;\n    ctx.translate(center.x, center.y);\n    ctx.beginPath();\n    ctx.rotate(angBtw+(trains[i].revDir?Math.PI:0));\n    let y = 0;\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    let uSz = w/2;\n    let cap = trains[i].cap;\n    for (let j=0; j<trains[i].passengers.length; j++) {\n      if (j>=cap/2) y = 1;\n      let px = j%(cap/2)*uSz+uSz/2-h/2;\n      let py = y*uSz+uSz/2-w/2;\n      types[trains[i].passengers[j].to](1, px, py);\n\n    }\n    // ctx.moveTo(-w/2, -h/2);\n    // ctx.lineTo(w/2, h/2);\n    // ctx.stroke();\n    ctx.beginPath();\n    ctx.restore();\n    // ctx.fillRect(center.x - 8, center.y-2.5, 16, 5);\n    ctx.restore();\n  }\n\n  if (activeSettingsDialog) {\n    let stop = activeSettingsDialog.stop;\n    let h = -activeSettingsDialog.hgt*\n      Math.min(1, (Date.now()-activeSettingsDialog.time)/K.ANIM_SETTINGSDIALOG);\n    ctx.save();\n    ctx.beginPath();\n    ctx.fillStyle = getCSSProp(\"--system-overlay\");\n    ctx.moveTo(stop.x+acceptRadius, stop.y);\n    // ctx.arc(stop.x, stop.y+h, acceptRadius, 0, K.PI*2);\n    ctx.lineTo(stop.x+acceptRadius, stop.y+h);\n    ctx.arc(stop.x, stop.y+h, acceptRadius, 0, K.PI, true);\n    // ctx.lineTo(stop.x-acceptRadius, stop.y+h);\n    ctx.lineTo(stop.x-acceptRadius, stop.y);\n    ctx.arc(stop.x, stop.y, acceptRadius, 0, K.PI);\n    // ctx.stroke();\n    ctx.fill();\n    renderStop(stop);\n    ctx.beginPath();\n    for (let i=0; i<Math.floor(-h/K.SETTINGSHEIGHT); i++) {\n      ctx.beginPath();\n      ctx.save();\n      ctx.fillStyle = activeSettingsDialog.lines[i].colour+\"95\";\n      if (activeSettingsDialog.selected == activeSettingsDialog.lines[i].lineID) {\n        ctx.fillStyle = activeSettingsDialog.lines[i].colour;\n      }\n      ctx.arc(stop.x, stop.y-(i+1)*K.SETTINGSHEIGHT, stopSz, 0, K.PI*2);\n      ctx.fill();\n      // ctx.beginPath();\n      if (activeSettingsDialog.selected == activeSettingsDialog.lines[i].lineID) {\n        ctx.lineWidth = 4;\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = defaultClr;\n        ctx.font = \"30px Noto Sans Display\";\n        let baseX = stop.x;\n        let baseY = stop.y-(i+1)*K.SETTINGSHEIGHT;\n        ctx.moveTo(baseX-stopSz*0.5, baseY);\n        ctx.lineTo(baseX+stopSz*0.5, baseY);\n        ctx.moveTo(baseX, baseY-stopSz*0.5);\n        ctx.lineTo(baseX, baseY+stopSz*0.5);\n        ctx.strokeStyle = defaultClr;\n        ctx.stroke();\n      }\n      ctx.beginPath();\n      ctx.restore();\n    }\n    // ctx.beginPath();\n    // ctx.fillStyle = getCSSProp(\"--system-red\");\n    // ctx.fill();\n    ctx.restore();\n    ctx.beginPath();\n\n  }\n\n  if (paused) {\n\n    ctx.save();\n    ctx.resetTransform();\n    // ctx.fillRect(0,0, canv.width, canv.height);\n    ctx.globalAlpha = 1;\n    ctx.fillStyle = getCSSProp(\"--system-blue\");\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"top\";\n    ctx.font = \"30px Noto Sans Display\";\n\n    ctx.fillText(\"Paused\", 50, 50);\n    ctx.restore();\n  }\n\n} // redraw()\n\nfunction renderStop(stop) {\n  // ctx.arc(stop.x, stop.y, stopSz, 0, K.PI * 2);\n  // ctx.stroke();\n  ctx.beginPath();\n  ctx.fillStyle = defaultClr;\n\n  let deltaT = (timeNow() -stop.addedTime)/1500;\n  let radScl = deltaT>=1?stopSz/3:stopSz/3*(70*(deltaT-0.443)**7+0.2)\n  types[stop.type](Math.max(0,radScl), stop.x, stop.y);\n  ctx.beginPath();\n}\n\nfunction drawWaiting(stop) {\n  let y = 0, x=0;\n  let dy = 15;\n  ctx.fillStyle = defaultClr;\n  let dx = 15;\n  const maxW = 5; // # waiting per line before linebreak\n  let baseOffset = Math.ceil(stop.waiting.length/maxW)*dy\n  for (let j = 0; j < stop.waiting.length; j++) {\n    if (x >= maxW) {\n      y++;\n      x=0;\n    }\n    let adjX = stop.x+stopSz+(x%maxW)*dx-dx/2;\n    let adjY = (stop.y-baseOffset)-stopSz+y*dy-dy/2;\n    x++;\n    types[stop.waiting[j].to](2, adjX, adjY);\n    // triangle(1.1, adjX, adjY)\n    // out += stop.waiting[j].to.toString();\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
