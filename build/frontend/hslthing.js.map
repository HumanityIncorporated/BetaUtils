{
  "version": 3,
  "sources": ["../../frontend/hslthing.ts"],
  "sourcesContent": ["// Converted from JavaScript to TypeScript by Brian Holbrook\n\n// SOURCE: https://github.com/bottosson/bottosson.github.io/blob/master/misc/colorpicker/colorconversion.js\n// LICENSE: https://github.com/bottosson/bottosson.github.io/blob/master/misc/colorpicker/License.txt\n// Copyright (c) 2021 Bj\u00F6rn Ottosson\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n// of the Software, and to permit persons to whom the Software is furnished to do\n// so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nexport function rgb_to_hsl(r: number, g: number, b: number) {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b);\n  let min = Math.min(r, g, b);\n  let h = 0,\n    s = 0;\n  let l = (max + min) / 2;\n\n  if (max == min) {\n    h = s = 0;\n  } else {\n    let d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, l];\n}\n\nexport function hsl_to_rgb(h: number, s: number, l: number) {\n  let r, g, b;\n\n  if (s == 0) {\n    r = g = b = l;\n  } else {\n    function hue_to_rgb(p: number, q: number, t: number) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    }\n\n    let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    let p = 2 * l - q;\n    r = hue_to_rgb(p, q, h + 1 / 3);\n    g = hue_to_rgb(p, q, h);\n    b = hue_to_rgb(p, q, h - 1 / 3);\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nexport function rgb_to_hsv(r: number, g: number, b: number) {\n  (r = r / 255), (g = g / 255), (b = b / 255);\n\n  let max = Math.max(r, g, b);\n  let min = Math.min(r, g, b);\n  let h = 0,\n    s = 0;\n  let v = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\nexport function hsv_to_rgb(h: number, s: number, v: number) {\n  let r = 0,\n    g = 0,\n    b = 0;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [r * 255, g * 255, b * 255];\n}\n\nexport function srgb_transfer_function(a: number) {\n  return 0.0031308 >= a\n    ? 12.92 * a\n    : 1.055 * Math.pow(a, 0.4166666666666667) - 0.055;\n}\n\nexport function srgb_transfer_function_inv(a: number) {\n  return 0.04045 < a ? Math.pow((a + 0.055) / 1.055, 2.4) : a / 12.92;\n}\n\nexport function linear_srgb_to_oklab(r: number, g: number, b: number) {\n  let l = 0.4122214708 * r + 0.5363325363 * g + 0.0514459929 * b;\n  let m = 0.2119034982 * r + 0.6806995451 * g + 0.1073969566 * b;\n  let s = 0.0883024619 * r + 0.2817188376 * g + 0.6299787005 * b;\n\n  let l_ = Math.cbrt(l);\n  let m_ = Math.cbrt(m);\n  let s_ = Math.cbrt(s);\n\n  return [\n    0.2104542553 * l_ + 0.793617785 * m_ - 0.0040720468 * s_,\n    1.9779984951 * l_ - 2.428592205 * m_ + 0.4505937099 * s_,\n    0.0259040371 * l_ + 0.7827717662 * m_ - 0.808675766 * s_\n  ];\n}\n\nexport function oklab_to_linear_srgb(L: number, a: number, b: number) {\n  let l_ = L + 0.3963377774 * a + 0.2158037573 * b;\n  let m_ = L - 0.1055613458 * a - 0.0638541728 * b;\n  let s_ = L - 0.0894841775 * a - 1.291485548 * b;\n\n  let l = l_ * l_ * l_;\n  let m = m_ * m_ * m_;\n  let s = s_ * s_ * s_;\n\n  return [\n    +4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s,\n    -1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s,\n    -0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s\n  ];\n}\n\nfunction toe(x: number) {\n  const k_1 = 0.206;\n  const k_2 = 0.03;\n  const k_3 = (1 + k_1) / (1 + k_2);\n\n  return (\n    0.5 *\n    (k_3 * x -\n      k_1 +\n      Math.sqrt((k_3 * x - k_1) * (k_3 * x - k_1) + 4 * k_2 * k_3 * x))\n  );\n}\n\nfunction toe_inv(x: number) {\n  const k_1 = 0.206;\n  const k_2 = 0.03;\n  const k_3 = (1 + k_1) / (1 + k_2);\n  return (x * x + k_1 * x) / (k_3 * (x + k_2));\n}\n\n// Finds the maximum saturation possible for a given hue that fits in sRGB\n// Saturation here is defined as S = C/L\n// a and b must be normalized so a^2 + b^2 == 1\nfunction compute_max_saturation(a: number, b: number) {\n  // Max saturation will be when one of r, g or b goes below zero.\n\n  // Select different coefficients depending on which component goes below zero first\n  let k0, k1, k2, k3, k4, wl, wm, ws;\n\n  if (-1.88170328 * a - 0.80936493 * b > 1) {\n    // Red component\n    k0 = +1.19086277;\n    k1 = +1.76576728;\n    k2 = +0.59662641;\n    k3 = +0.75515197;\n    k4 = +0.56771245;\n    wl = +4.0767416621;\n    wm = -3.3077115913;\n    ws = +0.2309699292;\n  } else if (1.81444104 * a - 1.19445276 * b > 1) {\n    // Green component\n    k0 = +0.73956515;\n    k1 = -0.45954404;\n    k2 = +0.08285427;\n    k3 = +0.1254107;\n    k4 = +0.14503204;\n    wl = -1.2684380046;\n    wm = +2.6097574011;\n    ws = -0.3413193965;\n  } else {\n    // Blue component\n    k0 = +1.35733652;\n    k1 = -0.00915799;\n    k2 = -1.1513021;\n    k3 = -0.50559606;\n    k4 = +0.00692167;\n    wl = -0.0041960863;\n    wm = -0.7034186147;\n    ws = +1.707614701;\n  }\n\n  // Approximate max saturation using a polynomial:\n  let S = k0 + k1 * a + k2 * b + k3 * a * a + k4 * a * b;\n\n  // Do one step Halley's method to get closer\n  // this gives an error less than 10e6, except for some blue hues where the dS/dh is close to infinite\n  // this should be sufficient for most applications, otherwise do two/three steps\n\n  let k_l = +0.3963377774 * a + 0.2158037573 * b;\n  let k_m = -0.1055613458 * a - 0.0638541728 * b;\n  let k_s = -0.0894841775 * a - 1.291485548 * b;\n\n  {\n    let l_ = 1 + S * k_l;\n    let m_ = 1 + S * k_m;\n    let s_ = 1 + S * k_s;\n\n    let l = l_ * l_ * l_;\n    let m = m_ * m_ * m_;\n    let s = s_ * s_ * s_;\n\n    let l_dS = 3 * k_l * l_ * l_;\n    let m_dS = 3 * k_m * m_ * m_;\n    let s_dS = 3 * k_s * s_ * s_;\n\n    let l_dS2 = 6 * k_l * k_l * l_;\n    let m_dS2 = 6 * k_m * k_m * m_;\n    let s_dS2 = 6 * k_s * k_s * s_;\n\n    let f = wl * l + wm * m + ws * s;\n    let f1 = wl * l_dS + wm * m_dS + ws * s_dS;\n    let f2 = wl * l_dS2 + wm * m_dS2 + ws * s_dS2;\n\n    S = S - (f * f1) / (f1 * f1 - 0.5 * f * f2);\n  }\n\n  return S;\n}\n\nfunction find_cusp(a: number, b: number) {\n  // First, find the maximum saturation (saturation S = C/L)\n  let S_cusp = compute_max_saturation(a, b);\n\n  // Convert to linear sRGB to find the first point where at least one of r,g or b >= 1:\n  let rgb_at_max = oklab_to_linear_srgb(1, S_cusp * a, S_cusp * b);\n  let L_cusp = Math.cbrt(\n    1 / Math.max(Math.max(rgb_at_max[0], rgb_at_max[1]), rgb_at_max[2])\n  );\n  let C_cusp = L_cusp * S_cusp;\n\n  return [L_cusp, C_cusp];\n}\n\n// Finds intersection of the line defined by\n// L = L0 * (1 - t) + t * L1;\n// C = t * C1;\n// a and b must be normalized so a^2 + b^2 == 1\nfunction find_gamut_intersection(\n  a: number,\n  b: number,\n  L1: number,\n  C1: number,\n  L0: number,\n  cusp: number[] | null = null\n) {\n  if (!cusp) {\n    // Find the cusp of the gamut triangle\n    cusp = find_cusp(a, b);\n  }\n\n  // Find the intersection for upper and lower half seprately\n  let t;\n  if ((L1 - L0) * cusp[1] - (cusp[0] - L0) * C1 <= 0) {\n    // Lower half\n\n    t = (cusp[1] * L0) / (C1 * cusp[0] + cusp[1] * (L0 - L1));\n  } else {\n    // Upper half\n\n    // First intersect with triangle\n    t = (cusp[1] * (L0 - 1)) / (C1 * (cusp[0] - 1) + cusp[1] * (L0 - L1));\n\n    // Then one step Halley's method\n    {\n      let dL = L1 - L0;\n      let dC = C1;\n\n      let k_l = +0.3963377774 * a + 0.2158037573 * b;\n      let k_m = -0.1055613458 * a - 0.0638541728 * b;\n      let k_s = -0.0894841775 * a - 1.291485548 * b;\n\n      let l_dt = dL + dC * k_l;\n      let m_dt = dL + dC * k_m;\n      let s_dt = dL + dC * k_s;\n\n      // If higher accuracy is required, 2 or 3 iterations of the following block can be used:\n      {\n        let L = L0 * (1 - t) + t * L1;\n        let C = t * C1;\n\n        let l_ = L + C * k_l;\n        let m_ = L + C * k_m;\n        let s_ = L + C * k_s;\n\n        let l = l_ * l_ * l_;\n        let m = m_ * m_ * m_;\n        let s = s_ * s_ * s_;\n\n        let ldt = 3 * l_dt * l_ * l_;\n        let mdt = 3 * m_dt * m_ * m_;\n        let sdt = 3 * s_dt * s_ * s_;\n\n        let ldt2 = 6 * l_dt * l_dt * l_;\n        let mdt2 = 6 * m_dt * m_dt * m_;\n        let sdt2 = 6 * s_dt * s_dt * s_;\n\n        let r = 4.0767416621 * l - 3.3077115913 * m + 0.2309699292 * s - 1;\n        let r1 = 4.0767416621 * ldt - 3.3077115913 * mdt + 0.2309699292 * sdt;\n        let r2 =\n          4.0767416621 * ldt2 - 3.3077115913 * mdt2 + 0.2309699292 * sdt2;\n\n        let u_r = r1 / (r1 * r1 - 0.5 * r * r2);\n        let t_r = -r * u_r;\n\n        let g = -1.2684380046 * l + 2.6097574011 * m - 0.3413193965 * s - 1;\n        let g1 = -1.2684380046 * ldt + 2.6097574011 * mdt - 0.3413193965 * sdt;\n        let g2 =\n          -1.2684380046 * ldt2 + 2.6097574011 * mdt2 - 0.3413193965 * sdt2;\n\n        let u_g = g1 / (g1 * g1 - 0.5 * g * g2);\n        let t_g = -g * u_g;\n\n        let b = -0.0041960863 * l - 0.7034186147 * m + 1.707614701 * s - 1;\n        let b1 = -0.0041960863 * ldt - 0.7034186147 * mdt + 1.707614701 * sdt;\n        let b2 =\n          -0.0041960863 * ldt2 - 0.7034186147 * mdt2 + 1.707614701 * sdt2;\n\n        let u_b = b1 / (b1 * b1 - 0.5 * b * b2);\n        let t_b = -b * u_b;\n\n        t_r = u_r >= 0 ? t_r : 10e5;\n        t_g = u_g >= 0 ? t_g : 10e5;\n        t_b = u_b >= 0 ? t_b : 10e5;\n\n        t += Math.min(t_r, Math.min(t_g, t_b));\n      }\n    }\n  }\n\n  return t;\n}\n\nfunction get_ST_max(a_: number, b_: number, cusp: number[] | null = null) {\n  if (!cusp) {\n    cusp = find_cusp(a_, b_);\n  }\n\n  let L = cusp[0];\n  let C = cusp[1];\n  return [C / L, C / (1 - L)];\n}\n\n/*function get_ST_mid(a_: number, b_: number) {\n  const S =\n    0.11516993 +\n    1 /\n      (+7.4477897 +\n        4.1590124 * b_ +\n        a_ *\n          (-2.19557347 +\n            1.75198401 * b_ +\n            a_ *\n              (-2.13704948 -\n                10.02301043 * b_ +\n                a_ * (-4.24894561 + 5.38770819 * b_ + 4.69891013 * a_))));\n\n  const T =\n    0.11239642 +\n    1 /\n      (+1.6132032 -\n        0.68124379 * b_ +\n        a_ *\n          (+0.40370612 +\n            0.90148123 * b_ +\n            a_ *\n              (-0.27087943 +\n                0.6122399 * b_ +\n                a_ * (+0.00299215 - 0.45399568 * b_ - 0.14661872 * a_))));\n\n  return [S, T];\n}*/\n\nfunction get_Cs(L: number, a_: number, b_: number) {\n  const cusp = find_cusp(a_, b_);\n\n  let C_max = find_gamut_intersection(a_, b_, L, 1, L, cusp);\n  let ST_max = get_ST_max(a_, b_, cusp);\n\n  let S_mid =\n    0.11516993 +\n    1 /\n      (+7.4477897 +\n        4.1590124 * b_ +\n        a_ *\n          (-2.19557347 +\n            1.75198401 * b_ +\n            a_ *\n              (-2.13704948 -\n                10.02301043 * b_ +\n                a_ * (-4.24894561 + 5.38770819 * b_ + 4.69891013 * a_))));\n\n  let T_mid =\n    0.11239642 +\n    1 /\n      (+1.6132032 -\n        0.68124379 * b_ +\n        a_ *\n          (+0.40370612 +\n            0.90148123 * b_ +\n            a_ *\n              (-0.27087943 +\n                0.6122399 * b_ +\n                a_ * (+0.00299215 - 0.45399568 * b_ - 0.14661872 * a_))));\n\n  let k = C_max / Math.min(L * ST_max[0], (1 - L) * ST_max[1]);\n\n  let C_mid;\n  {\n    let C_a = L * S_mid;\n    let C_b = (1 - L) * T_mid;\n\n    C_mid =\n      0.9 *\n      k *\n      Math.sqrt(\n        Math.sqrt(\n          1 / (1 / (C_a * C_a * C_a * C_a) + 1 / (C_b * C_b * C_b * C_b))\n        )\n      );\n  }\n\n  let C_0;\n  {\n    let C_a = L * 0.4;\n    let C_b = (1 - L) * 0.8;\n\n    C_0 = Math.sqrt(1 / (1 / (C_a * C_a) + 1 / (C_b * C_b)));\n  }\n\n  return [C_0, C_mid, C_max];\n}\n\nexport function okhsl_to_srgb(h: number, s: number, l: number) {\n  if (l == 1) {\n    return [255, 255, 255];\n  } else if (l == 0) {\n    return [0, 0, 0];\n  }\n\n  let a_ = Math.cos(2 * Math.PI * h);\n  let b_ = Math.sin(2 * Math.PI * h);\n  let L = toe_inv(l);\n\n  let Cs = get_Cs(L, a_, b_);\n  let C_0 = Cs[0];\n  let C_mid = Cs[1];\n  let C_max = Cs[2];\n\n  let C, t, k_0, k_1, k_2;\n  if (s < 0.8) {\n    t = 1.25 * s;\n    k_0 = 0;\n    k_1 = 0.8 * C_0;\n    k_2 = 1 - k_1 / C_mid;\n  } else {\n    t = 5 * (s - 0.8);\n    k_0 = C_mid;\n    k_1 = (0.2 * C_mid * C_mid * 1.25 * 1.25) / C_0;\n    k_2 = 1 - k_1 / (C_max - C_mid);\n  }\n\n  C = k_0 + (t * k_1) / (1 - k_2 * t);\n\n  // If we would only use one of the Cs:\n  //C = s*C_0;\n  //C = s*1.25*C_mid;\n  //C = s*C_max;\n\n  let rgb = oklab_to_linear_srgb(L, C * a_, C * b_);\n  return [\n    255 * srgb_transfer_function(rgb[0]),\n    255 * srgb_transfer_function(rgb[1]),\n    255 * srgb_transfer_function(rgb[2])\n  ];\n}\n\nexport function srgb_to_okhsl(r: number, g: number, b: number) {\n  let lab = linear_srgb_to_oklab(\n    srgb_transfer_function_inv(r / 255),\n    srgb_transfer_function_inv(g / 255),\n    srgb_transfer_function_inv(b / 255)\n  );\n\n  let C = Math.sqrt(lab[1] * lab[1] + lab[2] * lab[2]);\n  let a_ = lab[1] / C;\n  let b_ = lab[2] / C;\n\n  let L = lab[0];\n  let h = 0.5 + (0.5 * Math.atan2(-lab[2], -lab[1])) / Math.PI;\n\n  let Cs = get_Cs(L, a_, b_);\n  let C_0 = Cs[0];\n  let C_mid = Cs[1];\n  let C_max = Cs[2];\n\n  let s;\n  if (C < C_mid) {\n    let k_0 = 0;\n    let k_1 = 0.8 * C_0;\n    let k_2 = 1 - k_1 / C_mid;\n\n    let t = (C - k_0) / (k_1 + k_2 * (C - k_0));\n    s = t * 0.8;\n  } else {\n    let k_0 = C_mid;\n    let k_1 = (0.2 * C_mid * C_mid * 1.25 * 1.25) / C_0;\n    let k_2 = 1 - k_1 / (C_max - C_mid);\n\n    let t = (C - k_0) / (k_1 + k_2 * (C - k_0));\n    s = 0.8 + 0.2 * t;\n  }\n\n  let l = toe(L);\n  return [h, s, l];\n}\n\nexport function okhsv_to_srgb(h: number, s: number, v: number) {\n  let a_ = Math.cos(2 * Math.PI * h);\n  let b_ = Math.sin(2 * Math.PI * h);\n\n  let ST_max = get_ST_max(a_, b_);\n  let S_max = ST_max[0];\n  let S_0 = 0.5;\n  let T = ST_max[1];\n  let k = 1 - S_0 / S_max;\n\n  let L_v = 1 - (s * S_0) / (S_0 + T - T * k * s);\n  let C_v = (s * T * S_0) / (S_0 + T - T * k * s);\n\n  let L = v * L_v;\n  let C = v * C_v;\n\n  // to present steps along the way\n  //L = v;\n  //C = v*s*S_max;\n  //L = v*(1 - s*S_max/(S_max+T));\n  //C = v*s*S_max*T/(S_max+T);\n\n  let L_vt = toe_inv(L_v);\n  let C_vt = (C_v * L_vt) / L_v;\n\n  let L_new = toe_inv(L); // * L_v/L_vt;\n  C = (C * L_new) / L;\n  L = L_new;\n\n  let rgb_scale = oklab_to_linear_srgb(L_vt, a_ * C_vt, b_ * C_vt);\n  let scale_L = Math.cbrt(\n    1 / Math.max(rgb_scale[0], rgb_scale[1], rgb_scale[2], 0)\n  );\n\n  // remove to see effect without rescaling\n  L = L * scale_L;\n  C = C * scale_L;\n\n  let rgb = oklab_to_linear_srgb(L, C * a_, C * b_);\n  return [\n    255 * srgb_transfer_function(rgb[0]),\n    255 * srgb_transfer_function(rgb[1]),\n    255 * srgb_transfer_function(rgb[2])\n  ];\n}\n\nexport function srgb_to_okhsv(r: number, g: number, b: number) {\n  let lab = linear_srgb_to_oklab(\n    srgb_transfer_function_inv(r / 255),\n    srgb_transfer_function_inv(g / 255),\n    srgb_transfer_function_inv(b / 255)\n  );\n\n  let C = Math.sqrt(lab[1] * lab[1] + lab[2] * lab[2]);\n  let a_ = lab[1] / C;\n  let b_ = lab[2] / C;\n\n  let L = lab[0];\n  let h = 0.5 + (0.5 * Math.atan2(-lab[2], -lab[1])) / Math.PI;\n\n  let ST_max = get_ST_max(a_, b_);\n  let S_max = ST_max[0];\n  let S_0 = 0.5;\n  let T = ST_max[1];\n  let k = 1 - S_0 / S_max;\n\n  const t = T / (C + L * T);\n  let L_v = t * L;\n  let C_v = t * C;\n\n  const L_vt = toe_inv(L_v);\n  const C_vt = (C_v * L_vt) / L_v;\n\n  const rgb_scale = oklab_to_linear_srgb(L_vt, a_ * C_vt, b_ * C_vt);\n  const scale_L = Math.cbrt(\n    1 / Math.max(rgb_scale[0], rgb_scale[1], rgb_scale[2], 0)\n  );\n\n  L = L / scale_L;\n  C = C / scale_L;\n\n  C = (C * toe(L)) / L;\n  L = toe(L);\n\n  const v = L / L_v;\n  const s = ((S_0 + T) * C_v) / (T * S_0 + T * k * C_v);\n\n  return [h, s, v];\n}\n\nexport function hex_to_rgb(hex: string) {\n  if (hex.substr(0, 1) == \"#\") hex = hex.substr(1);\n\n  if (hex.match(/^([0-9a-f]{3})$/i)) {\n    let r = (parseInt(hex.charAt(0), 16) / 15) * 255;\n    let g = (parseInt(hex.charAt(1), 16) / 15) * 255;\n    let b = (parseInt(hex.charAt(2), 16) / 15) * 255;\n    return [r, g, b];\n  }\n  if (hex.match(/^([0-9a-f]{6})$/i)) {\n    let r = parseInt(hex.substr(0, 2), 16);\n    let g = parseInt(hex.substr(2, 2), 16);\n    let b = parseInt(hex.substr(4, 2), 16);\n    return [r, g, b];\n  }\n  if (hex.match(/^([0-9a-f]{1})$/i)) {\n    let a = (parseInt(hex.substr(0), 16) / 15) * 255;\n    return [a, a, a];\n  }\n  if (hex.match(/^([0-9a-f]{2})$/i)) {\n    let a = parseInt(hex.substr(0, 2), 16);\n    return [a, a, a];\n  }\n\n  return null;\n}\n\nexport function rgb_to_hex(r: number, g: number, b: number) {\n  function componentToHex(x: number) {\n    var hex = Math.round(x).toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n  }\n\n  return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}"],
  "mappings": "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",
  "names": ["hue_to_rgb", "p", "q", "b", "b2"]
}
