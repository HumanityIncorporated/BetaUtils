{
  "version": 3,
  "sources": ["../../frontend/game.js"],
  "sourcesContent": ["const K = {\n  MOVING: 1,\n  STOPPED: 2,\n  NOHOLD: 0,\n  HOLD: 1,\n  HOLD_NEWLINE: 2,\n  WAITING: 0,\n  ONTHEWAY: 1,\n  DELAYPERPASSENGER: 400,\n  INF: 9e99,\n  PIANDABIT: Math.PI+0.1,\n  NOACTION:0,\n  BOARDPENDING:1, // just boarding \n  DEBOARDPENDING:2, // just deboarding\n  TRANSFERPENDING:3 // deboarding FOR TRANSFER.\n}\nconst trainSpeed = 100 / 1000; // pixels/ms\nlet holdState = K.NOHOLD;\nlet ctx = null;\nlet canv = null;\nlet totalScaleFac = 1;\nlet hovering = null;\nlet stops = [];\nlet connections = [];\nlet lineTypes = [];\nlet stopCt = 0;\nlet minSclFac = 0.5;\nconst maxSclFac = 3;\nlet viewportW = 0;\nlet viewportH = 0;\nlet viewportMax, viewportMin;\nlet currPath = [];\nlet typesOnLine = []\nlet trains = [];\nlet maxUnlockedType = 0;\nconst acceptRadius = 30;\nconst stopSz = 20;\nlet adj = [];\nlet passengers = [];\nlet currPos_canv = null;\nlet lineCt = 0;\nlet shiftStatus = false;\nlet downPt = null;\nlet types = [triangle, square, circ, star];\nlet defaultClr = \"#000\";\nconst colours = [\"green\", \"yellow\", \"blue\", \"orange\", \"purple\", \"grey\"];\nlet DEBUG = true;\nfunction onLoad() {\n  \n}\n\nfunction getNextStop(currTrain) {\n let currToIdx = currTrain.path.indexOf(nearestStop(currTrain.to,1));\n  if (currTrain.revDir && currToIdx == 0)\n  {\n    currTrain.revDir = !currTrain.revDir;\n    nextStop = currTrain.from\n  }\n  else if (!currTrain.revDir && currToIdx == currTrain.path.length-1) {\n    nextStop = currTrain.from;\n    currTrain.revDir = !currTrain.revDir;\n  }\n  else if (currTrain.revDir) {\n    nextStop = currTrain.path[currToIdx-1];\n  }\n  else nextStop = currTrain.path[currToIdx+1]; \n  return nearestStop(nextStop, 1);\n}\n\nfunction handlePassenger(pass) {\n  if (pass.status != K.WAITING) return;\n  let minRouteLength = K.INF;\n  // let minRoute = [];\n  for (let l=0; l<pass.from.linesServed.size; l++) {\n    let lIdx = Array.from(pass.from.linesServed)[l];\n    for (let i=0; i<typesOnLine.length; i++) {\n      if (!typesOnLine[i].has(pass.to)) continue;\n      if (minRouteLength > adj[lIdx][i].val) {\n        minRouteLength = adj[lIdx][i].val;\n        // pass.route=adj[lIdx][i].route;\n        //WARNING! DO A DEEP COPY\n        pass.route = [];\n        for (let e of adj[lIdx][i].route)\n          pass.route.push(e);\n      }\n    }\n  }\n}\n\nfunction redraw() {\n  // function connect(currPath, clr) {\n  function circle(pt) {\n    ctx.save();\n    clearCircle(pt, acceptRadius);\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, stopSz, 0, K.PIANDABIT * 2);\n    ctx.stroke();\n    // ctx.strokeStyle;\n    ctx.beginPath();\n    ctx.arc(pt.x, pt.y, acceptRadius, 0, K.PIANDABIT * 2);\n    ctx.stroke();\n    ctx.restore();\n    ctx.beginPath();\n  }\n  function clearCircle(pt, rad) {\n    ctx.beginPath();\n    ctx.fillStyle = getCSSProp(\"--system-grey3\");\n    ctx.save();\n    ctx.arc(pt.x, pt.y, rad + 2, 0, K.PIANDABIT * 2);\n    ctx.clip();\n    ctx.save();\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canv.width, canv.height);\n    ctx.restore();\n    ctx.fill();\n    ctx.restore();\n    ctx.beginPath();\n  }\n  updateMinScl();\n  ctx.beginPath();\n  ctx.save();\n  ctx.resetTransform();\n  ctx.fillStyle = getCSSProp(\"--system-grey3\");\n  ctx.clearRect(0, 0, canv.width, canv.height);\n  ctx.fillRect(0, 0, canv.width, canv.height);\n  ctx.restore();\n  if (DEBUG) {\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.moveTo(-viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, -viewportH/2);\n    ctx.lineTo(viewportW / 2, viewportH/2);\n    ctx.lineTo(-viewportW/2, viewportH/2);\n    ctx.lineTo(-viewportW/2, -viewportH/2);\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  if (hovering) {\n    ctx.save();\n    ctx.fillStyle = getCSSProp(\"--system-green2\");\n    // ctx.strokeWidth = acceptRadius - stopSz;\n    ctx.beginPath();\n    ctx.arc(hovering.x, hovering.y, acceptRadius, 0, K.PIANDABIT*2);\n    ctx.fill();\n    clearCircle({x:hovering.x,y:hovering.y},stopSz);\n    ctx.restore();\n  }\n  ////////// little stop circles //////////\n  for (let i = 0; i < stops.length; i++) {\n    ctx.save();\n    if (stops[i].failureTimer > 0) {\n      // let pctRemaining = \n    }\n    ctx.restore();\n    ctx.arc(stops[i].x, stops[i].y, stopSz, 0, K.PIANDABIT * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.fillStyle = defaultClr;\n    let out = \" \";\n    for (let j = 0; j < stops[i].waiting.length; j++) {\n      out += stops[i].waiting[j].to.toString();\n    }\n    ctx.fillText(out, stops[i].x + stopSz, stops[i].y - stopSz / 2);\n    ctx.fillText(stops[i].type, stops[i].x, stops[i].y)\n    // if ()\n  }\n  // existing paths///////////\n  for (let i = 0; i < connections.length; i++) {\n    // if (lines.length > 0) ctx.arc(lines[i][0].x, lines[i][0].y, acceptRadius, 0, K.PIANDABIT*2);\n    // // for (let i=1; i<currPath.length; i++) {\n    let angBtw = Math.atan2(connections[i].to.y - connections[i].from.y,\n      connections[i].to.x - connections[i].from.x);\n    // angBtw += K.PIANDABIT;\n    ctx.save();\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    ctx.strokeStyle = connections[i].colour;\n    ctx.moveTo(connections[i].from.x + c * stopSz,\n      connections[i].from.y + s * stopSz);\n    ctx.lineTo(connections[i].to.x - c * stopSz,\n      connections[i].to.y - s * stopSz)\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  ctx.save();\n  ctx.lineWidth = 4;\n  //////// current path /////////\n  // connect(currPath, getCSSProp(\"--system-green\"));\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = defaultClr;\n  ctx.stroke();\n  for (let i = 1; i < currPath.length; i++) {\n    let angBtw = Math.atan2(currPath[i].y - currPath[i - 1].y,\n      currPath[i].x - currPath[i - 1].x);\n    ctx.beginPath();\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    ctx.moveTo(currPath[i - 1].x + c * acceptRadius, currPath[i - 1].y + s * acceptRadius);\n    ctx.lineTo(currPath[i].x - c * acceptRadius, currPath[i].y - s * acceptRadius)\n    ctx.stroke();\n    ctx.strokeStyle = defaultClr;\n  }\n  ctx.beginPath();\n\n\n  //////////////// then put the current path large circles /////////\n  for (let i = 0; i < currPath.length; i++) {\n    ctx.save();\n    ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n    circle(currPath[i]);\n    ctx.restore();\n  }\n\n  //////////////// existing path lines ////////////////////\n  for (let i = 0; i < connections.length; i++) {\n    // ctx.strokeStyle = getCSSProp(\"--\")\n    clearCircle(connections[i].from, stopSz);\n    clearCircle(connections[i].to, stopSz);\n    ctx.beginPath();\n    ctx.strokeStyle = defaultClr;\n    ctx.arc(connections[i].from.x, connections[i].from.y, stopSz, 0, K.PIANDABIT * 2);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(connections[i].to.x, connections[i].to.y, stopSz, 0, K.PIANDABIT * 2);\n    ctx.stroke();\n    // circle(connections[i].from)//, connections[i].colour);\n    // circle(connections[i].to) //, connections[i].colour);\n  }\n  ctx.restore();\n  ctx.beginPath();\n  ////////////////////////////////\n  ctx.restore();\n  ctx.beginPath();\n  if (holdState == K.HOLD_NEWLINE) {\n    // must have a starting poibt\n    let lastPt = currPath[currPath.length - 1];\n    let angBtw = Math.atan2(currPos_canv.y - lastPt.y,\n      currPos_canv.x - lastPt.x);\n    let c = Math.cos(angBtw);\n    let s = Math.sin(angBtw);\n    let nextStop = nearestStop(currPos_canv, acceptRadius);\n    if (nextStop && samePt(nextStop, lastPt)) { // accepted new stop\n      clearCircle(lastPt, acceptRadius);\n      ctx.save();\n      ctx.beginPath();\n      ctx.lineWidth = 4;\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      ctx.arc(lastPt.x, lastPt.y, stopSz, 0, K.PIANDABIT * 2);\n      ctx.stroke();\n      circle(lastPt);\n      ctx.restore();\n\n    }\n    ctx.beginPath();\n    // else if (!nextStop) {\n    if (nextStop && samePt(nextStop, lastPt)); // return;\n    // THERE'S A PROBLEM.\n    else if (nextStop) {\n\n      angBtw = Math.atan2(nextStop.y - lastPt.y,\n        nextStop.x - lastPt.x);\n      c = Math.cos(angBtw);\n      s = Math.sin(angBtw);\n      ctx.moveTo(lastPt.x + c * acceptRadius, lastPt.y + s * acceptRadius);\n\n      ctx.save();\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      ctx.lineTo(nextStop.x - c * acceptRadius, nextStop.y - s * acceptRadius);\n      ctx.stroke();\n      ctx.beginPath();\n      ctx.strokeStyle = getCSSProp(\"--system-red\");\n      ctx.arc(nextStop.x, nextStop.y, stopSz, 0, K.PIANDABIT * 2);\n      ctx.stroke();\n      circle(nextStop);\n      ctx.restore();\n    }\n    // just not connected yet.\n    else {\n      ctx.moveTo(lastPt.x + c * acceptRadius, lastPt.y + s * acceptRadius);\n      ctx.save();\n      ctx.lineWidth = 4;\n      ctx.strokeStyle = getCSSProp(\"--system-\" + colours[0]);\n      ctx.lineTo(currPos_canv.x, currPos_canv.y);\n      ctx.stroke();\n      ctx.restore();\n    }\n    // if (!samePt(nextStop, lastPt)) \n    //   ctx.strokeStyle = getCSSProp(\"--system-red\");\n    // else \n    // ctx.strokeStyle = getCSSProp(\"--system-green\");\n\n    // }\n  }\n  for (let i = 0; i < stops.length; i++)\n    ctx.fillText(stops[i].type, stops[i].x, stops[i].y)\n  // now we draw the trains!\n  for (let i = 0; i < trains.length; i++) {\n    ctx.beginPath();\n    let angBtw = Math.atan2(trains[i].to.y - trains[i].from.y,\n      trains[i].to.x - trains[i].from.x);\n    let nStop = nearestStop(trains[i].to, stopSz);\n    if (nStop) {\n      let pctRemaining = distBtw(nStop, trains[i].to)/stopSz;\n      let nextTrainTo = getNextStop(trains[i]);\n      let angBtw2 = Math.atan2(trains[i].to.y - trains[i].from.y,\n          trains[i].to.x - trains[i].from.x);\n      // at stop, turn according to distance\n    }\n    let center = { x: trains[i].x, y: trains[i].y };\n    const w = 15;\n    const h = 30;\n    const c = Math.cos(angBtw);\n    const c2 = Math.cos(angBtw + K.PIANDABIT / 2)\n    const s = Math.sin(angBtw);\n    const s2 = Math.sin(angBtw + K.PIANDABIT / 2);\n    // const halfDiag = Math.sqrt(w*w/4+h*h/4)/2;\n    ctx.save();\n    // ctx.translate(-center.x, -center.y)\n    // ctx.rotate(angBtw);\n    // ctx.translate(center.x, center.y);\n    ctx.fillStyle = getCSSProp(\"--system-grey\");\n    ctx.moveTo(center.x + c * h / 2 + c2 * w / 2, center.y + s * h / 2 + s2 * w / 2);\n    ctx.lineTo(center.x + c * h / 2 - c2 * w / 2, center.y + s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 - c2 * w / 2, center.y - s * h / 2 - s2 * w / 2);\n    ctx.lineTo(center.x - c * h / 2 + c2 * w / 2, center.y - s * h / 2 + s2 * w / 2);\n    ctx.fill();\n    ctx.fillStyle = defaultClr;\n    let str = \"\";\n    for (let pass of trains[i].passengers)\n      str+= pass.to.toString();\n    ctx.fillText(str, center.x, center.y)\n    // ctx.fillRect(center.x - 8, center.y-2.5, 16, 5);\n    ctx.restore();\n  }\n  \n}\n\nfunction registerMaximisingCanvas(id, widthPc, heightPc, redrawFcn) { // (id:string, widthPc:number, heightPc:number, redrawFcn:()=>any) {\n  //let canv = byId(id)// as HTMLCanvasElement;\n  window.addEventListener(\"resize\", (ev) => {\n    canv.width = window.innerWidth * widthPc;\n    canv.height = window.innerHeight * heightPc;\n    // everything is gone - restore it!\n    applyTransfm();\n    redrawFcn();\n  })\n  canv.style.height = 100 * heightPc + \"vh\";\n  canv.style.width = 100 * widthPc + \"vw\";\n  canv.width = window.innerWidth * widthPc;\n  canv.height = window.innerHeight * heightPc;\n  redrawFcn();\n}\n\nfunction populateStops() {\n  for (let i = 0; i < stops.length; i++) {\n    if (Math.random() < 0.4) continue;\n    let toAdd = Math.floor(Math.random() * (stops.length) / 3) + 1;\n    for (let j = 0; j < toAdd; j++) {\n      let stopAdded = Math.floor(Math.random() * stops.length);\n      // if (stopAdded >= stops[i].type) stopAdded++;\n      let currType = getNextType(stops[stopAdded].type);\n      let pass = { from: stops[stopAdded], to: currType, route: [], \n                  status: K.WAITING, actionStatus: K.NOACTION, train:null, stop:null};\n      passengers.push(pass);\n      handlePassenger(pass);\n      stops[stopAdded].waiting.push(pass);\n      if (stops[stopAdded].waiting.length > stops[stopAdded].capacity) \n        stops[stopAdded].failureTimer = Date.now();\n    }\n  }\n}\n\nfunction preLoad() {\n  canv = byId(\"canv\");\n  ctx = canv.getContext(\"2d\");\n  registerMaximisingCanvas(\"canv\", 1, 0.95, redraw);\n  if ((docURL.searchParams.get(\"debug\")??\"yesplease\").match(/false|no|beans/)) {\n    DEBUG = false;\n  }\n  canv.addEventListener(\"pointermove\", onmove);\n  canv.addEventListener(\"pointerdown\", (ev) => {\n    holdState = K.HOLD;\n    downPt = { x: ev.clientX, y: ev.clientY };\n    let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n    let nStop = nearestStop(actualPos, acceptRadius);\n    if (nStop && colours.length > 0) {\n      holdState = K.HOLD_NEWLINE;\n      currPath = [nStop];\n      redraw();\n    }\n    if (holdState == K.HOLD) {\n      document.body.style.cursor = \"grabbing\";\n    }\n  });\n  window.addEventListener(\"keydown\", keyUpdate);\n  window.addEventListener(\"keyup\", keyUpdate);\n  window.addEventListener(\"pointerup\", pointerUp);\n  canv.addEventListener(\"wheel\", (ev) => {\n    // larger -ve deltaY: \n    // ctx.\n    // let sclFac = (ev.deltaY<0?Math.pow(10, -ev.deltaY/750):Math.pow(10, -ev.deltaY/400))\n    let sclFac = (ev.deltaY < 0 ? 1.15 : 1 / 1.15)\n    if (sclFac * totalScaleFac > maxSclFac)\n      sclFac = maxSclFac / totalScaleFac;\n    if (sclFac * totalScaleFac < minSclFac)\n      sclFac = minSclFac / totalScaleFac;\n    translate(-ev.clientX, -ev.clientY);\n    scale(sclFac);\n    translate(ev.clientX, ev.clientY);\n    totalScaleFac *= sclFac;\n    redraw();\n  })\n  //////////\n  // setup stops\n  updateMinScl();\n  // let firstPoint = genRandomPt();\n  // firstPoint.waiting = [];\n  // stops.push(firstPoint);\n  // stops.type = 0;\n  // let canvMinDim = Math.min(viewportW, viewportH); \n  for (let i = 0; i < 3; i++) {\n    addNewStop(i);\n  }\n  totalScaleFac *= 0.8;\n  // translate(-viewportW/2, -viewportH/2);\n  redraw();\n  scale(totalScaleFac);\n  redraw();\n  translate(canv.width / 2, canv.height / 2);\n  redraw();\n  //////\n  // setInterval(animLoop, 1000/60);\n  requestAnimationFrame(animLoop);\n  startTime = Date.now();\n  setTimeout(stopPopulationLoop, 5000);\n}\n\nfunction animLoop() {\n  for (let i = 0; i < trains.length; i++) {\n    let currTrain = trains[i];\n    let distTotal = distBtw(trains[i].to, trains[i].from);\n    // distToCover = s * px/s / px\n    let distTravelled = (Date.now() - currTrain.startT) * trainSpeed;\n    let percentCovered = distTravelled / distTotal;\n    if (percentCovered < 0) continue;\n    if (percentCovered >= 1) { // at a stop. \n      let startT = Date.now();\n      percentCovered = 0;\n      // let applicable = [];\n      let currentTo = trains[i].to;//trains[i].revDir?trains[i].from:trains[i].to;\n      let currStop = nearestStop(currentTo, 1);\n      currTrain.onCompletion = currTrain.passengers.length;\n      // how many people to drop off here?\n      let delay = dropOff(currTrain, currentTo) * K.DELAYPERPASSENGER;\n      // figure out if the train is due to reverse first.\n      let reverseQ = true;\n      let nextStop = null;\n      // for (let j = 0; j < connections.length && reverseQ; j++) {\n      //   if ((trains[i].revDir ? samePt(connections[j].to, currentTo)\n      //     : samePt(connections[j].from, currentTo))\n      //     && connections[j].lineID == trains[i].lineID) {\n      //     reverseQ = false;\n      //     nextStop = trains[i].revDir ? connections[j].from : connections[j].to;\n      //   }\n      // }\n      // no need to do all this nonsense the train knows its path\n       nextStop = getNextStop(currTrain);   \n      // who to pick up?\n      //  find which stops this line supports\n      // let availableTransfers = new Set();\n      \n      // while (true) {\n      currStop = nearestStop(currentTo, 1);\n      let upcomingLinesServed = new Set(JSON.parse(JSON.stringify([...currStop.linesServed])));\n      // 1. drop off people who are transferring - MAKE SURE THEY'RE ON THEIR WAY!\n      for (let j=0; j<currTrain.passengers.length; j++) {\n        let pass = currTrain.passengers[j];\n        if (pass.route.length > 0 && pass.status == K.ONTHEWAY \n            && pass.actionStatus == K.NOACTION &&\n            upcomingLinesServed.has(pass.route[0])) {\n          // currTrain.passengers.splice(j, 1);\n          // currStop.toAdd.push({from:currTrain,pass:pass});\n          // currTrain.onCompletion--;\n          // // currStop.waiting.push(pass);\n          // // debugger;\n          // // j--;\n          pass.actionStatus = K.TRANSFERPENDING;\n          // pass.status = K.WAITING;\n          pass.stop = currStop;\n          pass.train = currTrain;\n          pass.route.shift();\n          delay += K.DELAYPERPASSENGER;\n        }\n      }\n      // 2. pick up people who need transfers (they typically wait very long)\n      for (let j=0; j<connections.length; j++) {\n        if (connections[j].lineID == currTrain.lineID) {\n          let fStop = nearestStop(connections[j].from, 1);\n          let tStop = nearestStop(connections[j].to, 1);\n          for (const nextLine of fStop.linesServed) \n            upcomingLinesServed.add(nextLine);\n          for (const nextLine of tStop.linesServed) \n            upcomingLinesServed.add(nextLine);\n        }\n      }\n      for (let j=0; j<currStop.waiting.length; j++) {\n        let pass = currStop.waiting[j];\n        // if (currTrain.onCompletion >= currTrain.cap) break;\n        if (currStop.waiting[j].actionStatus != K.NOACTION) continue;\n        if (pass.route.length > 0 && upcomingLinesServed.has(pass.route[0])) {\n          // currStop.waiting.splice(j, 1);\n          currStop.waiting[j].actionStatus = K.BOARDPENDING;\n          // pass.status = K.ONTHEWAY;\n          currStop.waiting[j].stop = currStop;\n          currStop.waiting[j].train = currTrain;\n          // j--;\n          // currTrain.onCompletion++;\n          // currTrain.toAdd.push({stop:currStop,pass:pass});\n          // pass.status = K.ONTHEWAY;\n          delay += K.DELAYPERPASSENGER;\n        }\n      }\n        \n      // 3. pick up people who do not have transfers at all\n      for (let k = 0; k < currStop.waiting.length; k++) {\n        // if (currTrain.passengers.length >= currTrain.cap) break;\n        // for (let j = 0; j < typesOnLine.length; j++) {\n\n        if (currStop.waiting[k].actionStatus != K.NOACTION) continue;\n        if (typesOnLine[currTrain.lineID].has(currStop.waiting[k].to)) {\n          let adding = currStop.waiting[k];\n          currStop.waiting[k].actionStatus = K.BOARDPENDING;\n          currStop.waiting[k].stop = currStop;\n          currStop.waiting[k].train = currTrain;\n          // adding.status = K.ONTHEWAY;\n          // currStop.waiting.splice(k, 1);\n          // currTrain.toAdd.push({stop:currStop,pass:adding});\n          // k--;\n        }\n        delay += K.DELAYPERPASSENGER;\n        // }\n      }\n      // if (currTrain.revDir) {\n      if (delay > 0) currTrain.startT = K.INF;\n      handleAwaiting(currTrain, currStop);\n      currTrain.from = currTrain.to;\n      currTrain.to = nextStop;\n      \n      // }\n      if (Date.now() - startT > 25) \n        console.log(\"WARNING: StopHandler took \", Date.now() - startT+\"ms\");\n    } // if percentcoered = 1\n    currTrain.x = currTrain.from.x + (currTrain.to.x - currTrain.from.x) * percentCovered;\n    currTrain.y = currTrain.from.y + (currTrain.to.y - currTrain.from.y) * percentCovered;\n  }\n  redraw();\n\n  requestAnimationFrame(animLoop);\n}\n\nfunction handleAwaiting(currTrain, currStop) {\n  let handled = false;\n  for (const pass of passengers) {\n    if (pass.train != currTrain || pass.stop != currStop) continue;\n    else if (pass.actionStatus == K.NOACTION) continue;\n    // if people are trying to get on the train but unable to do so - abandon the action and wait for next recalculation\n    else if (currTrain.passengers.length >= currTrain.cap && \n             pass.actionStatus == K.BOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      continue;\n    }\n    else if (pass.actionStatus == K.BOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currStop.waiting.length; i++) \n        if (currStop.waiting[i] == pass) {\n          currStop.waiting.splice(i, 1);\n          currTrain.passengers.push(pass);\n          break;\n        }\n      pass.status = K.ONTHEWAY;\n      pass.actionStatus = K.NOACTION;\n      handled = true;\n      break;\n    }\n    else if (pass.actionStatus == K.DEBOARDPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currTrain.passengers.length; i++) \n        if (currTrain.passengers[i] == pass) {\n          currTrain.passengers.splice(i,1);\n          break;\n        }\n      pass.status = K.WAITING;\n      pass.actionStatus = K.NOACTION;\n      handled = true;\n      break;\n    }\n    else if (pass.actionStatus == K.TRANSFERPENDING) {\n      pass.actionStatus = K.NOACTION;\n      for (let i=0; i<currTrain.passengers.length; i++) \n        if (currTrain.passengers[i] == pass) {\n          currTrain.passengers.splice(i,1);\n          currStop.waiting.push(pass);\n          break;\n        }\n      pass.status = K.WAITING;\n      pass.actionStatus = K.NOACTION;\n      handled = true;\n      break;\n    }\n    else throw(\"invalid actionStatus!\");\n  }\n  if (handled) setTimeout(()=>{handleAwaiting(currTrain, currStop)}, K.DELAYPERPASSENGER);\n  else {\n    currTrain.startT = Date.now();\n  }\n}\n\nfunction dropOff(currTrain, pt) {\n  let stop = nearestStop(pt, 1);\n  let matching = 0;\n  for (let i = 0; i < currTrain.passengers.length; i++)\n    if (currTrain.passengers[i].to == stop.type && currTrain.passengers[i].actionStatus == K.NOACTION) {\n      matching++;\n      // currTrain.passengers.splice(i, 1);\n      // currTrain.onCompletion--;\n      currTrain.passengers[i].actionStatus = K.DEBOARDPENDING;\n      currTrain.passengers[i].stop = stop;\n      currTrain.passengers[i].train = currTrain;\n      // currTrain.toRemove.push({stop:stop, pass:currTrain.passengers[i]});\n      // i--;\n    }\n  return matching;\n}\n\nfunction stopPopulationLoop() {\n  populateStops();\n  redraw();\n  setTimeout(stopPopulationLoop, 5000 + Math.random() * 7000);\n}\n\nfunction updateMinScl(newVal = minSclFac) {\n  minSclFac = newVal;\n  viewportW = canv.width / minSclFac * 0.4;\n  viewportH = canv.height / minSclFac * 0.4;\n  viewportMax = Math.max(viewportW, viewportH);\n  viewportMin = Math.min(viewportW, viewportH);\n}\n\nfunction addNewStop(type = -1) {\n  let newPt;\n  if (type < 0) type = getNextType();\n  if (stops.length > 0)\n    do {\n      // newPt = genRandomPt();\n      // this is stupid.\n      refPt = stops[Math.floor(Math.random() * stops.length)];\n      // if (refPt)\n      ang = Math.random() * 2 * K.PIANDABIT;\n      dist = 150 + Math.random() * 100\n      newPt = { x: refPt.x + dist * Math.cos(ang), y: refPt.y + dist * Math.sin(ang) };\n    } while (!(!nearestStop(newPt, 150) && withinViewport(newPt)));\n  else newPt = genRandomPt();\n  stops.push(newPt);\n  maxUnlockedType = Math.max(maxUnlockedType, type);\n  updateMinScl(minSclFac * 0.98);\n  newPt.waiting = [];\n  newPt.linesServed = new Set();\n  newPt.type = type;\n  newPt.toAdd = [];\n  newPt.capacity = 8;\n  redraw();\n}\n\nfunction keyUpdate(ev) {\n  // if (!shiftStatus && ev.shiftKey)\n  //   document.body.style.cursor = \"grab\";\n  // else if (shiftStatus && !ev.shiftKey) \n  //   document.body.style.cursor = \"\";\n  // shiftStatus = ev.shiftKey;\n}\n\nfunction onmove(ev) {\n  // if (ev.shiftKey) {\n  //   document.body.style.cursor = \"grabbing\";\n  // }\n  hovering = null;\n  currPos_canv = fromCanvPos(ev.clientX, ev.clientY);\n  if (holdState == K.HOLD) {// && ev.shiftKey) {\n    translate(ev.movementX, ev.movementY);\n    redraw();\n  }\n  let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n  let nStop = nearestStop(actualPos, acceptRadius);\n  if (holdState == K.HOLD_NEWLINE) {\n    \n    let lastStop = currPath[currPath.length - 1];\n    // if (!nStop) // \n    //   currPath.pop();\n    if (nStop) {\n      let canAdd = true;\n      for (let i = 0; i < currPath.length && canAdd; i++) {\n        if (samePt(currPath[i], nStop)) canAdd = false;\n      }\n      if (!canAdd && currPath.length > 2\n        && samePt(nStop, currPath[0]) && !samePt(nStop, lastStop)) {\n        canAdd = true;\n        holdState = K.NOHOLD;\n      }\n      if (canAdd) {\n        currPath.push(nStop);\n      }\n    }\n    redraw();\n  }\n  else if (nStop) {\n    hovering = nStop;\n    document.body.style.cursor = \"pointer\";\n  }\n  else if (holdState == K.NOHOLD) document.body.style.cursor = \"\";\n}\n\nfunction pointerUp(ev) {\n  holdState = K.NOHOLD;\n  document.body.style.cursor = holdState == K.HOLD ? \"grab\" : \"\";\n  if (currPath.length > 1) {\n    let currCol = getCSSProp(\"--system-\" + colours[0]);\n    colours.shift();\n    // lines.push({path:currPath, \n    // colour:getCSSProp(\"--system-\"+colours[lines.length])});\n    for (let i = 1; i < currPath.length; i++) {\n      connections.push({\n        from: currPath[i - 1], to: currPath[i],\n        colour: currCol, lineID: lineCt\n      });\n    }\n    // run dijkstra?\n\n\n    let supportedTypes = new Set();\n    for (let i = 0; i < currPath.length; i++) {\n      supportedTypes.add(currPath[i].type);\n      currPath[i].linesServed.add(lineCt);\n    }\n    typesOnLine.push(supportedTypes);\n    // for ()\n    /// now every passenger route will be affected\n    // for (let currP of passengers) {\n    // if (currP.status != K.WAITING) continue;\n    adj = [];\n    for (let i = 0; i < typesOnLine.length; i++) {\n      let row = [];\n      for (let j = 0; j < typesOnLine.length; j++) {\n        row.push({ route:[], val: K.INF });\n      }\n      adj.push(row);\n    }\n    for (let i = 0; i < stops.length; i++) {\n      let served = Array.from(stops[i].linesServed);\n      for (let j = 0; j < served.length; j++) {\n        for (let k = 0; k < served.length; k++) {\n          adj[served[j]][served[k]].val = 1;\n          adj[served[j]][served[k]].route = [served[k]];\n          adj[served[k]][served[j]].val = 1;\n          adj[served[k]][served[j]].route = [served[j]];\n        }\n      }\n      for (let j=0; j<served.length; j++) {\n        adj[served[j]][served[j]].val = 0;\n        adj[served[j]][served[j]].route = [];\n      }\n    }\n    for (let k = 0; k < adj.length; k++) {\n      for (let j = 0; j < adj.length; j++) {\n        for (let i = 0; i < adj.length; i++) {\n          if (i == k || j == k) continue;\n          let newCost = adj[i][k].val+adj[k][j].val;\n          if (newCost < adj[i][j].val) {\n            adj[i][j].val = newCost;\n            adj[i][j].route = [];\n            \n            // let replaceIdx = adj[i][j].indexOf(i);\n            for (let n=0; n<adj[i][k].route.length; n++) \n              adj[i][j].route.push(adj[i][k].route[n])\n            for (let n=0; n<adj[k][j].route.length; n++) \n              adj[i][j].route.push(adj[k][j].route[n])\n          }\n          // adj[i][j].val = Math.min(adj[i][j].val, adj[i][k].val + adj[k][j].val);\n        }\n      }\n      \n    }\n    console.log(\"==== RECALCULATION SUCCESS ====\")\n    for (pass of passengers) {\n      handlePassenger(pass);\n    }\n    trains.push({\n      x: currPath[0].x, y: currPath[0].y,\n      from: currPath[0], to: currPath[1], path: currPath,\n      lineID: lineCt, colour: currCol, startT: Date.now(),\n      status: K.MOVING, passengers: [], cap:12, revDir:false, \n      toAdd:[], toRemove:[], onCompletion:0\n    });\n    trains.push({\n      x: currPath[0].x, y: currPath[0].y,\n      from: currPath[currPath.length-1], to: currPath[currPath.length-2], path: currPath,\n      lineID: lineCt, colour: currCol, startT: Date.now(),\n      status: K.MOVING, passengers: [], cap:12, revDir:true, toAdd:[], toRemove:[], \n      onCompletion:0\n    });\n    lineCt++;\n  }\n  currPath = [];\n  redraw();\n  if (!downPt || distBtw({ x: ev.clientX, y: ev.clientY }, downPt) > 10) return;\n  // check for is it actually a click ^\n  ctx.beginPath();\n  let actualPos = fromCanvPos(ev.clientX, ev.clientY);\n  ctx.moveTo(actualPos.x - 0.5, actualPos.y - 0.5);\n  ctx.lineTo(actualPos.x + 0.5, actualPos.y + 0.5);\n  ctx.stroke();\n  ctx.fillText(actualPos.x.toFixed(2) + \", \" + actualPos.y.toFixed(2), actualPos.x, actualPos.y);\n}\n\nfunction samePt(pt1, pt2) {\n  return Math.abs(pt1.x - pt2.x) < 0.1 && Math.abs(pt1.y - pt2.y) < 0.1;\n}\n\nfunction genRandomPt() {\n  return {\n    x: Math.random() * viewportW - viewportW / 2,\n    y: Math.random() * viewportH - viewportH / 2\n  }\n}\n\nfunction nearestStop(newPt, minDist) {\n  let found = null;\n  for (let i = 0; i < stops.length; i++) {\n    let dist = distBtw(stops[i], newPt);\n    if (dist < minDist) {\n      found = stops[i];\n      minDist = dist;\n    }\n  }\n  return found;\n}\n\nfunction withinViewport(newPt) {\n  // let viewportScl = minSclFac*0.8;\n  // should be <1 and decreasing\n  if (newPt.x < -viewportW / 2) return false;\n  if (newPt.x > viewportW / 2) return false;\n  if (newPt.y < -viewportH / 2) return false;\n  if (newPt.y > viewportH / 2) return false;\n  return true;\n}\nfunction distBtw(pt1, pt2) {\n  function sq(x) { return x * x; }\n  return Math.sqrt(sq(pt1.x - pt2.x) + sq(pt1.y - pt2.y));\n}\n/// the matrix stuff :V\nlet transfm = [1, 0, 0,\n  0, 1, 0];\nfunction translate(x, y) {\n  transfm[2] += x;\n  transfm[5] += y;\n  applyTransfm();\n}\nfunction fromCanvPos(canvX, canvY) {\n  return { x: (canvX - transfm[2]) / transfm[0], y: (canvY - transfm[5]) / transfm[4] };\n}\nfunction scale(scl) {\n  // matrix mult with [\n  // sclX 0\n  // 0  sclY\n  // 0  0\n  for (let i = 0; i < 6; i++) transfm[i] *= scl;\n  applyTransfm();\n}\nfunction applyTransfm() {\n  ctx.setTransform(transfm[0], transfm[3], transfm[1], transfm[4], transfm[2], transfm[5]);\n}\n\nfunction triangle() {\n\n}\nfunction square() {\n\n}\nfunction circ() {\n\n}\nfunction star() {\n\n}\n\nfunction getNextType(exclude = -1) {\n  let type = Math.floor(Math.random() * (exclude < 0 ? types.length : maxUnlockedType));\n  if (type >= exclude && exclude >= 0) return type + 1;\n  return type;\n  // if ()\n}"],
  "mappings": "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",
  "names": ["pass", "nextStop", "dist"]
}
