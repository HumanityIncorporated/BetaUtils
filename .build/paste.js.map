{
  "version": 3,
  "sources": ["../paste.ts"],
  "sourcesContent": ["import {pasteDB, hashingOptions} from './consts';\n// const crypto = require('crypto');\nconst Cryptr = require(\"cryptr\");\nconst argon2 = require('argon2');\nimport {userRequest} from './userRequest'\nconst pasteMatch = /^[0-9a-zA-Z_\\-]{1,30}$/\nexport async function paste(content:string, loc:string, pwd:string, token:string) {\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  if (pwd.length == 0) return {status:\"ERROR\", data:{error:\"No password provided.\"}, token:token}\n  // let hashed = await argon2.hash(pwd, hashingOptions); \n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (existingDoc) return {status:\"ERROR\", data:{error:\"Paste already exists! Please select another name.\"}, token:token}\n  let userData = await userRequest(token);\n  \n  let user = userData.status==\"SUCCESS\"?userData.data.user:null\n  pasteDB.insertOne({fieldName:\"PASTE\", isSecure: true, \n                     encryptedData:await encrypt(content, pwd), \n                     name:loc, author:user});\n  // console.log(await encrypt(\"test\", \"thepassword\"));\n  return {status:\"SUCCESS\", data:null, token:token};\n}\n\n\nconst algorithm = 'aes-256-ctr'\nconst secretKey = process.env['encryptionKey']\n\nasync function encrypt(text:string, pwd:string) {\n  const cryptr = new Cryptr(pwd);\n  return cryptr.encrypt(text);\n\n}\n\nasync function decrypt(encr:any, pwd:string) \n{\n  const cryptr = new Cryptr(pwd);\n  return cryptr.decrypt(encr);\n}\n\n\nexport async function findPaste(loc:string, pwd:string, token:string) {\n  // console.log(pwd, loc);\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (!existingDoc) return {status:\"ERROR\", data:{error:\"Paste does not exist!\"}, token:token}\n  let userInfo = await userRequest(token);\n  // if (!pwd || pwd.length == 0 && userInfo.associatedUser == existingDoc.author) \n    // return {status:\"SUCCESS\", data:{content:await decrypt(existingDoc.encryptedData\n  if (existingDoc.pwd && await argon2.verify(existingDoc.pwd, pwd)) {\n    return {status:\"SUCCESS\", data:{content:existingDoc.data, security:\"none\"}, token:token};\n  }\n  else if (existingDoc.encryptedData) {\n    let out = \"Unknown Decode Error\";\n    // console.log(existingDoc.encryptedData);\n    try {\n      out = await decrypt(existingDoc.encryptedData, pwd);\n    }\n    catch(e){\n      // console.log(e);\n      return {status:\"ERROR\", data:{error:\"Decode error! \\n This is probably because you \"+\n        \"entered an invalid password, or your paste was corrupted.\"}, token:token}\n    }\n    return {status:\"SUCCESS\", data:{content:out, security:\"encrypted\"}, token:token};\n  }\n  else return {status:\"ERROR\", data:{error:\"Invalid password!\"}, token:token};\n}\n\n\nexport async function editPaste(content:string, loc:string, pwd:string, token:string) {\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  \n  let hashed = await argon2.hash(pwd, hashingOptions); \n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (!existingDoc) return {status:\"ERROR\", data:{error:\"Paste does not exist!\"}, token:token}\n  let userInfo = await userRequest(token);\n  if (userInfo.status!= \"SUCCESS\") return userInfo;\n  if (!existingDoc.author && userInfo.data.perms < 2) \n    return {status:\"ERROR\", data:{error:\"This paste was either created before 2023-04-27, or was created anonymously. It is not editable.\"}, token:token};\n  else if (userInfo.data.user != existingDoc.author && userInfo.dataperms < 2) return {status:\"ERROR\", data:{error:\"You are not the author of the paste and cannot edit it.\"}, token:token};\n  if (pwd.length == 0)\n    return {status:\"ERROR\", data:{error:\"No password provided!\"}, token:token}\n    // pasteDB.updateOne({fieldName:\"PASTE\", name:loc}, {$set:{\n    // data:content}});\n  await pasteDB.updateOne({fieldName:\"PASTE\", name:loc}, {\n    $set:{\n      encryptedData:await encrypt(content, pwd), \n      content:\"\",\n      pwd:null\n    }\n  }); \n    // pwd:hashed}});\n  return {status:\"SUCCESS\", data:null, token:token};\n}"],
  "mappings": "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",
  "names": []
}
