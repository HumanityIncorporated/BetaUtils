{
  "version": 3,
  "sources": ["../paste.ts"],
  "sourcesContent": ["import { pasteDB, hashingOptions } from './consts';\n// const crypto = require('crypto');\nconst Cryptr = require(\"cryptr\");\nconst argon2 = require('argon2');\nimport { userRequest } from './userRequest'\nconst pasteMatch = /^[0-9a-zA-Z_\\-]{1,30}$/\nexport async function paste(content: string, loc: string, pwd: string, token: string) {\n  if (!loc.match(pasteMatch)) return { status: \"ERROR\", data: { error: \"Invalid paste-name.\" }, token: token };\n  if (pwd.length == 0) return { status: \"ERROR\", data: { error: \"No password provided.\" }, token: token }\n  // let hashed = await argon2.hash(pwd, hashingOptions); \n  let existingDoc = await pasteDB.findOne({ fieldName: \"PASTE\", name: loc });\n  if (existingDoc) return { status: \"ERROR\", data: { error: \"Paste already exists! Please select another name.\" }, token: token }\n  let userData = await userRequest(token);\n\n  let user = userData.status == \"SUCCESS\" ? userData.data.user : null\n  pasteDB.insertOne({\n    fieldName: \"PASTE\", isSecure: true,\n    encryptedData: await encrypt(content, pwd),\n    name: loc, author: user\n  });\n  // console.log(await encrypt(\"test\", \"thepassword\"));\n  return { status: \"SUCCESS\", data: null, token: token };\n}\n\n\nconst algorithm = 'aes-256-ctr'\nconst secretKey = process.env['encryptionKey']\n\nasync function encrypt(text: string, pwd: string) {\n  const cryptr = new Cryptr(pwd);\n  return cryptr.encrypt(text);\n\n}\n\nasync function decrypt(encr: any, pwd: string) {\n  const cryptr = new Cryptr(pwd);\n  return cryptr.decrypt(encr);\n}\n\n\nexport async function findPaste(loc: string, pwd: string, token: string) {\n  // console.log(pwd, loc);\n  if (!loc.match(pasteMatch)) return { status: \"ERROR\", data: { error: \"Invalid paste-name.\" }, token: token };\n  let existingDoc = await pasteDB.findOne({ fieldName: \"PASTE\", name: loc });\n  if (!existingDoc) return { status: \"ERROR\", data: { error: \"Paste does not exist!\" }, token: token }\n  let userInfo = await userRequest(token);\n  // if (!pwd || pwd.length == 0 && userInfo.associatedUser == existingDoc.author) \n  // return {status:\"SUCCESS\", data:{content:await decrypt(existingDoc.encryptedData\n  if (existingDoc.pwd && await argon2.verify(existingDoc.pwd, pwd)) {\n    return { \n      status: \"SUCCESS\", \n      data: { \n        content: existingDoc.data, \n        security: \"none\" \n      }, \n      token: token \n    };\n  }\n  else if (existingDoc.encryptedData) {\n    let out = \"Unknown Decode Error\";\n    // console.log(existingDoc.encryptedData);\n    try {\n      out = await decrypt(existingDoc.encryptedData, pwd);\n    }\n    catch (e) {\n      // console.log(e);\n      return {\n        status: \"ERROR\", data: {\n          error: \"Decode error! \\n This is probably because you \" +\n            \"entered an invalid password, or your paste was corrupted.\"\n        }, token: token\n      }\n    }\n    return { status: \"SUCCESS\", data: { content: out, security: \"encrypted\" }, token: token };\n  }\n  else return { status: \"ERROR\", data: { error: \"Invalid password!\" }, token: token };\n}\n\n\nexport async function editPaste(content: string, loc: string, pwd: string, token: string) {\n  if (!loc.match(pasteMatch)) return { status: \"ERROR\", data: { error: \"Invalid paste-name.\" }, token: token };\n\n  let hashed = await argon2.hash(pwd, hashingOptions);\n  let existingDoc = await pasteDB.findOne({ fieldName: \"PASTE\", name: loc });\n  if (!existingDoc) return { status: \"ERROR\", data: { error: \"Paste does not exist!\" }, token: token }\n  let userInfo = await userRequest(token);\n  if (userInfo.status != \"SUCCESS\") return userInfo;\n  if (!existingDoc.author && userInfo.data.perms < 2)\n    return { status: \"ERROR\", data: { error: \"This paste was either created before 2023-04-27, or was created anonymously. It is not editable.\" }, token: token };\n  else if (userInfo.data.user != existingDoc.author && userInfo.data.perms < 2) return { status: \"ERROR\", data: { error: \"You are not the author of the paste and cannot edit it.\" }, token: token };\n\n  if (pwd.length == 0)\n    return { status: \"ERROR\", data: { error: \"No password provided!\" }, token: token }\n  // pasteDB.updateOne({fieldName:\"PASTE\", name:loc}, {$set:{\n  // data:content}});\n  await pasteDB.updateOne({ fieldName: \"PASTE\", name: loc }, {\n    $set: {\n      encryptedData: await encrypt(content, pwd),\n      content: \"\",\n      pwd: null\n    }\n  });\n  // pwd:hashed}});\n  return { status: \"SUCCESS\", data: null, token: token };\n}"],
  "mappings": "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",
  "names": []
}
