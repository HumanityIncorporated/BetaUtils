{
  "version": 3,
  "sources": ["../paste.ts"],
  "sourcesContent": ["import {pasteDB, hashingOptions} from './consts';\nconst argon2 = require('argon2');\nconst pasteMatch = /^[0-9a-zA-Z_\\-]{1,30}$/\nexport async function paste(content:string, loc:string, pwd:string, token:string) {\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  if (pwd.length == 0) return {status:\"ERROR\", data:{error:\"No password provided.\"}, token:token}\n  let hashed = await argon2.hash(pwd, hashingOptions); \n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (existingDoc) return {status:\"ERROR\", data:{error:\"Paste already exists! Please select another name.\"}, token:token}\n  pasteDB.insertOne({fieldName:\"PASTE\", data:content, pwd:hashed, name:loc});\n  return {status:\"SUCCESS\", data:null, token:token};\n}\n\nexport async function findPaste(loc:string, pwd:string, token:string) {\n  // console.log(pwd, loc);\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (!existingDoc) return {status:\"ERROR\", data:{error:\"Paste does not exist!\"}, token:token}\n  if (await argon2.verify(existingDoc.pwd, pwd)) {\n    return {status:\"SUCCESS\", data:existingDoc.data, token:token};\n  }\n  else return {status:\"ERROR\", data:{error:\"Invalid password!\"}, token:token};\n}\n\n\nexport async function editPaste(content:string, loc:string, pwd:string, token:string) {\n  if (!loc.match(pasteMatch)) return {status:\"ERROR\", data:{error:\"Invalid paste-name.\"}, token:token};\n  \n  let hashed = await argon2.hash(pwd, hashingOptions); \n  let existingDoc = await pasteDB.findOne({fieldName:\"PASTE\", name:loc});\n  if (!existingDoc) return {status:\"ERROR\", data:{error:\"Paste does not exist!\"}, token:token}\n  if (pwd.length == 0) \n    pasteDB.updateOne({fieldName:\"PASTE\", name:loc}, {$set:{\n    data:content,}});\n  else await pasteDB.updateOne({fieldName:\"PASTE\", name:loc}, {$set:{\n    data:content, \n    pwd:hashed}});\n  return {status:\"SUCCESS\", data:null, token:token};\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsC;AACtC,MAAM,SAAS,QAAQ,QAAQ;AAC/B,MAAM,aAAa;AACnB,eAAsB,MAAM,SAAgB,KAAY,KAAY,OAAc;AAChF,MAAI,CAAC,IAAI,MAAM,UAAU;AAAG,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,sBAAqB,GAAG,MAAW;AACnG,MAAI,IAAI,UAAU;AAAG,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,wBAAuB,GAAG,MAAW;AAC9F,MAAI,SAAS,MAAM,OAAO,KAAK,KAAK,4BAAc;AAClD,MAAI,cAAc,MAAM,sBAAQ,QAAQ,EAAC,WAAU,SAAS,MAAK,IAAG,CAAC;AACrE,MAAI;AAAa,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,oDAAmD,GAAG,MAAW;AACtH,wBAAQ,UAAU,EAAC,WAAU,SAAS,MAAK,SAAS,KAAI,QAAQ,MAAK,IAAG,CAAC;AACzE,SAAO,EAAC,QAAO,WAAW,MAAK,MAAM,MAAW;AAClD;AAEA,eAAsB,UAAU,KAAY,KAAY,OAAc;AAEpE,MAAI,CAAC,IAAI,MAAM,UAAU;AAAG,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,sBAAqB,GAAG,MAAW;AACnG,MAAI,cAAc,MAAM,sBAAQ,QAAQ,EAAC,WAAU,SAAS,MAAK,IAAG,CAAC;AACrE,MAAI,CAAC;AAAa,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,wBAAuB,GAAG,MAAW;AAC3F,MAAI,MAAM,OAAO,OAAO,YAAY,KAAK,GAAG,GAAG;AAC7C,WAAO,EAAC,QAAO,WAAW,MAAK,YAAY,MAAM,MAAW;AAAA,EAC9D;AACK,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,oBAAmB,GAAG,MAAW;AAC5E;AAGA,eAAsB,UAAU,SAAgB,KAAY,KAAY,OAAc;AACpF,MAAI,CAAC,IAAI,MAAM,UAAU;AAAG,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,sBAAqB,GAAG,MAAW;AAEnG,MAAI,SAAS,MAAM,OAAO,KAAK,KAAK,4BAAc;AAClD,MAAI,cAAc,MAAM,sBAAQ,QAAQ,EAAC,WAAU,SAAS,MAAK,IAAG,CAAC;AACrE,MAAI,CAAC;AAAa,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,wBAAuB,GAAG,MAAW;AAC3F,MAAI,IAAI,UAAU;AAChB,0BAAQ,UAAU,EAAC,WAAU,SAAS,MAAK,IAAG,GAAG,EAAC,MAAK;AAAA,MACvD,MAAK;AAAA,IAAQ,EAAC,CAAC;AAAA;AACZ,UAAM,sBAAQ,UAAU,EAAC,WAAU,SAAS,MAAK,IAAG,GAAG,EAAC,MAAK;AAAA,MAChE,MAAK;AAAA,MACL,KAAI;AAAA,IAAM,EAAC,CAAC;AACd,SAAO,EAAC,QAAO,WAAW,MAAK,MAAM,MAAW;AAClD;",
  "names": []
}
