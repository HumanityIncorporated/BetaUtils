{
  "version": 3,
  "sources": ["../accessControl.ts"],
  "sourcesContent": ["import { WS } from \"./wsHandler\";\n\n// import { hashSync, compareSync} from \nvar bcrypt = require(\"bcrypt\");\nconst path = require('path');\nimport {systemLog} from './misc';\n\nexport function validate(user:string, pwd:string, action:string, access:string, callback:any, token:string=\"\") {\n  systemLog(\"Validating as \"+user+\" with action \"+action +\" (token \"+token+\")\");\n  if (!token || !token.match(\"[0-9]+\") || \n     (!user || user && action !=\"CMD\" && !user.match(\"[a-zA-Z0-9_]+\")) || \n     (!pwd || action != \"CMD\" && pwd.length<=0)) \n  {\n    if (action!= \"checkAccess\" && action != \"logout\")\n    {\n      systemLog(\"Unknown error\")\n      callback.end(JSON.stringify(\"ERROR\"))\n      return;\n    } \n  }\n   // data validation complete\n  if (action==\"logout\") {\n    systemLog(\"Logging out \"+token)\n    WS.db.delete(token);\n    callback.end(JSON.stringify(\"SUCCESS\"));\n    return;\n  }\n\n  // attempt to add user or run commands or access support (REQUIRE PERMLEVELS)\n  if (action==\"add\" || action==\"CMD\" || action == \"checkAccess\") {\n    WS.db.get(\"T=\"+token).then((data:string)=>{\n      if (data == null) {\n        systemLog(\"No active session\");\n        if (action == \"checkAccess\") callback.sendFile(path.join( __dirname, '../frontend', '403.html' ));\n        else callback.end(JSON.stringify(\"NOACTIVE\"));\n        return;\n      }\n      let expiryTime = Number(data.split(\" \")[1]);\n      let tokenUser = data.split(\" \")[0];\n      systemLog(\"Logged in as \"+tokenUser+\" | Expiring in: \"+(expiryTime-Date.now()) + \" ms\");\n      if (expiryTime<Date.now()) {\n        systemLog(\"Token expired. Logged out user.\")\n        WS.db.delete(\"T=\"+token);\n        if (action == \"checkAccess\") callback.sendFile(path.join( __dirname, '../frontend', '403.html' ));\n        else callback.end(JSON.stringify(\"EXPIRE\"));\n        return;\n      }\n      WS.db.get(tokenUser+\"^PERM\").then((perms:string)=> {\n        if (action==\"add\") {\n          if (Number(perms)<2){\n            if (user == tokenUser && access == \"1\") {\n              systemLog(\"Updating password\");\n              WS.db.set(user, bcrypt.hashSync(pwd, 8));\n              callback.end(JSON.stringify(\"SUCCESS\"))\n            }\n            systemLog(\"Permissions insufficient.\")\n            callback.end(JSON.stringify(\"ACCESS\"));\n          }\n          else if (Number(access) < 3) {\n            systemLog(\"Access granted; Token not expired. Adding \"+user+\" with permissions\"+access);\n            WS.db.set(user, bcrypt.hashSync(pwd, 8));\n            WS.db.set(user+\"^PERM\", access);\n            callback.end(JSON.stringify(\"SUCCESS\"));\n          }\n          else { // attempting to add a full site administrator user - forbidden!\n            systemLog(\"Invalid access-level granting:\")\n            callback.end(JSON.stringify(\"ACCESS\"))\n          }\n        } // add\n        else if (action==\"CMD\" && perms == \"3\") {\n          var DB = WS.db;\n          systemLog(\"Evaluating \"+user);\n          try {systemLog(eval(user));} catch(e:any) {systemLog(e);};\n          callback.end(JSON.stringify(\"SUCCESS\"));\n        }\n        else if (action == \"checkAccess\") {\n          systemLog(\"Support access granted!\")\n          callback.sendFile(path.join( __dirname, '../frontend', 'support.html' ));\n        }\n        else {\n          systemLog(\"No perms!\")\n          callback.end(JSON.stringify(\"ACCESS\"));\n        }\n      }); // check permissions of token\n    });\n   return; \n  }\n  if (action==\"signup\") {\n    WS.db.list().then((keys:any)=>{\n      if (keys.indexOf(user)>=0) {\n        systemLog(user+\" was already registered\")\n        callback.end(JSON.stringify(\"TAKEN\"));\n      }\n      else {\n        systemLog(\"Registered user \"+user)\n        WS.db.set(user, bcrypt.hashSync(pwd, 8));\n        WS.db.set(user+\"^PERM\", \"1\");\n        callback.end(JSON.stringify(\"SUCCESS\"));\n      }\n    })\n    return;    \n  }\n  // check password permissions\n  WS.db.get(user).then((value:any)=>{\n    // systemLog(\"Logged password hash:\" + value)\n    if (value && bcrypt.compareSync(pwd, value)) {// pwd validated. \n      \n      WS.db.get(user+\"^PERM\").then((perm:any)=>{\n        systemLog(\"Password OK for user \"+user+\" | Perms: \"+perm)\n        callback.end(JSON.stringify(perm));  \n        let exp = perm<3?(Date.now()+1000*60*60):(Date.now()+1000*60);\n        systemLog(\"Logging user \"+user+\" with expiry \"+exp+\" (in \"+(exp-Date.now())+\" ms)\");\n       WS.db.set(\"T=\"+token, user+\" \"+exp);\n      })  \n    } // password/user not found\n    else {\n      systemLog(\"Invalid credentials.\")\n      let response = 0;\n      callback.end(JSON.stringify(response));\n    };\n    \n  }) // login\n} // account handler"],
  "mappings": "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",
  "names": []
}
