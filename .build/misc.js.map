{
  "version": 3,
  "sources": ["../misc.ts"],
  "sourcesContent": ["export function getUptimeStr(STARTTIME:number) {\n  let timeElapsed = Date.now() - STARTTIME;\n  let date = new Date(Date.now());\n  return (\n    `/me has been up since ${date.getFullYear()}-${format(date.getMonth() + 1)}-${format(date.getDate())} (It's been ${formatTime(timeElapsed)})`\n  );\n}\n\nfunction formatTime(ms:number) {\n  // 1- Convert to seconds:\n  let seconds = ms / 1000;\n  // 2- Extract hours:\n  const days = Math.floor(seconds / 3600 / 24)+1;\n  seconds = seconds % (3600 * 24);\n  const hours = Math.floor(seconds / 3600); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600; // seconds remaining after extracting hours\n  // 3- Extract minutes:\n  const minutes = Math.floor(seconds / 60); // 60 seconds in 1 minute\n  // 4- Keep only seconds not extracted to minutes:\n  seconds = Math.floor(seconds);\n  seconds = seconds % 60;\n  return (\n    days +\n    \" day\"+(days==1?\"\":\"s\")+\", \" +\n    hours +\n    \":\" +\n    (minutes < 10 ? \"0\" + minutes : minutes) +\n    \":\" +\n    (seconds < 10 ? \"0\" + seconds : seconds)\n  );\n}\n\nfunction format(n:number) {\n  return n < 10 ? \"0\" + n : n;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,aAAa,WAAkB;AAC7C,MAAI,cAAc,KAAK,IAAI,IAAI;AAC/B,MAAI,OAAO,IAAI,KAAK,KAAK,IAAI,CAAC;AAC9B,SACE,yBAAyB,KAAK,YAAY,KAAK,OAAO,KAAK,SAAS,IAAI,CAAC,KAAK,OAAO,KAAK,QAAQ,CAAC,gBAAgB,WAAW,WAAW;AAE7I;AAEA,SAAS,WAAW,IAAW;AAE7B,MAAI,UAAU,KAAK;AAEnB,QAAM,OAAO,KAAK,MAAM,UAAU,OAAO,EAAE,IAAE;AAC7C,YAAU,WAAW,OAAO;AAC5B,QAAM,QAAQ,KAAK,MAAM,UAAU,IAAI;AACvC,YAAU,UAAU;AAEpB,QAAM,UAAU,KAAK,MAAM,UAAU,EAAE;AAEvC,YAAU,KAAK,MAAM,OAAO;AAC5B,YAAU,UAAU;AACpB,SACE,OACA,UAAQ,QAAM,IAAE,KAAG,OAAK,OACxB,QACA,OACC,UAAU,KAAK,MAAM,UAAU,WAChC,OACC,UAAU,KAAK,MAAM,UAAU;AAEpC;AAEA,SAAS,OAAO,GAAU;AACxB,SAAO,IAAI,KAAK,MAAM,IAAI;AAC5B;",
  "names": []
}
