{
  "version": 3,
  "sources": ["../misc.ts"],
  "sourcesContent": ["const fs = require('fs');\nimport {DB} from './database';\n\n\nexport function getUptimeStr(STARTTIME:number=-1) {\n  if (STARTTIME < 0) {\n    let time = Number(fs.readFileSync('./runtime.txt'));\n    return formatTime(time);\n  }\n  let timeElapsed = Date.now() - STARTTIME;\n  let date = new Date(STARTTIME);\n  return (\n    `/me has been up since ${date.toUTCString()} (It's been ${formatTime(timeElapsed)})`\n  );\n}\n\nfunction formatTime(ms:number) {\n  // 1- Convert to seconds:\n  let seconds = ms / 1000;\n  // 2- Extract hours:\n  const days = Math.floor(seconds / 3600 / 24);\n  seconds = seconds % (3600 * 24);\n  const hours = Math.floor(seconds / 3600); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600; // seconds remaining after extracting hours\n  // 3- Extract minutes:\n  const minutes = Math.floor(seconds / 60); // 60 seconds in 1 minute\n  // 4- Keep only seconds not extracted to minutes:\n  seconds = Math.floor(seconds);\n  seconds = seconds % 60;\n  return (\n    (days == 0 ? \"\" : days + \" day\"+(days==1?\"\":\"s\")+\", \") +\n    format(hours) +\n    \":\" +\n    format(minutes) +\n    \":\" +\n    format(seconds)\n  );\n}\n\nfunction format(n:number) {\n  return n < 10 ? \"0\" + n : n;\n}\nlet actionQueue:string[] = []\nexport function systemLog(thing:any) {\n  // console.log(thing);\n  actionQueue.push(thing);\n  if (actionQueue.length == 1) nextEleInQueue();\n}\n\nfunction nextEleInQueue() {\n  if (actionQueue.length > 0) {\n    // console.log(\"Writing \"+actionQueue[0]);\n    DB.findOne({fieldName:\"SYSTEMLOG\"}).then((obj:{data:string}) => {\n      DB.updateOne({fieldName:\"SYSTEMLOG\"}, \n      {$set: {\n          data: obj.data+actionQueue[0].toString()+\"\\n\"\n        },\n        $currentDate: { lastModified: true }\n      })\n      .then(()=>{\n        actionQueue.shift(); nextEleInQueue()\n      })     \n    })\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAiB;AADjB,MAAM,KAAK,QAAQ,IAAI;AAIhB,SAAS,aAAa,YAAiB,IAAI;AAChD,MAAI,YAAY,GAAG;AACjB,QAAI,OAAO,OAAO,GAAG,aAAa,eAAe,CAAC;AAClD,WAAO,WAAW,IAAI;AAAA,EACxB;AACA,MAAI,cAAc,KAAK,IAAI,IAAI;AAC/B,MAAI,OAAO,IAAI,KAAK,SAAS;AAC7B,SACE,yBAAyB,KAAK,YAAY,gBAAgB,WAAW,WAAW;AAEpF;AAEA,SAAS,WAAW,IAAW;AAE7B,MAAI,UAAU,KAAK;AAEnB,QAAM,OAAO,KAAK,MAAM,UAAU,OAAO,EAAE;AAC3C,YAAU,WAAW,OAAO;AAC5B,QAAM,QAAQ,KAAK,MAAM,UAAU,IAAI;AACvC,YAAU,UAAU;AAEpB,QAAM,UAAU,KAAK,MAAM,UAAU,EAAE;AAEvC,YAAU,KAAK,MAAM,OAAO;AAC5B,YAAU,UAAU;AACpB,UACG,QAAQ,IAAI,KAAK,OAAO,UAAQ,QAAM,IAAE,KAAG,OAAK,QACjD,OAAO,KAAK,IACZ,MACA,OAAO,OAAO,IACd,MACA,OAAO,OAAO;AAElB;AAEA,SAAS,OAAO,GAAU;AACxB,SAAO,IAAI,KAAK,MAAM,IAAI;AAC5B;AACA,IAAI,cAAuB,CAAC;AACrB,SAAS,UAAU,OAAW;AAEnC,cAAY,KAAK,KAAK;AACtB,MAAI,YAAY,UAAU;AAAG,mBAAe;AAC9C;AAEA,SAAS,iBAAiB;AACxB,MAAI,YAAY,SAAS,GAAG;AAE1B,uBAAG,QAAQ,EAAC,WAAU,YAAW,CAAC,EAAE,KAAK,CAAC,QAAsB;AAC9D,yBAAG;AAAA,QAAU,EAAC,WAAU,YAAW;AAAA,QACnC;AAAA,UAAC,MAAM;AAAA,YACH,MAAM,IAAI,OAAK,YAAY,GAAG,SAAS,IAAE;AAAA,UAC3C;AAAA,UACA,cAAc,EAAE,cAAc,KAAK;AAAA,QACrC;AAAA,MAAC,EACA,KAAK,MAAI;AACR,oBAAY,MAAM;AAAG,uBAAe;AAAA,MACtC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
