{
  "version": 3,
  "sources": ["../server.ts"],
  "sourcesContent": ["const express = require('express')\nconst app = express()\nconst crypto = require(\"crypto\");\nconst parse = require(\"co-body\");\n // for generating secure random #'s\nimport {K} from './consts';\n\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser')\nconst urlencodedParser = bodyParser.urlencoded({ extended: false }) \nvar RateLimit = require('express-rate-limit');\n\nexport async function initServer() {\n  var limiter = RateLimit({\n    windowMs: 10*1000, // 10 seconds\n    max: 50,\n    message: \"Too many requests, please try again later.\",\n    statusCode: 429, // 429 status = Too Many Requests (RFC 6585)\n  });\n  app.use(limiter);\n  app.use(new cookieParser());\n  \n  app.get('/', (req:Request, res:any) => {\n    res.sendFile(K.frontendDir+'/index.html')\n  })\n\n  app.get('/login', (req:any, res:any) => {\n    res.sendFile(K.frontendDir+'/login.html');\n  });\n\n  app.get('/signup', (req:any, res:any) => {\n    res.sendFile(K.frontendDir+'/signup.html');\n  });\n\n  app.get('/config', (req:any, res:any) => {\n    res.sendFile(K.frontendDir+'/config.html');\n  });\n    \n  app.get('*/favicon.ico', (req:Request, res:any)=> {\n    res.sendFile(K.rootDir+'/favicon.ico')\n  })\n  \n  app.get('/*.js*', (req:any, res:any) => {\n    res.sendFile(K.jsDir+req.url);\n  })\n  \n  app.get('/*.ts', (req:any, res:any) => {\n    res.sendFile(K.jsDir+req.url);\n  })\n\n  app.get('/*.css', (req:any, res:any) => {\n    res.sendFile(K.frontendDir+req.url);\n  })\n\n  app.get('/*', (req:any, res:any) => {\n    res.sendFile(K.frontendDir+\"404.html\");\n  })\n  \n  \n  app.post('/server', urlencodedParser, async (req:any, res:any) => {\n    \n    var body = await parse.json(req);\n    if (!body) res.end(JSON.stringify({status:\"ERROR\", data:null}));\n    console.log(req.cookies.sessionID);\n    // let cookiematch = req.cookies.match(\"sessionID=[0-9a-zA-Z\\\\-]\");\n    makeRequest(body.action, req.cookies.sessionID, body.data, (s:string, d:any, token:string)=>{\n      res.cookie('sessionID', token, { maxAge: 1000*60*60*24*30, httpOnly: true, secure:true, sameSite:\"Strict\"});\n      console.log(d);\n      res.end(JSON.stringify({status:s, data:d}));\n    })\n  });\n  \n  app.listen(K.port, () => {\n    console.log(`BetaUtilities V2 listening on port ${K.port}`)\n  })\n}\n\nfunction makeRequest(action:string|null, token:string, data:any|null, callback: (status:string, data:any, token:string)=>any) {\n  switch (action) {\n    case 'test':\n      callback(\"SUCCESS\", {abc:\"def\", def:5}, token);\n      break;\n    case 'login': \n      // validate login-data before sending to server\n      data = data as {user:string, pass:string};\n      console.log(data);\n      validateLogin(data.user, data.pass, callback, token);\n      break;\n    case 'signup':\n      data = data as {user:string, pass:string};\n      signup(data.user, data.pass, callback, token);\n      break;\n    case 'userRequest': \n      userRequest(callback, token);\n      break;\n    default:\n      callback(\"ERROR\", {error: \"Unknown command string!\"}, token);\n  }\n  return; \n}\nconst argon2 = require('argon2');\n// https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html\n\n\nasync function validateLogin(user:string, pwd:string, callback:(status:string, data:any, token:string)=>any, token:string) {\n  let start = Date.now();\n  if (!user.match(K.userRegex)) {\n    callback(\"ERROR\", {error:\"Invalid user string!\"}, token)\n    return;\n  }\n  if (pwd.length == 0) {\n    callback(\"ERROR\", {error:\"No password provided!\"}, token)\n    return;\n  }\n  let usrInfo = await K.authDB.findOne({fieldName:\"UserData\", user:{$eq:user}}) as {pwd:string, permLevel:number};\n  if (!usrInfo) {\n    callback(\"ERROR\", {error:\"No such user!\"}, token); // keep the original token.\n    return;\n  }\n  else if (await argon2.verify(usrInfo.pwd, pwd)) {\n    let uuid = crypto.randomUUID() // gen new token\n    console.log(\"Verified in \"+(Date.now() - start)+\"ms\");\n    start = Date.now();\n    let userData:{permLevel:number} = await K.authDB.findOne({fieldName:\"UserData\", user:user});\n    await K.authDB.insertOne({fieldName:\"Token\", associatedUser:user, token:uuid, expiry: Date.now()+K.expiry[userData.permLevel]})\n    callback(\"SUCCESS\", {perms: usrInfo.permLevel}, uuid);\n    console.log(\"Completed in \"+(Date.now() - start)+\"ms\");\n    return;\n  } else {\n    callback(\"ERROR\", {error:\"Password is invalid!\"}, token);\n    return;\n  }\n}\n\nasync function signup(user:string, pwd:string, callback:(status:string, data:any, token:string)=>any, token:string) {\n  if (!user.match(K.userRegex)) {\n    callback(\"ERROR\", {error:\"Invalid user string!\"}, token)\n    return;\n  }\n  if (pwd.length == 0) {\n    callback(\"ERROR\", {error:\"No password provided!\"}, token)\n    return;\n  }\n  let usrInfo = await K.authDB.findOne({fieldName:\"UserData\", user:user}) as {pwd:string, permLevel:number};\n  if (usrInfo) {\n    callback(\"ERROR\", {error:\"User is registered\"}, token) // keep the original token.\n    return;\n  }\n  else {\n    let hash = await argon2.hash(pwd, K.hashingOptions); \n    await K.authDB.insertOne({fieldName:\"UserData\", user:user, pwd:hash, permLevel: 1});\n    validateLogin(user, pwd, callback, token);\n    return;\n  }\n}\n\nasync function userRequest(callback:(status:string, data:any, token:string)=>any, token:string) {\n  let tokenData:{associatedUser:string, expiry:number} = await K.authDB.findOne({fieldName:\"Token\", token:token});\n  if (!tokenData) {\n    callback(\"ERROR\", {error:\"Your session could not be found!\"}, token)\n    return;\n  }\n  let userData:{permLevel:number} = await K.authDB.findOne({fieldName:\"UserData\", user:tokenData.associatedUser});\n  if (Date.now() > tokenData.expiry) {\n    callback(\"ERROR\", {error:\"Your session has expired!\"}, token)\n    return;\n  }\n  callback(\"SUCCESS\", {user: tokenData.associatedUser, perms:userData.permLevel, expiry: tokenData.expiry}, token);\n}"],
  "mappings": "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",
  "names": []
}
