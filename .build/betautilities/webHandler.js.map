{
  "version": 3,
  "sources": ["../../betautilities/webHandler.ts"],
  "sourcesContent": ["const DATALOGGING = true;\n// Copyright (c) 2023 BetaOS\n// import {WebSocket} from 'ws';\nimport {uDB} from '../consts';\nimport {replyMessage} from './messageHandle';\n// import { updateActive } from './messageHandle';\nimport {systemLog} from '../logging';\nimport {supportHandler, sendMsg_B, Room, pseudoConnection} from '../supportRooms';\nconst fs = require('fs');\n\n// const { getUserInfo } = require(\"@replit/repl-auth\")\n// import {validate} from './accessControl';\n\nexport class WebH \n{\n  connection:pseudoConnection;\n  static CALLTIMEOUT = 30000;\n  nick:string;\n  displayNick:string;\n  pausedQ=false;\n  roomName:string;\n  hiddenQ: boolean;\n  pauser:string|null = null;\n  failedQ = false;\n  callTimes:number[]=[];\n  callReset:NodeJS.Timeout|null = null;\n  callStatus=-1;\n  transferOutQ = false; // is a room that one should recommend transferring out?\n  bypass = false;\n  confirmcode = -1;\n  // static db = new Database();\n  static toSendInfo(msg: string, data:any=null) {\n    if (data) return `{\"type\":\"send\", \"data\":{\"content\":\"${msg}\",\"parent\":\"${data[\"data\"][\"id\"]}\"}}`;\n    else return `{\"type\":\"send\", \"data\":{\"content\":\"${msg}\"}`;\n  }\n\n  incrRunCt() {\n    uDB.findOne({fieldName: \"COUNTERS\"}).then(\n    (obj: {runCt:number})=>{\n      uDB.updateOne({fieldName:\"COUNTERS\"}, \n        {\n          $set: {'runCt': obj.runCt+1},\n          $currentDate: { lastModified: true }\n        })\n    });\n  }\n  incrPingCt() {\n    uDB.findOne({fieldName: \"COUNTERS\"}).then(\n    (obj: {pingCt:number})=>{\n      uDB.updateOne({fieldName:\"COUNTERS\"}, \n        {\n          $set: {'pingCt': obj.pingCt+1},\n          $currentDate: { lastModified: true }\n        })\n    });\n  }\n\n  displayStats(data:any) {\n    uDB.findOne({fieldName: \"COUNTERS\"}).then(\n      (obj: {runCt:number, pingCt: number}) => {\n        this.delaySendMsg(\"Run count: \"+obj.runCt+\"\\\\nPing count: \"+obj.pingCt, data, 0);\n    });\n  }\n\n  bumpCallReset(data:any)\n  {\n    if (this.callReset) \n      clearTimeout(this.callReset);\n    this.callReset = setTimeout(() => {\n      this.resetCall(data); \n    }, WebH.CALLTIMEOUT);\n  }\n\n  clearCallReset() {\n    if (this.callReset) clearTimeout(this.callReset);\n    this.callStatus=-1;\n  }\n\n  resetCall(this:WebH, data:any) {\n    if (this.callStatus >= 0) {\n      this.sendMsg(\"[CALLEND] Disconnected from BetaOS Services\", data);\n    }\n    this.callStatus= -1;\n  }\n\n  replyMessage(msg:string, sender:string, data:any):string\n  {\n    return \"\";\n  };\n\n  delaySendMsg(msg:string, data:any, delay:number) {\n    if (delay == 0) this.sendMsg(msg, data) // instant send\n    else {\n      setTimeout(()=>{\n      this.sendMsg(msg, data)}, delay);\n    }\n    this.incrRunCt();\n  }\n\n  sendMsg(msg:string, user:string) {\n    if (msg.length==0) return;\n    sendMsg_B(msg, this.roomName);\n    this.incrRunCt();\n  }\n  \n  onOpen() {\n    systemLog(\"BetaUtilities open\");\n    WebH.resetTime =1000;\n  }\n\n  initNick() {\n    // if (!this.setNickQ) this.changeNick(this.nick)\n    // this.setNickQ = true;\n  }\n\n  changeNick(nick:string) {\n    this.displayNick=nick;\n    console.log(\"nick changed to\",nick)\n    // this.socket.send(`{\"type\": \"nick\", \"data\": {\"name\": \"${nick}\"},\"id\": \"1\"}`);\n  }\n\n  onMessage(msg:string, snd:string) {\n      let data = \"\"\n      if (DATALOGGING) fs.writeFileSync('betautilities/msgLog.txt', fs.readFileSync('betautilities/msgLog.txt').toString()+((`(${this.roomName})[${snd}] ${msg}\\n`)));\n      msg = msg.toLowerCase().replaceAll(/(\\s|^)((@betaos)|(@betautilities)|(@system))(\\s|$)/gimu, \" @\"+this.nick.toLowerCase()+\" \").trim()\n      // Required methods\n      // !kill\n      // console.log(\"received\" +msg);\n      if (msg == \"!kill @\" + this.nick.toLowerCase()) {\n        this.sendMsg(\"/me crashes\", data);\n        this.delaySendMsg(\"/me restarts\", data, 200);\n      }\n        \n      // !restore\n      else if (this.pausedQ && msg == \"!restore @\" + this.nick.toLowerCase()) {\n        this.sendMsg(\"/me has been unpaused\", data);   \n        // if (!this.hiddenQ) updateActive(this.roomName, true);\n        this.pauser = null;\n        this.callTimes = [];\n        this.pausedQ = false;\n      } \n        \n      // !pause\n      else if (msg == \"!pause @\" + this.nick.toLowerCase()) {\n        this.sendMsg(\"/me has been paused\", data)\n        // if (!this.hiddenQ) updateActive(this.roomName, false);\n        let reply = \"Enter !kill @\"+this.nick+\" to kill this bot, \"+\n          \"or enter !restore @\"+this.nick+\" to restore it.\";\n        this.sendMsg(reply, data);\n        this.pauser = snd;\n        this.pausedQ = true;\n      } \n      // check paused and pings\n      else if (this.pausedQ &&\n        (msg.match(\"!ping @\" + this.nick.toLowerCase()) ||\n         msg.match(\"!help @\" + this.nick.toLowerCase()))) \n      {\n        this.sendMsg(\"/me has been paused by @\"+this.pauser, data);\n        return;\n      } \n      // general unpaused ping\n      else if (msg == \"!ping\") {\n        this.sendMsg(\"Pong!\", data)\n        this.incrPingCt();\n      } \n\n      // self-specific unpaused ping\n      else if (msg.match(\"!ping @\" + this.nick.toLowerCase() + \"$\")) {\n        this.sendMsg(\":white_check_mark: BetaOS services ONLINE\", data)\n        this.incrPingCt();\n      }\n        \n      // general unpaused help\n      else if (msg == \"!help\"){\n        this.sendMsg(\"Enter !help @\"+this.nick+\" for help!\", data);\n      } \n\n      // send to messageHandle to process messages.\n      else if (!this.pausedQ) {\n        let outStr = this.replyMessage(msg.trim(), snd, data);\n        if (this.failedQ && outStr != \"\") outStr = \"/me is rebooting.\"\n        if (outStr == \"\") return;\n        if (!this.bypass) {\n          this.callTimes.push(Date.now());\n          setTimeout(() => {this.callTimes.shift();}, 60*5*1000) // five minutes.\n        }\n        if (!this.bypass && this.callTimes.length >= 5) {\n          // if (i == 2)\n            if (this.callTimes.length < 10) {\n              outStr = this.transferOutQ?outStr+\"\\\\n[ANTISPAM] Consider moving to &bots or &test for large-scale testing. Thank you for your understanding.\"\n                : outStr+\" [ANTISPAM WARNING]\";\n            } else {\n              outStr = outStr+\"\\\\n[ANTISPAM] Automatically paused @\"+this.nick;\n              this.pausedQ = true;\n              this.pauser = \"BetaOS_ANTISPAM\";\n              this.resetCall(data);\n            }\n        }\n        this.sendMsg(outStr, data);\n      }\n  }\n\n  errorSocket() {\n    this.pausedQ = false;\n    this.pauser = null;\n    this.changeNick(this.nick + \"[Error]\")\n    this.incrRunCt();\n    this.failedQ = true;\n    setTimeout(() => {\n      this.changeNick(this.nick)\n      this.incrRunCt();\n      // supportHandler.createRoom(this.hiddenQ?\"HIDDEN_SUPPORT\":\"ONLINE_SUPPORT\", this.roomName);\n      this.failedQ = false;\n    }, 5000);\n    // supportHandler.deleteRoom(this.hiddenQ?\"HIDDEN_SUPPORT\":\"ONLINE_SUPPORT\", this.roomName);\n  } // socketclose\n\n  static resetTime = 1000;\n  onClose(event:any) {\n    systemLog(\"Closed\");\n  }\n\n  \n  constructor(roomName: string, hiddenQ = false) {\n    this.nick = \"BetaOS_System\";\n    this.displayNick=\"BetaOS_System\";\n    this.replyMessage = (msg:string, sender:string, data:any) => {\n      // if (filter.clean(msg)!= msg) return \"Stop that. \"\n      return replyMessage(this, msg, sender, data)\n    };\n    this.hiddenQ = hiddenQ;\n    if (roomName.length > 21) return;\n    this.roomName = roomName;\n    supportHandler.addRoom(new Room(hiddenQ?\"HIDDEN_SUPPORT\":\"ONLINE_SUPPORT\", this.roomName, this.replyMessage, this));\n    supportHandler.addConnection(new pseudoConnection(), roomName, \"[SYSINTERNAL]\", true);\n  }\n}\n\n// var Filter = require('bad-words'),filter = new Filter();"],
  "mappings": "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",
  "names": []
}
