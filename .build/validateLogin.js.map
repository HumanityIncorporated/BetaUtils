{
  "version": 3,
  "sources": ["../validateLogin.ts"],
  "sourcesContent": ["const argon2 = require('argon2');\nimport {K} from './consts';\nconst crypto = require(\"crypto\");\n\nexport async function validateLogin(user:string, pwd:string, callback:(status:string, data:any, token:string)=>any, token:string) {\n  if (!user.match(K.userRegex)) {\n    callback(\"ERROR\", {error:\"Invalid user string!\"}, token)\n    return;\n  }\n  if (pwd.length == 0) {\n    callback(\"ERROR\", {error:\"No password provided!\"}, token)\n    return;\n  }\n  let usrInfo = await K.authDB.findOne({fieldName:\"UserData\", user:{$eq:user}}) as {pwd:string, permLevel:number};\n  if (!usrInfo) {\n    callback(\"ERROR\", {error:\"No such user!\"}, token); // keep the original token.\n    return;\n  }\n  else if (await argon2.verify(usrInfo.pwd, pwd)) {\n    let uuid = crypto.randomUUID() // gen new token\n    let userData:{permLevel:number} = await K.authDB.findOne({fieldName:\"UserData\", user:user});\n    await K.authDB.insertOne({fieldName:\"Token\", associatedUser:user, token:uuid, expiry: Date.now()+K.expiry[userData.permLevel]})\n    callback(\"SUCCESS\", {perms: usrInfo.permLevel}, uuid);\n    return;\n  } else {\n    callback(\"ERROR\", {error:\"Password is invalid!\"}, token);\n    return;\n  }\n}\n\nexport async function signup(user:string, pwd:string, callback:(status:string, data:any, token:string)=>any, token:string) {\n  if (!user.match(K.userRegex)) {\n    callback(\"ERROR\", {error:\"Invalid user string!\"}, token)\n    return;\n  }\n  if (pwd.length == 0) {\n    callback(\"ERROR\", {error:\"No password provided!\"}, token)\n    return;\n  }\n  let usrInfo = await K.authDB.findOne({fieldName:\"UserData\", user:user}) as {pwd:string, permLevel:number};\n  if (usrInfo) {\n    callback(\"ERROR\", {error:\"User is registered\"}, token) // keep the original token.\n    return;\n  }\n  else {\n    let hash = await argon2.hash(pwd, K.hashingOptions); \n    await K.authDB.insertOne({fieldName:\"UserData\", user:user, pwd:hash, permLevel: 1});\n    validateLogin(user, pwd, callback, token);\n    return;\n  }\n}\n\nexport async function logout(callback:(status:string, data:any, token:string)=>any, token:string) {\n  await K.authDB.deleteOne({fieldName:\"Token\", token:token});\n  callback(\"SUCCESS\", null, \"\");\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAgB;AADhB,MAAM,SAAS,QAAQ,QAAQ;AAE/B,MAAM,SAAS,QAAQ,QAAQ;AAE/B,eAAsB,cAAc,MAAa,KAAY,UAAuD,OAAc;AAChI,MAAI,CAAC,KAAK,MAAM,gBAAE,SAAS,GAAG;AAC5B,aAAS,SAAS,EAAC,OAAM,uBAAsB,GAAG,KAAK;AACvD;AAAA,EACF;AACA,MAAI,IAAI,UAAU,GAAG;AACnB,aAAS,SAAS,EAAC,OAAM,wBAAuB,GAAG,KAAK;AACxD;AAAA,EACF;AACA,MAAI,UAAU,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,MAAK,EAAC,KAAI,KAAI,EAAC,CAAC;AAC5E,MAAI,CAAC,SAAS;AACZ,aAAS,SAAS,EAAC,OAAM,gBAAe,GAAG,KAAK;AAChD;AAAA,EACF,WACS,MAAM,OAAO,OAAO,QAAQ,KAAK,GAAG,GAAG;AAC9C,QAAI,OAAO,OAAO,WAAW;AAC7B,QAAI,WAA8B,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,KAAS,CAAC;AAC1F,UAAM,gBAAE,OAAO,UAAU,EAAC,WAAU,SAAS,gBAAe,MAAM,OAAM,MAAM,QAAQ,KAAK,IAAI,IAAE,gBAAE,OAAO,SAAS,WAAU,CAAC;AAC9H,aAAS,WAAW,EAAC,OAAO,QAAQ,UAAS,GAAG,IAAI;AACpD;AAAA,EACF,OAAO;AACL,aAAS,SAAS,EAAC,OAAM,uBAAsB,GAAG,KAAK;AACvD;AAAA,EACF;AACF;AAEA,eAAsB,OAAO,MAAa,KAAY,UAAuD,OAAc;AACzH,MAAI,CAAC,KAAK,MAAM,gBAAE,SAAS,GAAG;AAC5B,aAAS,SAAS,EAAC,OAAM,uBAAsB,GAAG,KAAK;AACvD;AAAA,EACF;AACA,MAAI,IAAI,UAAU,GAAG;AACnB,aAAS,SAAS,EAAC,OAAM,wBAAuB,GAAG,KAAK;AACxD;AAAA,EACF;AACA,MAAI,UAAU,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,KAAS,CAAC;AACtE,MAAI,SAAS;AACX,aAAS,SAAS,EAAC,OAAM,qBAAoB,GAAG,KAAK;AACrD;AAAA,EACF,OACK;AACH,QAAI,OAAO,MAAM,OAAO,KAAK,KAAK,gBAAE,cAAc;AAClD,UAAM,gBAAE,OAAO,UAAU,EAAC,WAAU,YAAY,MAAW,KAAI,MAAM,WAAW,EAAC,CAAC;AAClF,kBAAc,MAAM,KAAK,UAAU,KAAK;AACxC;AAAA,EACF;AACF;AAEA,eAAsB,OAAO,UAAuD,OAAc;AAChG,QAAM,gBAAE,OAAO,UAAU,EAAC,WAAU,SAAS,MAAW,CAAC;AACzD,WAAS,WAAW,MAAM,EAAE;AAC9B;",
  "names": []
}
