{
  "version": 3,
  "sources": ["../logging.ts"],
  "sourcesContent": ["import {uDB} from './consts';\nimport {userRequest} from './userRequest';\n\nexport function systemLog(thing:string) {log(thing)};\nexport function log(thing:string) {\n  // let out:any;\n  // if (thing && typeof thing != \"number\" && typeof thing != \"string\") out = JSON.stringify(thing);\n  // else out = thing;\n  \n  uDB.insertOne({fieldName:\"SysLogV2\", data:thing+\"\\n\"});\n}\n\n\nexport async function incrRequests() {\n  uDB.updateOne({fieldName:\"VISITS\"}, {$inc:{visitCt:1}}, {upsert:true});\n}\n\nexport async function visitCt(token:string) {\n  let obj = await uDB.findOne({fieldName:\"VISITS\"});\n  return {status:\"SUCCESS\", data:{data:obj.visitCt}, token:token};\n}\n\nexport async function getLogs(token:string) {\n  let userData = await userRequest(token);\n  if (userData.status != \"SUCCESS\" || userData.data.perms<2) {\n    return {status:\"ERROR\", data:{error:userData.data.error??\"Insufficient permissions\"}, token:userData.token};\n  } \n  let out = \"\";\n  let logs = await uDB.find({fieldName:\"SysLogV2\"}).toArray();\n  for (let i=0; i<logs.length; i++) {\n    out += logs[i].data;\n  }\n  return {status:\"SUCCESS\", data:out, token:token};\n}\n\nexport async function purgeLogs(token:string) {\n  let userData = await userRequest(token);\n  if (userData.status != \"SUCCESS\" || userData.data.perms<2) {\n    return {status:\"ERROR\", data:{error:userData.data.error??\"Insufficient permissions\"}, token:userData.token};\n  } \n  await uDB.deleteMany({fieldName:\"SysLogV2\"});\n  return {status:\"SUCCESS\", data:null, token:token};\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAkB;AAClB,yBAA0B;AAEnB,SAAS,UAAU,OAAc;AAAC,MAAI,KAAK;AAAC;AAAC;AAC7C,SAAS,IAAI,OAAc;AAKhC,oBAAI,UAAU,EAAC,WAAU,YAAY,MAAK,QAAM,KAAI,CAAC;AACvD;AAGA,eAAsB,eAAe;AACnC,oBAAI,UAAU,EAAC,WAAU,SAAQ,GAAG,EAAC,MAAK,EAAC,SAAQ,EAAC,EAAC,GAAG,EAAC,QAAO,KAAI,CAAC;AACvE;AAEA,eAAsB,QAAQ,OAAc;AAC1C,MAAI,MAAM,MAAM,kBAAI,QAAQ,EAAC,WAAU,SAAQ,CAAC;AAChD,SAAO,EAAC,QAAO,WAAW,MAAK,EAAC,MAAK,IAAI,QAAO,GAAG,MAAW;AAChE;AAEA,eAAsB,QAAQ,OAAc;AAC1C,MAAI,WAAW,UAAM,gCAAY,KAAK;AACtC,MAAI,SAAS,UAAU,aAAa,SAAS,KAAK,QAAM,GAAG;AACzD,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,SAAS,KAAK,SAAO,2BAA0B,GAAG,OAAM,SAAS,MAAK;AAAA,EAC5G;AACA,MAAI,MAAM;AACV,MAAI,OAAO,MAAM,kBAAI,KAAK,EAAC,WAAU,WAAU,CAAC,EAAE,QAAQ;AAC1D,WAAS,IAAE,GAAG,IAAE,KAAK,QAAQ,KAAK;AAChC,WAAO,KAAK,GAAG;AAAA,EACjB;AACA,SAAO,EAAC,QAAO,WAAW,MAAK,KAAK,MAAW;AACjD;AAEA,eAAsB,UAAU,OAAc;AAC5C,MAAI,WAAW,UAAM,gCAAY,KAAK;AACtC,MAAI,SAAS,UAAU,aAAa,SAAS,KAAK,QAAM,GAAG;AACzD,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,SAAS,KAAK,SAAO,2BAA0B,GAAG,OAAM,SAAS,MAAK;AAAA,EAC5G;AACA,QAAM,kBAAI,WAAW,EAAC,WAAU,WAAU,CAAC;AAC3C,SAAO,EAAC,QAAO,WAAW,MAAK,MAAM,MAAW;AAClD;",
  "names": []
}
