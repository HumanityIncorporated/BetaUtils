{
  "version": 3,
  "sources": ["../updateUser.ts"],
  "sourcesContent": ["import {K} from './consts';\nconst argon2 = require('argon2');\n\nexport async function updateUser(user:string, oldPass:string, newPass:string, newPermLevel:number, token:string) {\n  if (!user.match(K.userRegex)) {\n    return {status:\"ERROR\", data:{error:\"Invalid user string!\"}, token:token}\n  }\n  if (newPass.length == 0) {\n    return {status:\"ERROR\", data:{error:\"No password provided!\"}, token:token}\n  }\n  let tokenData:{associatedUser:string, expiry:number} = await K.authDB.findOne({fieldName:\"Token\", token:token});\n  if (!tokenData) {\n    return {status:\"ERROR\", data:{error:\"Cannot update user information: Your session could not be found!\"}, token:\"\"}\n  }\n  let userData:{permLevel:number, pwd:string} = await K.authDB.findOne({fieldName:\"UserData\", user:tokenData.associatedUser});\n  if (Date.now() > tokenData.expiry) {\n    return {status:\"ERROR\", data:{error:\"Cannot update user information: Your session has expired!\"}, token:\"\"};\n  }\n  let newUserData = await K.authDB.findOne({fieldName:\"UserData\", user:user});\n  if (userData.permLevel >=2 && \n      (!newUserData || newUserData.permLevel< userData.permLevel)\n     && newPermLevel < userData.permLevel) {\n    // administrators can update other accounts but not other admins\n    await K.authDB.updateOne({fieldName:\"UserData\", user:user}, \n        {$set:{pwd:await argon2.hash(newPass, K.hashingOptions), permLevel:newPermLevel}}, {upsert:true});\n    return {status:\"SUCCESS\", data:{perms: newPermLevel}, token:token};\n  }\n  else if (await argon2.verify(userData.pwd, oldPass)) { \n    // unless you have their password, I suppose. but you can't provide that without editing the headers.\n    await K.authDB.updateOne({fieldName:\"UserData\", user:tokenData.associatedUser}, \n        {$set:{pwd:await argon2.hash(newPass, K.hashingOptions)}});\n    return {status:\"SUCCESS\", data:{perms:userData.permLevel}, token: token};\n  } else {\n    return {status: \"ERROR\", data:{error:\"Cannot update user information: Access denied!\"}, token:token};\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgB;AAChB,MAAM,SAAS,QAAQ,QAAQ;AAE/B,eAAsB,WAAW,MAAa,SAAgB,SAAgB,cAAqB,OAAc;AAC/G,MAAI,CAAC,KAAK,MAAM,gBAAE,SAAS,GAAG;AAC5B,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,uBAAsB,GAAG,MAAW;AAAA,EAC1E;AACA,MAAI,QAAQ,UAAU,GAAG;AACvB,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,wBAAuB,GAAG,MAAW;AAAA,EAC3E;AACA,MAAI,YAAmD,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,SAAS,MAAW,CAAC;AAC9G,MAAI,CAAC,WAAW;AACd,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,mEAAkE,GAAG,OAAM,GAAE;AAAA,EACnH;AACA,MAAI,WAA0C,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,MAAK,UAAU,eAAc,CAAC;AAC1H,MAAI,KAAK,IAAI,IAAI,UAAU,QAAQ;AACjC,WAAO,EAAC,QAAO,SAAS,MAAK,EAAC,OAAM,4DAA2D,GAAG,OAAM,GAAE;AAAA,EAC5G;AACA,MAAI,cAAc,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,KAAS,CAAC;AAC1E,MAAI,SAAS,aAAY,MACpB,CAAC,eAAe,YAAY,YAAW,SAAS,cAC/C,eAAe,SAAS,WAAW;AAEvC,UAAM,gBAAE,OAAO;AAAA,MAAU,EAAC,WAAU,YAAY,KAAS;AAAA,MACrD,EAAC,MAAK,EAAC,KAAI,MAAM,OAAO,KAAK,SAAS,gBAAE,cAAc,GAAG,WAAU,aAAY,EAAC;AAAA,MAAG,EAAC,QAAO,KAAI;AAAA,IAAC;AACpG,WAAO,EAAC,QAAO,WAAW,MAAK,EAAC,OAAO,aAAY,GAAG,MAAW;AAAA,EACnE,WACS,MAAM,OAAO,OAAO,SAAS,KAAK,OAAO,GAAG;AAEnD,UAAM,gBAAE,OAAO;AAAA,MAAU,EAAC,WAAU,YAAY,MAAK,UAAU,eAAc;AAAA,MACzE,EAAC,MAAK,EAAC,KAAI,MAAM,OAAO,KAAK,SAAS,gBAAE,cAAc,EAAC,EAAC;AAAA,IAAC;AAC7D,WAAO,EAAC,QAAO,WAAW,MAAK,EAAC,OAAM,SAAS,UAAS,GAAG,MAAY;AAAA,EACzE,OAAO;AACL,WAAO,EAAC,QAAQ,SAAS,MAAK,EAAC,OAAM,iDAAgD,GAAG,MAAW;AAAA,EACrG;AACF;",
  "names": []
}
