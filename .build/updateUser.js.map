{
  "version": 3,
  "sources": ["../updateUser.ts"],
  "sourcesContent": ["import {K} from './consts';\nconst argon2 = require('argon2');\n\nexport async function updateUser(user:string, oldPass:string, newPass:string, newPermLevel:number, callback:(status:string, data:any, token:string)=>any, token:string) {\n  if (!user.match(K.userRegex)) {\n    callback(\"ERROR\", {error:\"Invalid user string!\"}, token)\n    return;\n  }\n  if (newPass.length == 0) {\n    callback(\"ERROR\", {error:\"No password provided!\"}, token)\n    return;\n  }\n  let tokenData:{associatedUser:string, expiry:number} = await K.authDB.findOne({fieldName:\"Token\", token:token});\n  if (!tokenData) {\n    callback(\"ERROR\", {error:\"Cannot update user information: Your session could not be found!\"}, \"\")\n    return;\n  }\n  let userData:{permLevel:number, pwd:string} = await K.authDB.findOne({fieldName:\"UserData\", user:tokenData.associatedUser});\n  if (Date.now() > tokenData.expiry) {\n    callback(\"ERROR\", {error:\"Cannot update user information: Your session has expired!\"}, \"\")\n    return;\n  }\n  let newUserData = await K.authDB.findOne({fieldName:\"UserData\", user:user});\n  if (userData.permLevel >=2 && (!newUserData || newUserData.permLevel< userData.permLevel)) {\n    // administrators can update other accounts but not other admins\n    await K.authDB.updateOne({fieldName:\"UserData\", user:user}, \n        {$set:{pwd:await argon2.hash(newPass, K.hashingOptions), permLevel:newPermLevel}}, {upsert:true});\n    callback(\"SUCCESS\", {perms: newPermLevel}, token);\n    return;\n  }\n  else if (await argon2.verify(userData.pwd, oldPass)) { // unless you have their password, I suppose.\n    await K.authDB.updateOne({fieldName:\"UserData\", user:tokenData.associatedUser}, \n        {$set:{pwd:await argon2.hash(newPass, K.hashingOptions)}});\n    callback(\"SUCCESS\",{perms:userData.permLevel}, token);\n    return;\n  } else {\n    callback(\"ERROR\", {error:\"Cannot update user information: Access denied!\"}, token);\n    return;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgB;AAChB,MAAM,SAAS,QAAQ,QAAQ;AAE/B,eAAsB,WAAW,MAAa,SAAgB,SAAgB,cAAqB,UAAuD,OAAc;AACtK,MAAI,CAAC,KAAK,MAAM,gBAAE,SAAS,GAAG;AAC5B,aAAS,SAAS,EAAC,OAAM,uBAAsB,GAAG,KAAK;AACvD;AAAA,EACF;AACA,MAAI,QAAQ,UAAU,GAAG;AACvB,aAAS,SAAS,EAAC,OAAM,wBAAuB,GAAG,KAAK;AACxD;AAAA,EACF;AACA,MAAI,YAAmD,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,SAAS,MAAW,CAAC;AAC9G,MAAI,CAAC,WAAW;AACd,aAAS,SAAS,EAAC,OAAM,mEAAkE,GAAG,EAAE;AAChG;AAAA,EACF;AACA,MAAI,WAA0C,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,MAAK,UAAU,eAAc,CAAC;AAC1H,MAAI,KAAK,IAAI,IAAI,UAAU,QAAQ;AACjC,aAAS,SAAS,EAAC,OAAM,4DAA2D,GAAG,EAAE;AACzF;AAAA,EACF;AACA,MAAI,cAAc,MAAM,gBAAE,OAAO,QAAQ,EAAC,WAAU,YAAY,KAAS,CAAC;AAC1E,MAAI,SAAS,aAAY,MAAM,CAAC,eAAe,YAAY,YAAW,SAAS,YAAY;AAEzF,UAAM,gBAAE,OAAO;AAAA,MAAU,EAAC,WAAU,YAAY,KAAS;AAAA,MACrD,EAAC,MAAK,EAAC,KAAI,MAAM,OAAO,KAAK,SAAS,gBAAE,cAAc,GAAG,WAAU,aAAY,EAAC;AAAA,MAAG,EAAC,QAAO,KAAI;AAAA,IAAC;AACpG,aAAS,WAAW,EAAC,OAAO,aAAY,GAAG,KAAK;AAChD;AAAA,EACF,WACS,MAAM,OAAO,OAAO,SAAS,KAAK,OAAO,GAAG;AACnD,UAAM,gBAAE,OAAO;AAAA,MAAU,EAAC,WAAU,YAAY,MAAK,UAAU,eAAc;AAAA,MACzE,EAAC,MAAK,EAAC,KAAI,MAAM,OAAO,KAAK,SAAS,gBAAE,cAAc,EAAC,EAAC;AAAA,IAAC;AAC7D,aAAS,WAAU,EAAC,OAAM,SAAS,UAAS,GAAG,KAAK;AACpD;AAAA,EACF,OAAO;AACL,aAAS,SAAS,EAAC,OAAM,iDAAgD,GAAG,KAAK;AACjF;AAAA,EACF;AACF;",
  "names": []
}
