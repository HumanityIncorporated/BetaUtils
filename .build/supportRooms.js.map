{
  "version": 3,
  "sources": ["../supportRooms.ts"],
  "sourcesContent": ["import { userRequest } from './userRequest';\nimport { msgDB, authDB, uDB, roomRegex } from './consts';\nimport { log } from './logging'\n// import { minID } from './database';\nimport {WebSocket} from 'ws';\nimport {realias} from './updateUser';\nimport { WebH } from './betautilities/webHandler';\nconst cookie = require('cookie');\nexport class Room {\n  type: string;\n  name: string;\n  handler: WebH | null;\n  constructor(type: string, name: string, handler: WebH | null = null) {\n    // console.log(handler);\n    this.type = type;\n    this.name = name;\n    this.handler = handler;\n  };\n}\n\nexport class BridgeSocket \n{\n  euphSocket: WebSocket;\n  client: WebSocket;\n  token:string;\n  roomName:string;\n  setNick:boolean = false;\n  onOpen() {\n    // console.log(\"bridgeSocket was opened\")\n    this.client.send(JSON.stringify({action:\"RELOAD\"}));\n    this.setNick = false;\n  }\n\n  loadLogs(before:string) {\n    // let usrData = await userRequeest(token);\n    this.euphSocket.send(JSON.stringify({type:\"log\", data:{n:100, before:before}}))\n    // this.client.send(JSON.stringify({\n      // action:\"yourAlias\",\n      // data:{alias:usrData.data.alias}\n    // }))\n  }\n\n  sendMsg(room:string, parent:string, content:string) {\n    this.euphSocket.send(JSON.stringify({\n      type:\"send\", \n      id:parent==\"-1\"?\"requiresAutoThreading\":null, \n      data:{\n        content:content, \n        parent:(parent==\"-1\"?null:parent)\n      }\n    }))\n  }\n  \n  async onMessage(msg:string) {\n    let dat = JSON.parse(msg);\n    // console.log(dat);\n    let usrData = await userRequest(this.token);\n    if (usrData.status != \"SUCCESS\") usrData = {data:{alias:\"AnonymousBridgeUser\", perms:0}};\n    if (!this.setNick) {\n      this.setNick = true;\n      this.euphSocket.send(JSON.stringify({\n        type:\"nick\",\n        data:{name:usrData.data.alias}\n      }))\n    }\n    switch(dat.type) {\n      case \"ping-event\":\n        this.euphSocket.send(JSON.stringify({type:\"ping-reply\", data:{time:dat.data.time}}));\n        break;\n      case \"snapshot-event\":\n        for (let i=0; i<dat.data.listing.length; i++) {\n          // console.log(dat.data.log[i]);\n          if (!dat.data.listing[i].name) continue;\n          this.client.send(JSON.stringify({action:\"addUser\", data:{\n            user:dat.data.listing[i].name, \n            isBot:dat.data.listing[i].id.match(/^bot:/)!=null}\n          }));\n        }\n        for (let i=0; i<dat.data.log.length; i++) {\n          this.client.send(JSON.stringify({\n            action:\"msg\",\n            data:{\n              id:dat.data.log[i].id,\n              parent:dat.data.log[i].parent,\n              sender:dat.data.log[i].sender.name,\n              time:dat.data.log[i].time,\n              perms: usrData.data.perms,\n              content:dat.data.log[i].content,\n            }\n          }))\n        }\n        break;\n      case \"log-reply\":\n        // console.log(dat);\n        dat.data.log.sort((a:{time:number}, b:{time:number})=>{return b.time-a.time;});\n        for (let i=0; i<dat.data.log.length; i++) \n        {\n          // console.log(dat.data.log[i].time);\n          this.client.send(JSON.stringify({\n            action:\"msg\",\n            data:{\n              id:\"-\"+dat.data.log[i].id,\n              parent:dat.data.log[i].parent,\n              sender:dat.data.log[i].sender.name,\n              time:dat.data.log[i].time,\n              perms: usrData.data.perms,\n              content:dat.data.log[i].content,\n            }\n          }));\n        }\n        this.client.send(JSON.stringify({\n          action:\"LOADCOMPLETE\", \n          data:{\n            id:dat.data.log.length<100?\"-1\":\"randomthing\"\n          }\n        }));\n        break;\n      case \"send-event\":\n      case \"send-reply\":\n        this.client.send(JSON.stringify({\n          action:\"msg\",\n          data:{\n            id:dat.data.id,\n            parent:dat.data.parent,\n            sender:dat.data.sender.name,\n            time:dat.data.time,\n            recentQ:Date.now() - dat.data.time < 60000,\n            perms: usrData.data.perms,\n            content:dat.data.content,\n          }\n        }));\n        if (dat.id == \"requiresAutoThreading\") {\n          this.client.send(JSON.stringify({\n            action:\"autoThreading\",\n            data:{id:dat.data.id}\n          }));\n        }\n        break;\n      case \"nick-event\":\n      // case \"nick-reply\":\n        // console.log(data.data);\n        this.client.send(JSON.stringify({\n          action:\"removeUser\",\n          data:{\n            isBot:dat.data.id.match(/^bot:/)!=null,\n            user:dat.data.from\n          }\n        }))\n        this.client.send(JSON.stringify({\n          action:\"addUser\",\n          data:{\n            user:dat.data.to,\n            isBot:dat.data.id.match(/^bot:/)!=null\n          }\n        }))\n        // this.client.send(JSON.stringify({\n        //   action:\"yourAlias\",\n        //   data:{alias:usrData.data.alias}\n        // }))\n        break;\n      case \"hello-event\":\n        // console.log(req);\n        if (dat.data.session.id.match(/^bot:/)) {\n          // don't do this perhaps\n          // this.euphSocket.send(JSON.stringify({\n          //   type:\"login\",\n          //   data:{\n          //     namespace:\"email\",\n          //     id:process.env[\"euphEmail\"],\n          //     password:process.env[\"euphPassword\"]\n          //   }\n          // }));\n        }\n        this.client.send(JSON.stringify({\n          action:\"addUser\",\n          data:{\n            user:usrData.data.alias,\n            isBot:dat.data.session.id.match(/^bot:/)!=null\n          }\n        }))\n        this.client.send(JSON.stringify({\n          action:\"yourAlias\",\n          data:{alias:usrData.data.alias}\n        }))\n        break;\n      case \"disconnect-event\":\n        // const cookies = \n        break;\n        this.euphSocket= new WebSocket(\"wss://euphoria.leet.nu/room/\"+this.roomName+\"/ws\",\n           [],\n           {\n             finishRequest:(request:any)=>{\n               request.addEventListener('response', (res)=>{\n                 console.log(res);\n               })\n               request.end();\n             }\n           });\n        //   [],\n        //   {\n        //     'headers': {'Cookie': cookie.serialize('a', '496E66DD')}\n        //   });\n        \n        this.euphSocket.on('open', this.onOpen.bind(this));\n        this.euphSocket.on('message', this.onMessage.bind(this));\n        // this.client.on('close', this.onClientClose.bind(this));\n        this.euphSocket.on('error', (e:any)=>{this.euphSocket.close(1000, \"\");})\n      case \"login-reply\":\n        // console.log(dat);\n        break;\n      case \"join-event\":\n        this.client.send(JSON.stringify({\n          action:\"addUser\",\n          data:{\n            user:dat.data.name,\n            isBot:dat.data.id.match(/^bot:/)!=null\n          }\n        }))\n        break;\n      case \"part-event\":\n        this.client.send(JSON.stringify({\n          action:\"removeUser\",\n          data:{\n            user:dat.data.name,\n            isBot:dat.data.id.match(/^bot:/)!=null\n          }\n        }));\n        break;\n      default: \n        console.log(\"unknown event\", dat.type)\n        // scream.\n        // console.log(dat);\n    }\n  }\n\n  async updateAlias(alias:string, token:string) {\n    if (alias.length == 0 || alias.length > 36) return;\n    let usrData = await userRequest(token);\n    let updateAliasRes = await realias(alias, token);\n    this.euphSocket.send(JSON.stringify({\n      type:\"nick\",\n      data:{name:alias}\n    }));\n  \n    // console.log(\"here we are\");\n    // if (updateAliasRes.status != \"SUCCESS\") {\n      // return;\n    // }\n    // screw it, we realias it anyways!\n    // console.log(\"alias update was a success\");\n    this.client.send(JSON.stringify({\n      action:\"removeUser\",\n      data:{\n        user:usrData.data.alias,\n        isBot:true\n      }\n    }));\n    this.client.send(JSON.stringify({\n      action:\"addUser\",\n      data:{\n        user:alias,\n        isBot:true\n      }\n    }))\n    this.client.send(JSON.stringify({\n      action:\"yourAlias\",\n      data:{alias:alias}\n    }))\n    // return {status:\"SUCCESS\", data:null, token:token};\n  }\n\n  onClientClose() {\n    console.log(\"Client in room \"+this.roomName+\" was closed\");\n    this.euphSocket.close(1000, \"\");\n  }\n  constructor(roomName:string, socket:WebSocket, token:string) \n  {\n    console.log(\"Client in room\",roomName,\"was opened\");\n    this.roomName = roomName;\n    this.client = socket;\n    this.token=token;\n    let URL = \"wss://euphoria.leet.nu/room/\"+roomName+\"/ws\";\n    this.euphSocket = new WebSocket(URL);\n    this.euphSocket.on('open', this.onOpen.bind(this));\n    this.euphSocket.on('message', this.onMessage.bind(this));\n    // this.client.on('close', this.onClientClose.bind(this));\n    this.euphSocket.on('error', (e:any)=>{\n      console.log(\"Error in euphSocket in room\",roomName,\":\",e)\n      this.euphSocket.close(1000, \"\");\n    });\n  }\n}\n\nexport class pseudoConnection {\n  send(thing: any) { }\n  close() { }\n};\n\nexport class supportHandler {\n  static allRooms: Room[] = [];\n  static connectionCt = 0;\n  static connections: { event: any, roomName: string, tk: string, readyQ: boolean, isPseudoConnection: boolean, minThreadID:number}[] = [];\n  static addRoom(rm: Room) {\n    // log(\"Room created!\" + rm)\n    let idx = this.allRooms.findIndex((r: any) => { return r.type == rm.type && r.name == rm.name });\n    if (idx >= 0) return;\n    else this.allRooms.push(rm);\n  }\n  static deleteRoom(type: string, roomName: string) {\n    log(\"Room deleted!\" + type + roomName);\n    let idx = this.allRooms.findIndex((r: any) => { return r.type == type && r.name == roomName });\n    if (idx >= 0) this.allRooms.splice(idx, 1);\n  }\n  static async addConnection(ev: any, rn: string, token: string, internalFlag: boolean = false) {\n    // send existing connections to THIS EVENT ONLY\n    if (!internalFlag) console.log(\"added new connection\", rn);\n    this.connectionCt++;\n    if (internalFlag) {\n      token = \"[SYSINTERNAL]\";\n    }\n    ev.send(JSON.stringify({ action: \"RELOAD\" }));\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].roomName == rn)\n        userRequest(this.connections[i].tk, this.connections[i].isPseudoConnection).then((obj: { status: string, data: any, token: string }) => {\n          try {\n              if (obj.status == \"SUCCESS\") {\n              if (!this.connections[i]) return;\n              ev.send(JSON.stringify({ action: \"addUser\", data: { user: obj.data.alias, perms: obj.data.perms, isBot:this.connections[i].isPseudoConnection } }));\n            }\n            else {\n              ev.send(JSON.stringify({ action: \"addUser\", data: { user: processAnon(this.connections[i].tk), perms: 1 } }));\n            }\n          } catch(e) {}\n        });\n    }\n    let usrData = await userRequest(token, internalFlag);\n    if (usrData.status != \"SUCCESS\") usrData = {data:{user:\"\"}}\n    ev.send(JSON.stringify({\n      action:\"yourAlias\", \n      data:{\n        alias:(usrData.status==\"SUCCESS\"?usrData.data.alias:processAnon(token))\n      }\n    }))\n    // add NEW CONNECTION\n    let thiscn = { \n      id: this.connectionCt, \n      event: ev, \n      roomName: rn, \n      tk: token, \n      readyQ: false, \n      isPseudoConnection: internalFlag,\n      userID:usrData.data.user??\"\"\n    };\n    this.connections.push(thiscn);\n    // TELL EVERYONE ELSE ABOUT THE NEW CONNECTION\n    userRequest(token, internalFlag).then((obj: { status: string, data: any, token: string }) => {\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, JSON.stringify({ action: \"addUser\", data: { user: obj.data.alias, perms: obj.data.perms } }));\n      else this.sendMsgTo(rn, JSON.stringify({ action: \"addUser\", data: { user: processAnon(token), perms: 1 } }));\n    });\n    // console.log(\"added connection in \"+rn);\n    let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: { $eq: rn } });\n    let msgCt = roomData ? roomData.msgCt : 0;\n    let threadCt = roomData ? (roomData.threadCt??0) : 0;\n    // let msgs = await msgDB.find({fieldName:\"MSG\", room:{$eq:rn}, msgID:{$gt: msgCt-30}}).toArray();\n    // let threads = await msgDB.find({fieldName:\"MSG\", room:{$eq:rn}, $or:[{parent:-1}, {parent:{$exists:false}}]}).limit(20).toArray();\n    ev.send(JSON.stringify({ action: \"CONNECTIONID\", data: { id: thiscn.id } }));\n    if (!thiscn.isPseudoConnection) {\n      let text = \"\";\n      // // let lastLoadedThread = 0;\n      // let loadedCt = 0, j = msgCt;\n      // while (loadedCt < 30 && j >=0) {\n      //   let msgs = await loadThread(rn, j, true);\n      //   // console.log(\"msgs:\", msgs);\n      //   if (msgs.length == 0) {\n      //     // console.log(\"message %d is not a parent thread\", j)\n      //   }\n      //   else {\n      //     loadedCt++;\n      //     thiscn.minThreadID = msgs[0].msgID; // parent message ID\n      //     // console.log(\"loaded\", msgs.length, \"in room\", rn);\n      //   }\n      //   for (let i = 0; i < msgs.length; i++) {\n      //     if (msgs[i])\n      //     ev.send(JSON.stringify({ action: \"msg\", data: { id: \"-\"+msgs[i].msgID, sender: msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent ?? -1, content: msgs[i].data } }));\n      //   }\n      //   j--;\n      // }\n      // load 30 threads\n      let from = threadCt;\n      for (let i=0; i<5; i++) \n      {\n        let resp = await loadLogs(rn, thiscn.id, from, token);\n        if (resp.status == \"SUCCESS\" && resp.data) from = resp.data.from;\n        if (from < 0) break;\n        // console.log(resp.data.from)\n      }\n      // for (let i=0; i<threads.length; i++) {\n      //   ev.send(JSON.stringify({action:\"msg\", data:{id:threads[i].msgID??-1, sender:threads[i].sender, perms: threads[i].permLevel, parent: threads[i].parent??-1, content:threads[i].data}}));\n      // }\n      // for (let i=0; i<msgs.length; i++) {\n      //   ev.send(JSON.stringify({action:\"msg\", data:{id:msgs[i].msgID??-1, sender:msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent??-1, content:msgs[i].data}}));\n      // }\n      text += \"Welcome to **that** threaded chat! Enter any message in the box below. \" +\n        \"Automated response services and utilities are provided by ~~@thatbot~~. It is currently down. \" +\n        \"Commands are not available here: ~~>>commands~~ \\n\" +\n        \"Logged-in users: click on your username to update it.\\n\"+\n        \"Click this message to dismiss it >>\"\n      ev.send(JSON.stringify({ action: \"msg\", data: { id: +msgCt + 1, sender: \"[SYSTEM]\", time:Date.now()/1000, perms: 3, content: text } }));\n\n    }\n    thiscn.readyQ = true;\n  }\n  static async removeConnection(ev: any, rn: string, token: string) {\n    let idx = this.connections.findIndex((cn: any) => cn.event == ev);\n    if (idx >= 0) this.connections.splice(idx, 1);\n\n    userRequest(token).then((obj: { status: string, data: any, token: string }) => {\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, JSON.stringify({ action: \"removeUser\", data: { user: obj.data.alias, perms: obj.data.perms } }));\n      else this.sendMsgTo(rn, JSON.stringify({ action: \"removeUser\", data: { user: processAnon(token), perms: 1 } }));\n      // console.log(\"removed connection in \"+rn); \n    });\n  }\n\n  static listRooms(euphOnlyQ: boolean, onlineOnlyQ: boolean) {\n    if (euphOnlyQ) {\n      return this.listEuphRooms();\n    }\n    else if (onlineOnlyQ) {\n      return this.listOnlineRooms();\n    }\n    else {\n      return this.listAllRooms();\n    }\n  }\n\n  static listAllRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type == \"HIDDEN_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static async updateAlias(newAlias:string, token:string) {\n    \n    let usrData = await userRequest(token);\n    if (usrData.status != \"SUCCESS\") {\n      usrData.data = {alias:processAnon(token)};\n      return usrData;\n    }\n    let oldAlias = usrData.data.alias;\n    let resp = await realias(newAlias, token);\n    if (resp.status != \"SUCCESS\" && resp.data.type == 2) // thing too long\n    {\n      // resp.status = \n      // resp.data = {, alias:resp.data.alias};\n      return {status:\"ERROR\", data:{type:1, alias:resp.data.alias}};\n    }\n    // find what rooms this user is in\n    for (let i=0; i<this.connections.length; i++)\n      if (this.connections[i].userID == usrData.data.user) {\n        // console.log(\"found connection\", this.connections[i].userID);\n        // must broadcast to everyone for how many renames there are...\n        for (let j=0; j<this.connections.length; j++) {\n          this.connections[j].event.send(JSON.stringify({\n            action:\"removeUser\", \n            data:{\n              user:oldAlias\n            }\n          }));\n          this.connections[j].event.send(JSON.stringify({\n            action:\"addUser\",\n            data:{\n              user:newAlias\n            }\n          }))\n        } \n        // then tell this user what their alias is\n        this.connections[i].event.send(JSON.stringify({action:\"yourAlias\", data:{alias:newAlias}}));\n      }\n    return {status:\"SUCCESS\", data:null, token:token};\n    // else console.log(this.connections[i].userID);\n  }\n\n  static listEuphRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"EUPH_ROOM\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static listOnlineRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"ONLINE_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static getPrefix(type: string) {\n    switch (type) {\n      case 'EUPH_ROOM': return \"&\";\n      case 'ONLINE_SUPPORT': return \"#\";\n      default: return \"??\";\n    }\n  }\n\n  static checkFoundQ(roomName: string) {\n    try {\n      for (let i = 0; i < this.allRooms.length; i++) {\n        if (this.allRooms[i].name == roomName && this.allRooms[i].type != \"EUPH_ROOM\") return true;\n      }\n      return false;\n    } catch (e: any) {\n      console.log(\"Error:\", e);\n    }\n  }\n\n  static mitoseable(roomName: string) {\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].name == roomName && this.allRooms[i].type == \"EUPH_ROOM\") return true;\n    }\n    return false;\n  }\n  static sendMsgTo(roomName: string, data: string) {\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].roomName == roomName) {\n        // encode '>' -- used for message-breaks (yes, it is stupid.)\n        // data = data.replaceAll(\">\", \"&gt;\");\n        // console.log(data);\n        this.connections[i].event.send(data);\n      }\n    }\n\n  }\n\n  static sendMsgTo_ID(connectionID: number, data: string) {\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].id == connectionID) {\n        // encode '>' -- used for message-breaks (yes, it is stupid.)\n        // data = data.replaceAll(\">\", \"&gt;\");\n        // console.log(data);\n        this.connections[i].event.send(data);\n\n      }\n    }\n  }\n}\n\nexport async function sendMsg(msg: string, room: string, parent: number, token: string) {\n  if (msg.length == 0) return {status:\"SUCCESS\", data:null, token:token};\n  msg = msg.trim().slice(0, 1024);\n  let obj = await userRequest(token);\n  let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: room });\n  let msgCt = roomData ? roomData.msgCt : 0;\n  let threadCt = roomData ? (roomData.threadCt??0) : 0;\n  msg = msg.replaceAll(\"\\\\n\", \"\\n\");\n  let parentDoc = await msgDB.findOne({fieldName:\"MSG\", msgID:Number(parent)});\n  // if (parentDoc) console.log(threadCt);\n  await msgDB.insertOne({\n    fieldName: \"MSG\", data: msg, permLevel: obj.data.perms ?? 1,\n    sender: obj.data.alias ?? \"\" + processAnon(token), expiry: /*Date.now() + 3600 * 1000 * 24 * 30*/ 9e99,\n    room: room, msgID: msgCt, parent:parent, threadID: parentDoc?(parentDoc.threadID??threadCt):threadCt,\n    time:Date.now()/1000, senderID:obj.data.user ?? processAnon(token)\n  });\n\n  await msgDB.updateOne({ room: room, fieldName: \"RoomInfo\" }, {\n    $inc: { msgCt: 1, threadCt:parentDoc?0:1}\n  }, { upsert: true });\n  if (obj.status == \"SUCCESS\") {\n    supportHandler.sendMsgTo(room, JSON.stringify({ action: \"msg\", data: {\n      id: msgCt, sender: obj.data.alias, \n      perms: obj.data.perms, parent: parent, \n      content: msg, time:Date.now()/1000,\n      autoThread:parent==-1, senderID:obj.data.user ?? processAnon(token)\n    } }));\n  }\n  else {\n    supportHandler.sendMsgTo(room, JSON.stringify(\n      { action: \"msg\", data: { id: msgCt, sender: processAnon(token), perms: 1, \n                              parent: parent, content: msg, time:Date.now()/1000,\n                             autoThread:parent==-1, senderID:obj.data.user ?? processAnon(token)} }));\n  }\n  for (let i = 0; i < supportHandler.allRooms.length; i++) \n    if (supportHandler.allRooms[i].name == room && supportHandler.allRooms[i].type == \"ONLINE_SUPPORT\") {\n      supportHandler.allRooms[i].handler.onMessage({action:\"msg\", data:{\n        id:msgCt, content:msg}}, obj.data.alias ?? processAnon(token))\n    }\n  if (parent == -1) {\n    return {status:\"SUCCESS\", data:{autoThread:msgCt}, token};\n  }\n  return {status:\"SUCCESS\", data:{autoThread:null}, token:token};\n}\n\nexport async function sendMsg_B(msg: string, room: string, parent:number) {\n  let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: room });\n  let msgCt = roomData ? roomData.msgCt : 0;\n  let threadCt = roomData ? (roomData.threadCt??0) : 0;\n  let parentDoc = await msgDB.findOne({fieldName:\"MSG\", msgID:Number(parent)});\n  let betaNick = \"\";\n  for (let i = 0; i < supportHandler.allRooms.length; i++) {\n    if (supportHandler.allRooms[i].name == room && supportHandler.allRooms[i].type == \"ONLINE_SUPPORT\") {\n      // console.log(\"sending\"+msg);\n      betaNick = supportHandler.allRooms[i].handler.displayNick ?? \"[BetaOS_ERROR]\";\n      break;\n    }\n  }\n  await msgDB.updateOne({ room: room, fieldName: \"RoomInfo\" }, {\n    $inc: { msgCt: 1, threadCt:1}\n  }, { upsert: true });\n  // console.log(msg);\n  await msgDB.insertOne({\n    fieldName: \"MSG\", data: msg.replaceAll(\"\\\\n\\\\n\", \"\\n\"), permLevel: 3,\n    sender: betaNick, expiry: /*Date.now() + 3600 * 1000 * 24 * 30*/ 9e99,\n    room: room, msgID: msgCt, parent:parent, threadID: parentDoc?(parentDoc.threadID??threadCt):threadCt,\n    time:Date.now()/1000, senderID:\"BetaOS System\"\n  });\n  await msgDB.updateOne({ room: room, fieldName: \"RoomInfo\" }, {\n    $inc: { msgCt: 1 }\n  }, { upsert: true });\n  supportHandler.sendMsgTo(room, JSON.stringify({ action: \"msg\", data: { \n    id: msgCt, sender: betaNick, perms: 3, \n    content: msg.replaceAll(\"\\\\n\\\\n\", \"\\n\"), time:Date.now()/1000,\n    parent:parent, senderID:\"BetaOS System\"} }));\n}\n\nfunction processAnon(token: string) {\n  // console.log(token.slice(0,4));\n  return \"Anon\"+token.slice(0,4);\n}\n\nexport function roomRequest(token: string, all: boolean = false) {\n  if (all) return { status: \"SUCCESS\", data: supportHandler.listAllRooms(), token: token };\n  else return { status: \"SUCCESS\", data: supportHandler.listOnlineRooms(), token: token };\n}\n\nexport async function createRoom(name: string, token: string) {\n  if (supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room already exists\" }, token: token };\n  let usrData = await userRequest(token);\n  if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n\n      // supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", name));\n      new WebH(name, false);\n      let obj = await uDB.findOne({ fieldName: \"ROOMS\" });\n      obj.rooms.push(name);\n      await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n        $set: {\n          rooms: obj.rooms\n        },\n      }, { upsert: true });\n      await purge(name, token); // also initialises the room info\n      return { status: \"SUCCESS\", data: null, token: token }\n    }\n    else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n  }\n  else return usrData;\n}\n\nexport async function deleteRoom(name: string, token: string) {\n  if (!supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n  let usrData = await userRequest(token);\n  if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n\n      let obj = await uDB.findOne({ fieldName: \"ROOMS\" })\n      await msgDB.deleteOne({ fieldName: \"RoomInfo\", room: name });\n      await purge(name, token)\n      let idx = obj.rooms.indexOf(name);\n      if (idx >= 0) {\n        supportHandler.deleteRoom(\"ONLINE_SUPPORT\", name);\n        obj.rooms.splice(idx, 1);\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            rooms: obj.rooms\n          },\n        }, { upsert: true });\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n      else {\n        let idx = obj.hidRooms.indexOf(name);\n        if (idx >= 0) {\n          supportHandler.deleteRoom(\"HIDDEN_SUPPORT\", name);\n          obj.hidRooms.splice(idx, 1);\n        }\n        else return { status: \"ERROR\", data: { error: \"Database inconsistency detected\" }, token: token };\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            hidRooms: obj.hidRooms\n          },\n        }, { upsert: true });\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n    }\n    else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n  }\n  else return usrData;\n}\n\nexport function updateActive(name: string, activeQ: boolean) {\n  if (activeQ) supportHandler.addRoom(new Room(\"EUPH_ROOM\", name));\n  else supportHandler.deleteRoom(\"EUPH_ROOM\", name);\n}\n\nexport async function WHOIS(token: string, user: string) {\n  let userData = await authDB.findOne({ fieldName: \"UserData\", user: user });\n  let userData2 = await authDB.find({ fieldName: \"UserData\", alias: user }).toArray();\n  let out = [];\n  for (let i = 0; i < userData2.length; i++) {\n    out.push({\n      user: userData2[i].user,\n      tasks: userData2[i].tasksCompleted,\n      about: userData2[i].aboutme,\n      perms: userData2[i].permLevel\n    })\n  }\n  return {\n    status: \"SUCCESS\", data: {\n      account: {\n        perms: userData ? userData.permLevel : \"N/A\",\n        user: user,\n        tasks: userData ? userData.tasksCompleted : \"N/A\",\n        about: userData ? userData.aboutme : \"Account not found\"\n      }, users: out\n    }, token: token\n  };\n}\n\n// async function loadEuphLogs(rn:string, from:number) {\n  \n// };\n//loadLogs(data.room, data.id, data.from token)\nexport async function loadLogs(rn: string, id: number, from: number, isBridge:boolean, token: string) {\n  // if (isBridge) {await loadEuphLogs(rn, id, from); return;}\n  try {\n    // let j = -1;\n    // let thiscn;\n    let roomInfo = await msgDB.findOne({ fieldName: \"RoomInfo\", room: { $eq: rn } });\n    let minThreadID = roomInfo.minThreadID??0;\n    // for (let i = 0; i < supportHandler.connections.length; i++) \n    //   if (supportHandler.connections[i].id == id) {\n    //     j = supportHandler.connections[i].minThreadID;\n    //     thiscn = supportHandler.connections[i];\n    //     // supportHandler.connections[i].minThreadID+=5;\n    //     break;\n    //   }\n    \n    // let loadedCt = 0;\n    // while (loadedCt < 5 && j >=roomInfo.minCt && j <= roomInfo.msgCt) {\n    //   let msgs = await loadThread(rn, j, true);\n    //   // console.log(\"msgs:\", msgs);\n    //   if (msgs.length == 0) {\n    //     // console.log(\"message %d is not a parent thread\", j)\n    //   }\n    //   else {\n    //     loadedCt++;\n    //     thiscn.minThreadID = Math.min(thiscn.minThreadID, msgs[0].msgID); // parent message ID\n    //     // console.log(\"loaded\", msgs.length, \"in room\", rn);\n    //   }\n    //   for (let i = 0; i < msgs.length; i++) {\n    //     if (msgs[i])\n    //     supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"msg\", data: { id: \"-\"+msgs[i].msgID, sender: msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent ?? -1, content: msgs[i].data } }));\n    //   }\n    //   j--;\n    // }\n    // if (loadedCt < 5) supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: -1 } }));\n    // else supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: 1} })); // nonsense value, unused now\n    // return {status:\"SUCCESS\", data:null, token:token}\n    from = +from;\n    // console.log(\"LOADING LOGS FROM\", from - 5, \"TO\", from, roomInfo.minThreadID);\n    if (from+1 < minThreadID) {\n      supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: -1 } }));\n      return { status: \"SUCCESS\", data: {from:-1}, token: token }\n    }\n    let msgs = await msgDB.find({ fieldName: \"MSG\", room: { $eq: rn }, threadID: { $gt: from - 5, $lte: from } }).sort({threadID:-1, msgID:1}).toArray();\n    let sendOut = {\n      action:\"logs\", \n      data: {\n        logs:[]\n      }\n    };\n    for (let i = 0; i <msgs.length; i++) {\n      // console.log(\"thread id %d msgid %d content %s\", msgs[i].threadID, msgs[i].msgID, msgs[i].data);\n      let dat = {\n        id: \"-\" + msgs[i].msgID, \n        sender: msgs[i].sender, \n        perms: msgs[i].permLevel, \n        parent: msgs[i].parent ?? -1, \n        content: msgs[i].data,\n        time:msgs[i].time,\n        senderID: msgs[i].senderID\n      } ;\n      // console.log(dat);\n      sendOut.data.logs.push(dat);\n      // supportHandler.sendMsgTo_ID(id, dat);\n    }\n    // console.log(sendOut);\n    // console.log(JSON.stringify(sendOut));\n    supportHandler.sendMsgTo_ID(id, JSON.stringify(sendOut));\n    // console.log(\"LOADING COMPLETE, LOADED\" + msgs.length, \"MESSAGES\");\n    supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: from - 5 } }));\n    return { status: \"SUCCESS\", data: {from:from-5}, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n    return {status:\"ERROR\", data:{error:e}, token:token};\n  }\n} // loadLogs\n\nexport async function delMsg(id: string, room: string, token: string) {\n  try {\n    // console.log({fieldName:\"MSG\", msgID:id, room:room});\n    if (!supportHandler.checkFoundQ(room)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    // if (usrData.status != \"SUCCESS\") return usrData;\n    let messageInQuestion = await msgDB.findOne({ fieldName: \"MSG\", msgID: { $eq: id }, room: { $eq: room}});\n    if (usrData.perms < 2 && \n        !(usrData.data.user == messageInQuestion.sender || \n          userData.status == \"ERROR\" && processAnon(token) == messageInQuestion.sender))\n        return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n    await msgDB.deleteOne({ fieldName: \"MSG\", msgID: Number(id), room: room });\n    supportHandler.sendMsgTo(room, JSON.stringify({ action: \"delMsg\", data: { id: Number(id) } }));\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function updateDefaultLoad(name: string[], token: string) {\n  try {\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (usrData.status != \"SUCCESS\") return usrData;\n    // console.log(usrData.data.perms);\n    if (usrData.data.perms < 3) return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n    for (let i = 0; i < name.length; i++) {\n      if (!name[i].match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid room-name(s)\" }, token: token }\n    }\n    await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n      $set: {\n        euphRooms: name\n      }\n    });\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function hidRoom(name: string, token: string) {\n  try {\n    console.log(name);\n    if (supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room already exists\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n    if (usrData.status == \"SUCCESS\") {\n      if (usrData.data.perms >= 2) {\n\n        // supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", name));\n        new WebH(name, false);\n        let obj = await uDB.findOne({ fieldName: \"ROOMS\" });\n        obj.hidRooms.push(name);\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            hidRooms: obj.hidRooms\n          },\n        }, { upsert: true });\n        await purge(name, token); // also initialises the room info\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n      else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n    }\n    else return usrData;\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function purge(name: string, token: string) {\n  try {\n    if (!supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (usrData.status != \"SUCCESS\") return usrData;\n    // console.log(usrData.data.perms);\n    if (usrData.data.perms < 2) return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n\n    await msgDB.deleteMany({ fieldName: \"MSG\", room: name });\n    await msgDB.updateOne({ fieldName: \"RoomInfo\", room: name }, {\n      $set: {\n        msgCt: 0,\n        minCt: 0,\n        threadCt:0,\n        minThreadID:0\n      }\n    }, {upsert:true})\n    supportHandler.sendMsgTo(name, JSON.stringify({ action: \"RESTART\" }));\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function updateAbout(about: string, token: string) {\n  let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n  if (usrData.status != \"SUCCESS\") return usrData;\n  await authDB.updateOne({ fieldName: \"UserData\", user: usrData.data.user }, {\n    $set: {\n      aboutme: about\n    }\n  })\n  return { status: \"SUCCESS\", data: null, token: token }\n}\n\nasync function loadThread(room: string, parentID: number, isParentQ: boolean) {\n  let thisMsg;\n  if (isParentQ) {\n    // load the parent message first\n    thisMsg = await msgDB.findOne({ fieldName: \"MSG\", msgID: parentID, $or: [{ parent: -1 }, { parent: { $exists: false } }], room: room })\n    if (!thisMsg) return [];\n  }\n  let children = await msgDB.find({\n    fieldName: \"MSG\",\n    parent: (isParentQ ? thisMsg.msgID : parentID),\n    room: room\n  }).toArray();\n  \n  // else if (!isParentQ && children.length == 0) {\n    // return [];\n  // }\n  // let origLength = children.length;\n  if (isParentQ && children.length == 0) return [thisMsg];\n  // let skip = [parentID];\n  for (let i = 0; i < children.length; i++) {\n    // console.log(\"att2empting\", children[i].msgID);\n    // if (skip.indexOf(children[i].msgID)>=0) continue;\n    let newChildren = await loadThread(room, children[i].msgID, false);\n    // console.log(\"success: \", newChildren);\n    // skip.push(newChildren[i].msgID);\n    for (let j=0; j<newChildren.length; j++) {\n      children.push(newChildren[j]);\n    }\n    // if (newChildren.length>0) skip.push(newChildren[0].msgID);\n  }\n  if (isParentQ) {\n    children.unshift(thisMsg);\n  }\n  // console.log(\"made it here\");\n  // if (children.length>1) console.log(children.length)\n  // if (children.length>0 && isParentQ) console.log(children[0].parent)\n  // if (children.length == 0) console.log(\"%d children found with parent %d\", children.length, parentID);\n  return children;\n  // return [];\n}"],
  "mappings": "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",
  "names": ["idx", "userData", "userData2"]
}
