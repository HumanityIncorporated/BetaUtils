{
  "version": 3,
  "sources": ["../supportRooms.ts"],
  "sourcesContent": ["import { userRequest } from './userRequest';\nimport { msgDB, authDB, uDB, roomRegex } from './consts';\nimport { log } from './logging'\nimport { minID } from './database';\nimport { WebH } from './betautilities/webHandler';\nexport class Room {\n  type: string;\n  name: string;\n  handler: WebH | null;\n  constructor(type: string, name: string, responder: ((msg: string, sender: string, data: any) => any) | null = null, handler: WebH | null = null) {\n    this.type = type;\n    this.name = name;\n    this.handler = handler;\n  };\n\n}\n\nexport class pseudoConnection {\n  send(thing: any) { }\n  close() { }\n};\n\nexport class supportHandler {\n  static allRooms: Room[] = [];\n  static connectionCt = 0;\n  static connections: { event: any, roomName: string, tk: string, readyQ: boolean, isPseudoConnection: boolean, minThreadID:number}[] = [];\n  static addRoom(rm: Room) {\n    log(\"Room created!\" + rm)\n    let idx = this.allRooms.findIndex((r: any) => { return r.type == rm.type && r.name == rm.name });\n    if (idx >= 0) return;\n    else this.allRooms.push(rm);\n  }\n  static deleteRoom(type: string, roomName: string) {\n    log(\"Room deleted!\" + type + roomName);\n    let idx = this.allRooms.findIndex((r: any) => { return r.type == type && r.name == roomName });\n    if (idx >= 0) this.allRooms.splice(idx, 1);\n  }\n  static async addConnection(ev: any, rn: string, token: string, internalFlag: boolean = false) {\n    // send existing connections to THIS EVENT ONLY\n    this.connectionCt++;\n    if (internalFlag) {\n      token = \"[SYSINTERNAL]\";\n    }\n    ev.send(JSON.stringify({ action: \"RELOAD\" }));\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].roomName == rn)\n        userRequest(this.connections[i].tk, this.connections[i].isPseudoConnection).then((obj: { status: string, data: any, token: string }) => {\n          if (obj.status == \"SUCCESS\") {\n            ev.send(JSON.stringify({ action: \"addUser\", data: { user: obj.data.alias, perms: obj.data.perms } }));\n          }\n          else {\n            ev.send(JSON.stringify({ action: \"addUser\", data: { user: processAnon(this.connections[i].tk), perms: 1 } }));\n          }\n        });\n    }\n    // add NEW CONNECTION\n    let thiscn = { id: this.connectionCt, event: ev, roomName: rn, tk: token, readyQ: false, isPseudoConnection: internalFlag };\n    this.connections.push(thiscn);\n    // TELL EVERYONE ELSE ABOUT THE NEW CONNECTION\n    userRequest(token, internalFlag).then((obj: { status: string, data: any, token: string }) => {\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, JSON.stringify({ action: \"addUser\", data: { user: obj.data.alias, perms: obj.data.perms } }));\n      else this.sendMsgTo(rn, JSON.stringify({ action: \"addUser\", data: { user: processAnon(obj.token), perms: 1 } }));\n    });\n    // console.log(\"added connection in \"+rn);\n    let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: { $eq: rn } });\n    let msgCt = roomData ? roomData.msgCt : 0;\n    // let msgs = await msgDB.find({fieldName:\"MSG\", room:{$eq:rn}, msgID:{$gt: msgCt-30}}).toArray();\n    // let threads = await msgDB.find({fieldName:\"MSG\", room:{$eq:rn}, $or:[{parent:-1}, {parent:{$exists:false}}]}).limit(20).toArray();\n    ev.send(JSON.stringify({ action: \"CONNECTIONID\", data: { id: this.connectionCt } }));\n    if (!thiscn.isPseudoConnection) {\n      let text = \"\";\n      // let lastLoadedThread = 0;\n      let loadedCt = 0, j = msgCt;\n      while (loadedCt < 30 && j >=0) {\n        let msgs = await loadThread(rn, j, true);\n        // console.log(\"msgs:\", msgs);\n        if (msgs.length == 0) {\n          // console.log(\"message %d is not a parent thread\", j)\n        }\n        else {\n          loadedCt++;\n          thiscn.minThreadID = msgs[0].msgID; // parent message ID\n          // console.log(\"loaded\", msgs.length, \"in room\", rn);\n        }\n        for (let i = 0; i < msgs.length; i++) {\n          ev.send(JSON.stringify({ action: \"msg\", data: { id: \"-\"+msgs[i].msgID, sender: msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent ?? -1, content: msgs[i].data } }));\n        }\n        j--;\n      }\n      \n      // load 3 threads and all their children\n      // for (let i=0; i<threads.length; i++) {\n      //   ev.send(JSON.stringify({action:\"msg\", data:{id:threads[i].msgID??-1, sender:threads[i].sender, perms: threads[i].permLevel, parent: threads[i].parent??-1, content:threads[i].data}}));\n      // }\n      // for (let i=0; i<msgs.length; i++) {\n      //   ev.send(JSON.stringify({action:\"msg\", data:{id:msgs[i].msgID??-1, sender:msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent??-1, content:msgs[i].data}}));\n      // }\n      text += \"Welcome to BetaOS Services support! Enter any message in the box below. \" +\n        \"Automated response services and utilities are provided by BetaOS System. \" +\n        \"Commands are available here: &gt;&gt;commands \\n\" +\n        \"Enter !alias @[NEWALIAS] to re-alias yourself. Thank you for using BetaOS Systems!\"\n      ev.send(JSON.stringify({ action: \"msg\", data: { id: +msgCt + 1, sender: \"[SYSTEM]\", perms: 3, content: text } }));\n\n    }\n    thiscn.readyQ = true;\n  }\n  static async removeConnection(ev: any, rn: string, token: string) {\n    let idx = this.connections.findIndex((cn: any) => cn.event == ev);\n    if (idx >= 0) this.connections.splice(idx, 1);\n\n    userRequest(token).then((obj: { status: string, data: any, token: string }) => {\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, JSON.stringify({ action: \"removeUser\", data: { user: obj.data.alias, perms: obj.data.perms } }));\n      else this.sendMsgTo(rn, JSON.stringify({ action: \"removeUser\", data: { user: processAnon(obj.token), perms: 1 } }));\n      // console.log(\"removed connection in \"+rn); \n    });\n  }\n\n  static listRooms(euphOnlyQ: boolean, onlineOnlyQ: boolean) {\n    if (euphOnlyQ) {\n      return this.listEuphRooms();\n    }\n    else if (onlineOnlyQ) {\n      return this.listOnlineRooms();\n    }\n    else {\n      return this.listAllRooms();\n    }\n  }\n\n  static listAllRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type == \"HIDDEN_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static listEuphRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"EUPH_ROOM\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static listOnlineRooms() {\n    let out = [];\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"ONLINE_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type) + this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static getPrefix(type: string) {\n    switch (type) {\n      case 'EUPH_ROOM': return \"&\";\n      case 'ONLINE_SUPPORT': return \"#\";\n      default: return \"??\";\n    }\n  }\n\n  static checkFoundQ(roomName: string) {\n    try {\n      for (let i = 0; i < this.allRooms.length; i++) {\n        if (this.allRooms[i].name == roomName && this.allRooms[i].type != \"EUPH_ROOM\") return true;\n      }\n      return false;\n    } catch (e: any) {\n      console.log(\"Error:\", e);\n    }\n  }\n\n  static mitoseable(roomName: string) {\n    for (let i = 0; i < this.allRooms.length; i++) {\n      if (this.allRooms[i].name == roomName && this.allRooms[i].type == \"EUPH_ROOM\") return true;\n    }\n    return false;\n  }\n  static sendMsgTo(roomName: string, data: string) {\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].roomName == roomName) {\n        // encode '>' -- used for message-breaks (yes, it is stupid.)\n        data = data.replaceAll(\">\", \"&gt;\");\n        // console.log(data);\n        this.connections[i].event.send(data);\n      }\n    }\n\n  }\n\n  static sendMsgTo_ID(connectionID: number, data: string) {\n    for (let i = 0; i < this.connections.length; i++) {\n      if (this.connections[i].id == connectionID) {\n        // encode '>' -- used for message-breaks (yes, it is stupid.)\n        data = data.replaceAll(\">\", \"&gt;\");\n        // console.log(data);\n        this.connections[i].event.send(data);\n\n      }\n    }\n  }\n}\n\nexport function sendMsg(msg: string, room: string, parent: number, token: string, callback: (status: string, data: any, token: string) => any) {\n  userRequest(token).then(async (obj: { status: string, data: any, token: string }) => {\n    let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: room });\n    let msgCt = roomData ? roomData.msgCt : 0;\n    msg = msg.replaceAll(\"\\\\n\", \"\\n\");\n    await msgDB.insertOne({\n      fieldName: \"MSG\", data: msg.replaceAll(\">\", \"&gt;\"), permLevel: obj.data.perms ?? 1,\n      sender: obj.data.alias ?? \"\" + processAnon(token), expiry: Date.now() + 3600 * 1000 * 24 * 30,\n      room: room, msgID: msgCt, parent: Number(parent)\n    });\n    await msgDB.updateOne({ room: room, fieldName: \"RoomInfo\" }, {\n      $inc: { msgCt: 1 }\n    }, { upsert: true });\n    if (obj.status == \"SUCCESS\") {\n      supportHandler.sendMsgTo(room, JSON.stringify({ action: \"msg\", data: { id: msgCt, sender: obj.data.alias, perms: obj.data.perms, parent: parent, content: msg } }));\n    }\n    else {\n      //console.log(\"sending\")\n      supportHandler.sendMsgTo(room, JSON.stringify({ action: \"msg\", data: { id: msgCt, sender: processAnon(token), perms: 1, parent: parent, content: msg } }));\n    }\n    //console.log(supportHandler.allRooms);\n    for (let i = 0; i < supportHandler.allRooms.length; i++) {\n      if (supportHandler.allRooms[i].name == room) {\n        // console.log(\"sending\"+msg);\n        supportHandler.allRooms[i].handler.onMessage(msg, obj.data.alias ?? processAnon(token))\n      }\n\n    }\n    callback(\"SUCCESS\", null, token);\n  });\n}\n\nexport async function sendMsg_B(msg: string, room: string) {\n  let roomData = await msgDB.findOne({ fieldName: \"RoomInfo\", room: room });\n  let msgCt = roomData ? roomData.msgCt : 0;\n  let betaNick = \"\";\n  for (let i = 0; i < supportHandler.allRooms.length; i++) {\n    if (supportHandler.allRooms[i].name == room) {\n      // console.log(\"sending\"+msg);\n      betaNick = supportHandler.allRooms[i].handler.displayNick ?? \"[BetaOS_ERROR]\";\n      break;\n    }\n\n  }\n  console.log(msg);\n  await msgDB.insertOne({\n    fieldName: \"MSG\", data: msg.replaceAll(\"\\\\n\\\\n\", \"\\n\").replaceAll(\">\", \"&gt;\"), permLevel: 3,\n    sender: betaNick, expiry: Date.now() + 3600 * 1000 * 24 * 30,\n    room: room, msgID: msgCt\n  });\n  await msgDB.updateOne({ room: room, fieldName: \"RoomInfo\" }, {\n    $inc: { msgCt: 1 }\n  }, { upsert: true });\n  supportHandler.sendMsgTo(room, JSON.stringify({ action: \"msg\", data: { id: msgCt, sender: betaNick, perms: 3, content: msg.replaceAll(\"\\\\n\\\\n\", \"\\n\") } }));\n}\n\nfunction processAnon(token: string) {\n  return \"Anonymous user\";\n}\n\nexport function roomRequest(token: string, all: boolean = false) {\n  if (all) return { status: \"SUCCESS\", data: supportHandler.listAllRooms(), token: token };\n  else return { status: \"SUCCESS\", data: supportHandler.listOnlineRooms(), token: token };\n}\n\nexport async function createRoom(name: string, token: string) {\n  if (supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room already exists\" }, token: token };\n  let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n  if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n\n      // supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", name));\n      new WebH(name, false);\n      let obj = await uDB.findOne({ fieldName: \"ROOMS\" });\n      obj.rooms.push(name);\n      await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n        $set: {\n          rooms: obj.rooms\n        },\n      }, { upsert: true });\n      return { status: \"SUCCESS\", data: null, token: token }\n    }\n    else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n  }\n  else return usrData;\n}\n\nexport async function deleteRoom(name: string, token: string) {\n  if (!supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n  let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n  if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n\n      let obj = await uDB.findOne({ fieldName: \"ROOMS\" })\n      await msgDB.deleteOne({ fieldName: \"RoomInfo\", room: name });\n      await purge(name, token)\n      let idx = obj.rooms.indexOf(name);\n      if (idx >= 0) {\n        supportHandler.deleteRoom(\"ONLINE_SUPPORT\", name);\n        obj.rooms.splice(idx, 1);\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            rooms: obj.rooms\n          },\n        }, { upsert: true });\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n      else {\n        let idx = obj.hidRooms.indexOf(name);\n        if (idx >= 0) {\n          supportHandler.deleteRoom(\"HIDDEN_SUPPORT\", name);\n          obj.hidRooms.splice(idx, 1);\n        }\n        else return { status: \"ERROR\", data: { error: \"Database inconsistency detected\" }, token: token };\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            hidRooms: obj.hidRooms\n          },\n        }, { upsert: true });\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n    }\n    else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n  }\n  else return usrData;\n}\n\nexport function updateActive(name: string, activeQ: boolean) {\n  if (activeQ) supportHandler.addRoom(new Room(\"EUPH_ROOM\", name));\n  else supportHandler.deleteRoom(\"EUPH_ROOM\", name);\n}\n\nexport async function WHOIS(token: string, user: string) {\n  let userData = await authDB.findOne({ fieldName: \"UserData\", user: user });\n  let userData2 = await authDB.find({ fieldName: \"UserData\", alias: user }).toArray();\n  let out = [];\n  for (let i = 0; i < userData2.length; i++) {\n    out.push({\n      user: userData2[i].user,\n      tasks: userData2[i].tasksCompleted,\n      about: userData2[i].aboutme,\n      perms: userData2[i].permLevel\n    })\n  }\n  return {\n    status: \"SUCCESS\", data: {\n      account: {\n        perms: userData ? userData.permLevel : \"N/A\",\n        user: user,\n        tasks: userData ? userData.tasksCompleted : \"N/A\",\n        about: userData ? userData.aboutme : \"Account not found\"\n      }, users: out\n    }, token: token\n  };\n}\n\n//loadLogs(data.room, data.id, data.from token)\nexport async function loadLogs(rn: string, id: string, from: number, token: string) {\n  try {\n    let j = -1;\n    let thiscn;\n    let roomInfo = await msgDB.findOne({ fieldName: \"RoomInfo\", room: { $eq: rn } });\n    for (let i = 0; i < supportHandler.connections.length; i++) \n      if (supportHandler.connections[i].id == id) {\n        j = roomInfo.msgCt - supportHandler.connections[i].minThreadID;\n        thiscn = supportHandler.connections[i];\n        // supportHandler.connections[i].minThreadID+=5;\n        break;\n      }\n    \n    let loadedCt = 0;\n    while (loadedCt < 5 && j >=roomInfo.minCt && j <= roomInfo.msgCt) {\n      let msgs = await loadThread(rn, j, true);\n      // console.log(\"msgs:\", msgs);\n      if (msgs.length == 0) {\n        // console.log(\"message %d is not a parent thread\", j)\n      }\n      else {\n        loadedCt++;\n        thiscn.minThreadID = msgs[0].msgID; // parent message ID\n        // console.log(\"loaded\", msgs.length, \"in room\", rn);\n      }\n      for (let i = 0; i < msgs.length; i++) {\n        supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"msg\", data: { id: \"-\"+msgs[i].msgID, sender: msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent ?? -1, content: msgs[i].data } }));\n      }\n      j--;\n    }\n    if (loadedCt < 5) supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: -1 } }));\n    else supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: 1} })); // nonsense value, unused now\n    return {status:\"SUCCESS\", data:null, token:token}\n    // from = +from;\n    // console.log(\"LOADING LOGS FROM\", from - 30, \"TO\", from, roomInfo.minCt);\n    // if (from < minID || (roomInfo && roomInfo.minCt && from < roomInfo.minCt)) {\n    //   supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: -1 } }));\n    //   return { status: \"SUCCESS\", data: null, token: token }\n    // }\n    // let msgs = await msgDB.find({ fieldName: \"MSG\", room: { $eq: rn }, msgID: { $gt: from - 30, $lt: from } }).toArray();\n    // for (let i = msgs.length - 1; i >= 0; i--) {\n    //   console.log(msgs[i].msgID);\n    //   let dat = JSON.stringify({ action: \"msg\", data: { id: \"-\" + msgs[i].msgID, sender: msgs[i].sender, perms: msgs[i].permLevel, parent: msgs[i].parent ?? -1, content: msgs[i].data } });\n    //   // console.log(dat);\n    //   supportHandler.sendMsgTo_ID(id, dat);\n    // }\n    // console.log(\"LOADING COMPLETE, LOADED\" + msgs.length, \"MESSAGES\");\n    // supportHandler.sendMsgTo_ID(id, JSON.stringify({ action: \"LOADCOMPLETE\", data: { id: from - 30 } }));\n    // return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n} // loadLogs\n\nexport async function delMsg(id: string, room: string, token: string) {\n  try {\n    // console.log({fieldName:\"MSG\", msgID:id, room:room});\n    if (!supportHandler.checkFoundQ(room)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (usrData.status != \"SUCCESS\") return usrData;\n    if (usrData.perms < 2) return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n    await msgDB.deleteOne({ fieldName: \"MSG\", msgID: Number(id), room: room });\n    supportHandler.sendMsgTo(room, JSON.stringify({ action: \"delMsg\", data: { id: Number(id) } }));\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function updateDefaultLoad(name: string[], token: string) {\n  try {\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (usrData.status != \"SUCCESS\") return usrData;\n    // console.log(usrData.data.perms);\n    if (usrData.data.perms < 3) return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n    for (let i = 0; i < name.length; i++) {\n      if (!name[i].match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid room-name(s)\" }, token: token }\n    }\n    await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n      $set: {\n        euphRooms: name\n      }\n    });\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function hidRoom(name: string, token: string) {\n  try {\n    console.log(name);\n    if (supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room already exists\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (!name.match(\"^\" + roomRegex + \"$\")) return { status: \"ERROR\", data: { error: \"Invalid roomname!\" }, token: token };\n    if (usrData.status == \"SUCCESS\") {\n      if (usrData.data.perms >= 2) {\n\n        // supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", name));\n        new WebH(name, false);\n        let obj = await uDB.findOne({ fieldName: \"ROOMS\" });\n        obj.hidRooms.push(name);\n        await uDB.updateOne({ fieldName: \"ROOMS\" }, {\n          $set: {\n            hidRooms: obj.hidRooms\n          },\n        }, { upsert: true });\n        return { status: \"SUCCESS\", data: null, token: token }\n      }\n      else return { status: \"ERROR\", data: { error: \"Access denied!\" }, token: token };\n    }\n    else return usrData;\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function purge(name: string, token: string) {\n  try {\n    if (!supportHandler.checkFoundQ(name)) return { status: \"ERROR\", data: { error: \"Room does not exist\" }, token: token };\n    let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n    if (usrData.status != \"SUCCESS\") return usrData;\n    // console.log(usrData.data.perms);\n    if (usrData.data.perms < 3) return { status: \"ERROR\", data: { error: \"Insufficient permissions!\" }, token: token };\n\n    await msgDB.deleteMany({ fieldName: \"MSG\", room: name });\n    await msgDB.updateOne({ fieldName: \"RoomInfo\", room: name }, {\n      $set: {\n        msgCt: 0,\n        minCt: 0\n      }\n    })\n    supportHandler.sendMsgTo(name, JSON.stringify({ action: \"RESTART\" }));\n    return { status: \"SUCCESS\", data: null, token: token };\n  } catch (e: any) {\n    console.log(\"Error:\", e);\n  }\n}\n\nexport async function updateAbout(about: string, token: string) {\n  let usrData = await userRequest(token) as { status: string, data: { perms: number } };\n  if (usrData.status != \"SUCCESS\") return usrData;\n  await authDB.updateOne({ fieldName: \"UserData\", user: usrData.data.user }, {\n    $set: {\n      aboutme: about\n    }\n  })\n  return { status: \"SUCCESS\", data: null, token: token }\n}\n\nasync function loadThread(room: string, parentID: number, isParentQ: boolean) {\n  let thisMsg;\n  if (isParentQ) {\n    // load the parent message first\n    thisMsg = await msgDB.findOne({ fieldName: \"MSG\", msgID: parentID, $or: [{ parent: -1 }, { parent: { $exists: false } }], room: room })\n    if (!thisMsg) return [];\n  }\n  let children = await msgDB.find({\n    fieldName: \"MSG\",\n    parent: (isParentQ ? thisMsg.msgID : parentID),\n    room: room\n  }).toArray();\n  if (isParentQ) {\n    children.push(thisMsg);\n  }\n  else if (!isParentQ) {\n    return [];\n  }\n  for (let i = 0; i < children.length; i++) {\n    let newChildren = await loadThread(room, children[i].msgID, false);\n    for (let c in newChildren) {\n      children.push(c);\n    }\n      \n  }\n  if (children.length>1) console.log(children.length);\n  return children;\n  // return [];\n}"],
  "mappings": "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",
  "names": ["idx"]
}
