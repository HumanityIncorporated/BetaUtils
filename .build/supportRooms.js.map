{
  "version": 3,
  "sources": ["../supportRooms.ts"],
  "sourcesContent": ["import {userRequest} from './userRequest';\nimport {msgDB, authDB, uDB} from './consts';\nexport class Room {\n  type:string;\n  name:string;\n  constructor(type:string, name:string) {\n    this.type=type;\n    this.name=name;\n  };\n\n}\n\nexport class supportHandler {\n  static allRooms: Room[] = [];\n  static connections: {event:any, roomName:string, tk:string, readyQ:boolean}[] = [];\n  static addRoom(rm:Room) {\n    let idx = this.allRooms.findIndex((r:any)=>{return r.type==rm.type && r.name==rm.name});\n    if (idx >= 0) return;\n    else this.allRooms.push(rm);\n  }\n  static deleteRoom(type:string, roomName:string) {\n    let idx = this.allRooms.findIndex((r:any)=>{return r.type==type && r.name==roomName});\n    if (idx >= 0) this.allRooms.splice(idx, 1);\n  }\n  static async addConnection(ev:any, rn:string, token:string) {\n    // send existing connections to THIS EVENT ONLY\n    for (let i=0; i<this.connections.length; i++) {\n      if (this.connections[i].roomName == rn)\n        userRequest(this.connections[i].tk).then((obj:{status:string, data:any, token:string})=>{\n          if (obj.status == \"SUCCESS\") ev.write(\"data:+\"+obj.data.alias+\"(\"+obj.data.perms+\")>\\n\\n\");\n          else ev.write(\"data:+\"+processAnon(this.connections[i].tk)+\"(1)>\\n\\n\");\n        });\n    }\n    // add NEW CONNECTION\n    let thiscn = {event:ev, roomName:rn, tk:token, readyQ:false};\n    this.connections.push(thiscn);\n    // TELL EVERYONE ELSE ABOUT THE NEW CONNECTION\n    userRequest(token).then((obj:{status:string, data:any, token:string})=>{\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, \"+\"+obj.data.alias+\"(\"+obj.data.perms+\")\");\n      else this.sendMsgTo(rn, \"+\"+processAnon(obj.token)+\"(1)\");\n    });\n    console.log(\"added connection in \"+rn);\n    let msgs = await msgDB.find({fieldName:\"MSG\", room:{$eq:rn}}).toArray();\n    let text = \"\";\n    for (let i=0; i<msgs.length; i++) {\n      // let userData = await authDB.findOne({fieldName:\"UserData\", user:msgs[i].sender})\n      // if (!userData) text+= \"[\"+msgs[i].sender+\"](1)\"+msgs[i].data+\">\";\n      // if (!userData) ev.write(\"data:[\"+msgs[i].sender+\"](1)\"+msgs[i].data+\">\\n\\n\");\n      // else text += \"[\"+(userData.alias??msgs[i].sender)+\"](\"+userData.permLevel+\")\"+msgs[i].data+\">\";\n      ev.write(\"data:[\"+(msgs[i].sender)+\"](\"+msgs[i].permLevel+\")\"+msgs[i].data+\">\\n\\n\");\n    }\n    text += \"[SYSTEM](3)Welcome to BetaOS Services support! Enter any message in the box below. \"+\n      \"Automated response services and utilities are provided by BetaOS System. \"+\n      \"Commands are available here: &gt;&gt;commands \\n\"+\n      \"Enter !alias @[NEWALIAS] to re-alias yourself. Thank you for using BetaOS Systems!>\"\n    ev.write(\"data:\"+text+\"\\n\\n\")\n    thiscn.readyQ = true;\n  }\n  static async removeConnection(ev:any, rn:string, token:string) {\n    let idx = this.connections.findIndex((cn:any)=>cn.event == ev);\n    if (idx >= 0) this.connections.splice(idx, 1);\n    \n    userRequest(token).then((obj:{status:string, data:any, token:string})=>{\n      if (obj.status == \"SUCCESS\") this.sendMsgTo(rn, \"-\"+obj.data.alias+\"(\"+obj.data.perms+\")\");\n      else this.sendMsgTo(rn, \"-\"+processAnon(obj.token)+\"(1)\");\n      console.log(\"removed connection in \"+rn); \n    });\n  }\n  \n  static listRooms(euphOnlyQ:boolean, onlineOnlyQ:boolean) {\n    if(euphOnlyQ) {\n      return this.listEuphRooms();\n    }\n    else if (onlineOnlyQ) {\n      return this.listOnlineRooms();\n    }\n    else {\n      return this.listAllRooms();\n    }\n  }\n  \n  static listAllRooms() {\n    let out = [];\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].type == \"HIDDEN_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type)+this.allRooms[i].name);\n    }\n    return out;\n  }\n  \n  static listEuphRooms() {\n    let out = [];\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"EUPH_ROOM\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type)+this.allRooms[i].name);\n    }\n    return out;\n  }\n  \n  static listOnlineRooms() {\n    let out = [];\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].type != \"ONLINE_SUPPORT\") continue;\n      out.push(this.getPrefix(this.allRooms[i].type)+this.allRooms[i].name);\n    }\n    return out;\n  }\n\n  static getPrefix(type:string) {\n    switch(type) {\n      case 'EUPH_ROOM': return \"&\";\n      case 'ONLINE_SUPPORT': return \"#\";\n      default: return \"??\";\n    }\n  }\n  \n  static checkFoundQ(roomName:string) {\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].name == roomName && this.allRooms[i].type != \"EUPH_ROOM\") return true;\n    }\n    return false;\n  }\n\n  static mitoseable(roomName:string) {\n     for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].name == roomName && this.allRooms[i].type == \"EUPH_ROOM\") return true;\n    }\n    return false;\n  }\n  static sendMsgTo(roomName:string, data:string) {\n    for (let i=0; i<this.connections.length; i++) {\n      if (this.connections[i].roomName == roomName) {\n        // encode '>' -- used for message-breaks (yes, it is stupid.)\n        data = data.replaceAll(\">\", \"&gt;\");\n        this.connections[i].event.write(\"data:\"+data+\">\\n\\n\")\n      }\n    }\n  }  \n}\n\nexport function sendMsg(msg:string, room:string, token:string, callback: (status:string, data:any, token:string)=>any) {\n  userRequest(token).then(async (obj:{status:string, data:any, token:string})=>{\n    await msgDB.insertOne({fieldName:\"MSG\", data:msg.replaceAll(\">\", \"&gt;\"), permLevel:obj.data.perms??1, \n                             sender:obj.data.alias??\"\"+processAnon(token), expiry:Date.now()+3600*1000, room:room});\n    if (obj.status == \"SUCCESS\") supportHandler.sendMsgTo(room, \"[\"+obj.data.alias+\"](\"+obj.data.perms+\")\"+msg);\n    else supportHandler.sendMsgTo(room, \"[\"+processAnon(token)+\"](1)\"+msg);\n    callback(\"SUCCESS\", null, token);\n  });\n}\n\nfunction processAnon(token:string) {\n  return \"Anonymous user\";\n}\n\nexport function roomRequest(token:string, all:boolean=false) {\n  if (all) return {status: \"SUCCESS\", data:supportHandler.listAllRooms(), token:token};\n  else return {status: \"SUCCESS\", data:supportHandler.listOnlineRooms(), token:token};\n}\n\nexport async function createRoom(name:string, token:string) {\n  if (supportHandler.checkFoundQ(name)) return {status:\"ERROR\", data:{error:\"Room already exists\"}, token:token};\n  let usrData = await userRequest(token) as {status:string, data:{perms:number}};\n  \n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n      supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", name));\n      let obj = await uDB.findOne({fieldName:\"ROOMS\"});\n      obj.rooms.push(name);\n      await uDB.updateOne({fieldName:\"ROOMS\"}, {\n        $set: {\n          rooms: obj.rooms\n        },\n      }, {upsert:true});\n      return {status:\"SUCCESS\", data:null, token:token}\n    }\n    else return {status:\"ERROR\", data:{error:\"Access denied!\"}, token:token};\n  }\n  else return usrData;\n}\n\nexport async function deleteRoom(name:string, token:string) {\n  if (!supportHandler.checkFoundQ(name)) return {status:\"ERROR\", data:{error:\"Room does not exist\"}, token:token};\n  let usrData = await userRequest(token) as {status:string, data:{perms:number}};\n  \n  if (usrData.status == \"SUCCESS\") {\n    if (usrData.data.perms >= 2) {\n\n      let obj = await uDB.findOne({fieldName:\"ROOMS\"})\n      let idx = obj.rooms.indexOf(name); \n      if (idx>=0) {\n        supportHandler.deleteRoom(\"ONLINE_SUPPORT\", name);\n        obj.rooms.splice(idx, 1);\n        await uDB.updateOne({fieldName:\"ROOMS\"}, {\n          $set: {\n            rooms: obj.rooms\n          },\n        }, {upsert:true});\n        return {status:\"SUCCESS\", data:null, token:token}\n      }\n      else {\n        let idx = obj.hidRooms.indexOf(name); \n        if (idx>=0) {\n          supportHandler.deleteRoom(\"HIDDEN_SUPPORT\", name);\n          obj.hidRooms.splice(idx, 1);\n        }\n        else return {status:\"ERROR\", data:{error: \"Database inconsistency detected\"}, token:token};\n        await uDB.updateOne({fieldName:\"ROOMS\"}, {\n          $set: {\n            hidRooms: obj.hidRooms\n          },\n        }, {upsert:true});\n        return {status:\"SUCCESS\", data:null, token:token}\n      }\n    }\n    else return {status:\"ERROR\", data:{error:\"Access denied!\"}, token:token};\n  }\n  else return usrData;\n}\n\nexport function updateActive(name:string, activeQ: boolean) {\n  if (activeQ) supportHandler.addRoom(new Room(\"EUPH_ROOM\", name));\n  else supportHandler.deleteRoom(\"EUPH_ROOM\", name);\n}\n\nexport async function WHOIS(token:string, user:string) {\n  let userData = await authDB.findOne({fieldName:\"UserData\", user:user});\n  let userData2 = await authDB.find({fieldName:\"UserData\", alias:user}).toArray();\n  let out = [];\n  for (let i=0; i<userData2.length; i++) {\n    out.push({user:userData2[i].user, \n              tasks: userData2[i].tasksCompleted,\n              about:userData2[i].aboutme,\n              perms: userData2[i].permLevel})\n  }\n  return {status:\"SUCCESS\", data:{account:{\n    perms:userData?userData.permLevel:\"N/A\", \n    user:user, \n    tasks:userData?userData.tasksCompleted:\"N/A\",\n    about:userData?userData.aboutme:\"Account not found\"\n  }, users:out}, token:token};\n}"],
  "mappings": "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",
  "names": ["idx"]
}
