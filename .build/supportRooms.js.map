{
  "version": 3,
  "sources": ["../supportRooms.ts"],
  "sourcesContent": ["import { userRequest } from './userRequest';\nexport class Room {\n  type:string;\n  pausedQ: boolean;\n  name:string;\n  constructor(type:string, name:string) {\n    this.type=type;\n    this.pausedQ = false;\n    this.name=name;\n  };\n\n  pause() {\n    this.pausedQ = true;\n  }\n}\n\nexport class supportHandler {\n  static allRooms: Room[] = [];\n  static connections: {event:any, roomName:string}[] = [];\n  static addRoom(r:Room) {\n    this.allRooms.push(r);\n  }\n  static addConnection(ev:any, rn:string, token:string) {\n    this.connections.push({event:ev, roomName:rn});\n    userRequest((status:string, data:any, token:string)=>{\n      if (status == \"SUCCESS\") this.sendMsgTo(rn, \"+\"+data.user+\"(\"+data.perms+\")\");\n    }, token);\n    console.log(\"added connection in \"+rn);\n  }\n  static async removeConnection(ev:any, rn:string, token:string) {\n    let idx = this.connections.indexOf({event:ev, roomName:rn});\n    if (idx >= 0) this.connections.splice(idx, 1);\n    userRequest((status:string, data:any, token:string)=>{\n      if (status == \"SUCCESS\") this.sendMsgTo(rn, \"+\"+data.user+\"(\"+data.perms+\")\");\n    }, token);\n    \n  }\n  static listRooms(euphOnlyQ:boolean) {\n    let out = [];\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (euphOnlyQ && this.allRooms[i].type != \"EUPH_ROOM\") continue;\n      if (this.allRooms[i].type == \"HIDDEN_SUPPORT\") continue;\n      out.push(this.allRooms[i].name);\n    }\n    return out;\n  }\n  static checkFoundQ(roomName:string) {\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.allRooms[i].name == roomName) return true;\n    }\n    return false;\n  }\n  static sendMsgTo(roomName:string, data:string) {\n    for (let i=0; i<this.allRooms.length; i++) {\n      if (this.connections[i].roomName == roomName)\n        this.connections[i].event.write(\"data:\"+data+\"\\n\\n\")\n    }\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA4B;AACrB,MAAM,KAAK;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY,MAAa,MAAa;AACpC,SAAK,OAAK;AACV,SAAK,UAAU;AACf,SAAK,OAAK;AAAA,EACZ;AAAA,EAEA,QAAQ;AACN,SAAK,UAAU;AAAA,EACjB;AACF;AAEO,MAAM,eAAe;AAAA,EAC1B,OAAO,WAAmB,CAAC;AAAA,EAC3B,OAAO,cAA8C,CAAC;AAAA,EACtD,OAAO,QAAQ,GAAQ;AACrB,SAAK,SAAS,KAAK,CAAC;AAAA,EACtB;AAAA,EACA,OAAO,cAAc,IAAQ,IAAW,OAAc;AACpD,SAAK,YAAY,KAAK,EAAC,OAAM,IAAI,UAAS,GAAE,CAAC;AAC7C,wCAAY,CAAC,QAAe,MAAUA,WAAe;AACnD,UAAI,UAAU;AAAW,aAAK,UAAU,IAAI,MAAI,KAAK,OAAK,MAAI,KAAK,QAAM,GAAG;AAAA,IAC9E,GAAG,KAAK;AACR,YAAQ,IAAI,yBAAuB,EAAE;AAAA,EACvC;AAAA,EACA,aAAa,iBAAiB,IAAQ,IAAW,OAAc;AAC7D,QAAI,MAAM,KAAK,YAAY,QAAQ,EAAC,OAAM,IAAI,UAAS,GAAE,CAAC;AAC1D,QAAI,OAAO;AAAG,WAAK,YAAY,OAAO,KAAK,CAAC;AAC5C,wCAAY,CAAC,QAAe,MAAUA,WAAe;AACnD,UAAI,UAAU;AAAW,aAAK,UAAU,IAAI,MAAI,KAAK,OAAK,MAAI,KAAK,QAAM,GAAG;AAAA,IAC9E,GAAG,KAAK;AAAA,EAEV;AAAA,EACA,OAAO,UAAU,WAAmB;AAClC,QAAI,MAAM,CAAC;AACX,aAAS,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,UAAI,aAAa,KAAK,SAAS,GAAG,QAAQ;AAAa;AACvD,UAAI,KAAK,SAAS,GAAG,QAAQ;AAAkB;AAC/C,UAAI,KAAK,KAAK,SAAS,GAAG,IAAI;AAAA,IAChC;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,YAAY,UAAiB;AAClC,aAAS,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,UAAI,KAAK,SAAS,GAAG,QAAQ;AAAU,eAAO;AAAA,IAChD;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,UAAU,UAAiB,MAAa;AAC7C,aAAS,IAAE,GAAG,IAAE,KAAK,SAAS,QAAQ,KAAK;AACzC,UAAI,KAAK,YAAY,GAAG,YAAY;AAClC,aAAK,YAAY,GAAG,MAAM,MAAM,UAAQ,OAAK,MAAM;AAAA,IACvD;AAAA,EACF;AACF;",
  "names": ["token"]
}
