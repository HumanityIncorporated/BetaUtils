{
  "version": 3,
  "sources": ["../HASHTHEDAMNTHING.ts"],
  "sourcesContent": ["const bcrypt = require('bcrypt');\nconst saltRounds = 10;\nconst myPlaintextPassword = 's0/\\/\\P4$$w0rD';\nconst someOtherPlaintextPassword = 'not_bacon';\nconst db = require(\"@replit/database\")\n\nexport function requestHash(user:string, pwd:string, callback:any) {\n  bcrypt.hash(pwd, saltRounds, function(err:any, hash:string) {\n    \n    const db2 = require(\"@replit/database\")\n    console.log(err, hash)\n    db2.set(\"hashed\", hash as string).then(()=>{});\n    \n    returnedHash(user, hash, callback);\n      // Store hash in your password DB.\n  });\n}\nfunction returnedHash(user:string, hash:string, callback:any) {\n  db.get(user).then((value:any)=>{\n    if (value == hash) // pwd validated. \n      db.get(user+\"PERM\").then((perm:any)=>{\n        // call the permissions updator and send user to the applicable page\n        let response = {  \n          granted:perm \n        };  \n        callback.end(JSON.stringify(response));  \n      })\n    else {\n      let response = {granted:null}\n      callback.end(JSON.stringify(response));\n    }\n  })\n}\n\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAM,SAAS,QAAQ,QAAQ;AAC/B,MAAM,aAAa;AACnB,MAAM,sBAAsB;AAC5B,MAAM,6BAA6B;AACnC,MAAM,KAAK,QAAQ,kBAAkB;AAE9B,SAAS,YAAY,MAAa,KAAY,UAAc;AACjE,SAAO,KAAK,KAAK,YAAY,SAAS,KAAS,MAAa;AAE1D,UAAM,MAAM,QAAQ,kBAAkB;AACtC,YAAQ,IAAI,KAAK,IAAI;AACrB,QAAI,IAAI,UAAU,IAAc,EAAE,KAAK,MAAI;AAAA,IAAC,CAAC;AAE7C,iBAAa,MAAM,MAAM,QAAQ;AAAA,EAEnC,CAAC;AACH;AACA,SAAS,aAAa,MAAa,MAAa,UAAc;AAC5D,KAAG,IAAI,IAAI,EAAE,KAAK,CAAC,UAAY;AAC7B,QAAI,SAAS;AACX,SAAG,IAAI,OAAK,MAAM,EAAE,KAAK,CAAC,SAAW;AAEnC,YAAI,WAAW;AAAA,UACb,SAAQ;AAAA,QACV;AACA,iBAAS,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA,MACvC,CAAC;AAAA,SACE;AACH,UAAI,WAAW,EAAC,SAAQ,KAAI;AAC5B,eAAS,IAAI,KAAK,UAAU,QAAQ,CAAC;AAAA,IACvC;AAAA,EACF,CAAC;AACH;",
  "names": []
}
