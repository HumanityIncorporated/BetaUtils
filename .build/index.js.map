{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import {initServer} from './server';\nimport {DBMaintenance, connectDB, client} from './database';\nimport {supportHandler, Room} from './supportRooms'\nimport {log} from './logging';\nconst fs = require('fs');\nimport {uDB} from './consts';\nimport {WS} from './betautilities/wsHandler';\nimport {WebH} from './betautilities/webHandler';\nimport { serverUpdate } from './betautilities/wordler';\nexport let connectionSuccess = true;\nexport let DBConnectFailure:any = null;\nimport {mail} from './mailer';\nconst localEuphRooms = [\n  // \"bots\", \"room\", \"memes\", \"music\", \"srs\"\n]\nconst { exec } = require(\"child_process\");\n\nlet timedOutQ = false;\nexport let UPSINCESTR = \"\";\ntry {\n  // mail();\n  // let fs = \n  if (connectionSuccess)\n  connectDB().then((err:any)=>{\n    // console.log(thing)\n    if (!connectionSuccess) return;\n    // uDB.findOne({fieldName:\"lastActive\"}).then((document:{time:number})=>{\n    if (process.env[\"branch\"] == \"unstable\") {\n      let readline = require('readline');\n\n      let rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n      \n      });\n      let timeout;\n      rl.question(\"Confirm start extra instance? \", (answer:string)=>{\n        clearTimeout(timeout);\n        rl.close();\n        answer = answer.trim().toLowerCase();\n        if (timedOutQ) return;\n        if (answer != \"y\" && answer != \"yes\") init(false);\n        else {\n          init(true)\n        } // extra instances approved\n      });\n      timeout = setTimeout(()=>{init(false)}, 30000);\n    }\n    else init(true);\n    \n    //   if (Date.now - time < 10000)  // <10sec since last report, assume it is active\n    //   {\n    //     \n    //   else init();\n    // })\n    // init();\n  });\n  DBConnectFailure = setTimeout(()=>{\n    connectionSuccess=false; \n    console.log(\"Connection failed\")\n    log(\"Services failed. Rebooting now.\")\n    initServer();\n    serverUpdate();\n    setTimeout(()=>{exec(\"kill 1\")}, 10000);\n  }, 29000);\n} catch (e:any) {\n  console.log(e);\n}\n\nasync function init(startBots:boolean) \n{\n  initServer();\n  DBMaintenance();\n  serverUpdate();\n  let now = new Date(Date.now());\n  UPSINCESTR = \"----------------------Systems restarted at \"+now.toLocaleString(\"en-US\", {timeZone: \"America/New_York\"})+\"-------------------\";\n  log(UPSINCESTR);\n  uDB.findOne({fieldName:\"ROOMS\"}).then((obj:{euphRooms:string[], rooms:string[], hidRooms:string[]})=>{\n    console.log(obj);\n    if (startBots)\n    for (let i=0; i<obj.euphRooms.length; i++) {\n      supportHandler.addRoom(new Room(\"EUPH_ROOM\", obj.euphRooms[i]));\n      new WS(\"wss://euphoria.io/room/\" + obj.euphRooms[i] +\"/ws\", \"BetaUtilities\"+(process.env['branch']==\"unstable\"?\"-U\":\"\"), obj.euphRooms[i], !(obj.euphRooms[i]==\"test\" || obj.euphRooms[i]==\"bots\"))\n      log(\"Connected euph_room\")+obj.euphRooms[i];\n      console.log(\"Connected euph_room\", obj.euphRooms[i]);\n    }\n    // for (let i=0; i<localEuphRooms.length; i++) {\n    //   supportHandler.addRoom(new Room(\"EUPH_ROOM\", localEuphRooms[i]));\n    //   new WS(\"wss://euphoria.io/room/\" + localEuphRooms[i] +\"/ws\", \"BetaUtilities\", localEuphRooms[i], false)\n    //   log(\"Connected euph_room\")+localEuphRooms[i];\n    //   console.log(\"Connected euph_room\", localEuphRooms[i]);\n    // }\n    for (let i=0; i<obj.rooms.length; i++) {\n      new WebH(obj.rooms[i], false);\n      //supportHandler.addRoom(new Room(\"ONLINE_SUPPORT\", obj.rooms[i]));\n      console.log(\"Loaded support room\", obj.rooms[i]);\n    }\n    for (let i=0; i<obj.hidRooms.length; i++) {\n      new WebH(obj.hidRooms[i], true);\n      // supportHandler.addRoom(new Room(\"HIDDEN_SUPPORT\", obj.hidRooms[i]));\n      console.log(\"Loaded hidden support room\", obj.hidRooms[i]);\n    }\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyB;AACzB,sBAA+C;AAC/C,0BAAmC;AACnC,qBAAkB;AAElB,oBAAkB;AAClB,uBAAiB;AACjB,wBAAmB;AACnB,qBAA6B;AAJ7B,MAAM,KAAK,QAAQ,IAAI;AAKhB,IAAI,oBAAoB;AACxB,IAAI,mBAAuB;AAElC,MAAM,iBAAiB,CAEvB;AACA,MAAM,EAAE,KAAK,IAAI,QAAQ,eAAe;AAExC,IAAI,YAAY;AACT,IAAI,aAAa;AACxB,IAAI;AAGF,MAAI;AACJ,mCAAU,EAAE,KAAK,CAAC,QAAU;AAE1B,UAAI,CAAC;AAAmB;AAExB,UAAI,QAAQ,IAAI,aAAa,YAAY;AACvC,YAAI,WAAW,QAAQ,UAAU;AAEjC,YAAI,KAAK,SAAS,gBAAgB;AAAA,UAChC,OAAO,QAAQ;AAAA,UACf,QAAQ,QAAQ;AAAA,QAElB,CAAC;AACD,YAAI;AACJ,WAAG,SAAS,kCAAkC,CAAC,WAAgB;AAC7D,uBAAa,OAAO;AACpB,aAAG,MAAM;AACT,mBAAS,OAAO,KAAK,EAAE,YAAY;AACnC,cAAI;AAAW;AACf,cAAI,UAAU,OAAO,UAAU;AAAO,iBAAK,KAAK;AAAA,eAC3C;AACH,iBAAK,IAAI;AAAA,UACX;AAAA,QACF,CAAC;AACD,kBAAU,WAAW,MAAI;AAAC,eAAK,KAAK;AAAA,QAAC,GAAG,GAAK;AAAA,MAC/C;AACK,aAAK,IAAI;AAAA,IAQhB,CAAC;AACD,qBAAmB,WAAW,MAAI;AAChC,wBAAkB;AAClB,YAAQ,IAAI,mBAAmB;AAC/B,4BAAI,iCAAiC;AACrC,kCAAW;AACX,qCAAa;AACb,eAAW,MAAI;AAAC,WAAK,QAAQ;AAAA,IAAC,GAAG,GAAK;AAAA,EACxC,GAAG,IAAK;AACV,SAAS,GAAP;AACA,UAAQ,IAAI,CAAC;AACf;AAEA,eAAe,KAAK,WACpB;AACE,gCAAW;AACX,qCAAc;AACd,mCAAa;AACb,MAAI,MAAM,IAAI,KAAK,KAAK,IAAI,CAAC;AAC7B,eAAa,gDAA8C,IAAI,eAAe,SAAS,EAAC,UAAU,mBAAkB,CAAC,IAAE;AACvH,0BAAI,UAAU;AACd,oBAAI,QAAQ,EAAC,WAAU,QAAO,CAAC,EAAE,KAAK,CAAC,QAA8D;AACnG,YAAQ,IAAI,GAAG;AACf,QAAI;AACJ,eAAS,IAAE,GAAG,IAAE,IAAI,UAAU,QAAQ,KAAK;AACzC,2CAAe,QAAQ,IAAI,yBAAK,aAAa,IAAI,UAAU,EAAE,CAAC;AAC9D,YAAI,oBAAG,4BAA4B,IAAI,UAAU,KAAI,OAAO,mBAAiB,QAAQ,IAAI,aAAW,aAAW,OAAK,KAAK,IAAI,UAAU,IAAI,EAAE,IAAI,UAAU,MAAI,UAAU,IAAI,UAAU,MAAI,OAAO;AAClM,gCAAI,qBAAqB,IAAE,IAAI,UAAU;AACzC,gBAAQ,IAAI,uBAAuB,IAAI,UAAU,EAAE;AAAA,MACrD;AAOA,aAAS,IAAE,GAAG,IAAE,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,uBAAK,IAAI,MAAM,IAAI,KAAK;AAE5B,cAAQ,IAAI,uBAAuB,IAAI,MAAM,EAAE;AAAA,IACjD;AACA,aAAS,IAAE,GAAG,IAAE,IAAI,SAAS,QAAQ,KAAK;AACxC,UAAI,uBAAK,IAAI,SAAS,IAAI,IAAI;AAE9B,cAAQ,IAAI,8BAA8B,IAAI,SAAS,EAAE;AAAA,IAC3D;AAAA,EACF,CAAC;AACH;",
  "names": []
}
