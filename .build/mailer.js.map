{
  "version": 3,
  "sources": ["../mailer.ts"],
  "sourcesContent": ["const fs = require('fs').promises;\nconst path = require('path');\n//const process = require('process');\nconst {authenticate} = require('@google-cloud/local-auth');\nconst {google} = require('googleapis');\n\n// If modifying these scopes, delete token.json.\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\nimport {TOKEN_PATH, CREDENTIALS_PATH} from './consts'\n// const TOKEN_PATH = path.join(process.cwd(), 'token.json');\n// const CREDENTIALS_PATH = path.join(process.cwd(), 'credentials.json');\n\n/**\n * Reads previously authorized credentials from the save file.\n *\n * @return {Promise<OAuth2Client|null>}\n */\nasync function loadSavedCredentialsIfExist() {\n  try {\n    const content = await fs.readFile(TOKEN_PATH);\n    const credentials = JSON.parse(content);\n    return google.auth.fromJSON(credentials);\n  } catch (err) {\n    return null;\n  }\n}\n\n/**\n * Serializes credentials to a file compatible with GoogleAUth.fromJSON.\n *\n * @param {OAuth2Client} client\n * @return {Promise<void>}\n */\nasync function saveCredentials(client:any) {\n  const content = await fs.readFile(CREDENTIALS_PATH);\n  const keys = JSON.parse(content);\n  const key = keys.installed || keys.web;\n  const payload = JSON.stringify({\n    type: 'authorized_user',\n    client_id: key.client_id,\n    client_secret: key.client_secret,\n    refresh_token: client.credentials.refresh_token,\n  });\n  await fs.writeFile(TOKEN_PATH, payload);\n}\n\n/**\n * Load or request or authorization to call APIs.\n *\n */\nexport async function authorize() {\n  let client = await loadSavedCredentialsIfExist();\n  if (client) {\n    return client;\n  }\n  client = await authenticate({\n    scopes: SCOPES,\n    keyfilePath: CREDENTIALS_PATH,\n  });\n  if (client.credentials) {\n    await saveCredentials(client);\n  }\n  return client;\n}\n\n/**\n * Lists the labels in the user's account.\n *\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\n */\nasync function listLabels(auth:any) {\n  const gmail = google.gmail({version: 'v1', auth});\n  const res = await gmail.users.drafts.create({userID:\"me\"});\n  const labels = res.data.labels;\n  if (!labels || labels.length === 0) {\n    console.log('No labels found.');\n    return;\n  }\n  console.log('Labels:');\n  labels.forEach((label:any) => {\n    console.log(`- ${label.name}`);\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA,oBAA2C;AAX3C,MAAM,KAAK,QAAQ,IAAI,EAAE;AACzB,MAAM,OAAO,QAAQ,MAAM;AAE3B,MAAM,EAAC,aAAY,IAAI,QAAQ,0BAA0B;AACzD,MAAM,EAAC,OAAM,IAAI,QAAQ,YAAY;AAGrC,MAAM,SAAS,CAAC,gDAAgD;AAahE,eAAe,8BAA8B;AAC3C,MAAI;AACF,UAAM,UAAU,MAAM,GAAG,SAAS,wBAAU;AAC5C,UAAM,cAAc,KAAK,MAAM,OAAO;AACtC,WAAO,OAAO,KAAK,SAAS,WAAW;AAAA,EACzC,SAAS,KAAP;AACA,WAAO;AAAA,EACT;AACF;AAQA,eAAe,gBAAgB,QAAY;AACzC,QAAM,UAAU,MAAM,GAAG,SAAS,8BAAgB;AAClD,QAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,QAAM,MAAM,KAAK,aAAa,KAAK;AACnC,QAAM,UAAU,KAAK,UAAU;AAAA,IAC7B,MAAM;AAAA,IACN,WAAW,IAAI;AAAA,IACf,eAAe,IAAI;AAAA,IACnB,eAAe,OAAO,YAAY;AAAA,EACpC,CAAC;AACD,QAAM,GAAG,UAAU,0BAAY,OAAO;AACxC;AAMA,eAAsB,YAAY;AAChC,MAAI,SAAS,MAAM,4BAA4B;AAC/C,MAAI,QAAQ;AACV,WAAO;AAAA,EACT;AACA,WAAS,MAAM,aAAa;AAAA,IAC1B,QAAQ;AAAA,IACR,aAAa;AAAA,EACf,CAAC;AACD,MAAI,OAAO,aAAa;AACtB,UAAM,gBAAgB,MAAM;AAAA,EAC9B;AACA,SAAO;AACT;AAOA,eAAe,WAAW,MAAU;AAClC,QAAM,QAAQ,OAAO,MAAM,EAAC,SAAS,MAAM,KAAI,CAAC;AAChD,QAAM,MAAM,MAAM,MAAM,MAAM,OAAO,OAAO,EAAC,QAAO,KAAI,CAAC;AACzD,QAAM,SAAS,IAAI,KAAK;AACxB,MAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAClC,YAAQ,IAAI,kBAAkB;AAC9B;AAAA,EACF;AACA,UAAQ,IAAI,SAAS;AACrB,SAAO,QAAQ,CAAC,UAAc;AAC5B,YAAQ,IAAI,KAAK,MAAM,MAAM;AAAA,EAC/B,CAAC;AACH;",
  "names": []
}
